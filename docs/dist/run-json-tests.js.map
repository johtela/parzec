{
  "version": 3,
  "sources": ["../../../litscript/src/custom-elem.ts", "../../../lits-extras/src/test-reporter.ts", "../../../lits-extras/node_modules/zora/dist/bundle/index.js", "../../../lits-extras/src/tester.ts", "../../../lits-extras/src/test-runner.ts", "../../src/components/run-json-tests.ts", "../../src/ref.ts", "../../src/error.ts", "../../src/result.ts", "../../src/utils.ts", "../../src/lexer.ts", "../../src/parser.ts", "../../src/arrayparsers.ts", "../../src/test/jsonparser.ts", "../../src/test/jsontests.ts", "../../node_modules/fast-check/lib/esm/check/precondition/PreconditionFailure.js", "../../node_modules/fast-check/lib/esm/stream/StreamHelpers.js", "../../node_modules/fast-check/lib/esm/stream/Stream.js", "../../node_modules/fast-check/lib/esm/check/symbols.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/definition/Shrinkable.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/definition/Arbitrary.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/definition/ArbitraryWithContextualShrink.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/definition/NextValue.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/definition/NextArbitrary.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/definition/ConverterToNext.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/definition/ConverterFromNext.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/definition/Converters.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/TupleArbitrary.js", "../../node_modules/fast-check/lib/esm/arbitrary/genericTuple.js", "../../node_modules/fast-check/lib/esm/check/property/IRawProperty.js", "../../node_modules/fast-check/lib/esm/check/runner/configuration/GlobalParameters.js", "../../node_modules/fast-check/lib/esm/check/property/AsyncProperty.generic.js", "../../node_modules/fast-check/lib/esm/check/property/Property.generic.js", "../../node_modules/fast-check/lib/esm/check/property/Property.generated.js", "../../node_modules/pure-rand/lib/esm/pure-rand-default.js", "../../node_modules/pure-rand/lib/esm/generator/RandomGenerator.js", "../../node_modules/pure-rand/lib/esm/generator/LinearCongruential.js", "../../node_modules/pure-rand/lib/esm/generator/MersenneTwister.js", "../../node_modules/pure-rand/lib/esm/generator/XorShift.js", "../../node_modules/pure-rand/lib/esm/generator/XoroShiro.js", "../../node_modules/pure-rand/lib/esm/distribution/internals/ArrayInt.js", "../../node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformIntDistributionInternal.js", "../../node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformArrayIntDistributionInternal.js", "../../node_modules/pure-rand/lib/esm/distribution/UnsafeUniformArrayIntDistribution.js", "../../node_modules/pure-rand/lib/esm/distribution/UniformArrayIntDistribution.js", "../../node_modules/pure-rand/lib/esm/distribution/UnsafeUniformBigIntDistribution.js", "../../node_modules/pure-rand/lib/esm/distribution/UniformBigIntDistribution.js", "../../node_modules/pure-rand/lib/esm/distribution/UnsafeUniformIntDistribution.js", "../../node_modules/pure-rand/lib/esm/distribution/UniformIntDistribution.js", "../../node_modules/pure-rand/lib/esm/pure-rand.js", "../../node_modules/fast-check/lib/esm/check/runner/configuration/VerbosityLevel.js", "../../node_modules/fast-check/lib/esm/check/runner/configuration/QualifiedParameters.js", "../../node_modules/fast-check/lib/esm/check/property/SkipAfterProperty.js", "../../node_modules/fast-check/lib/esm/check/property/TimeoutProperty.js", "../../node_modules/fast-check/lib/esm/check/property/UnbiasedProperty.js", "../../node_modules/fast-check/lib/esm/utils/stringify.js", "../../node_modules/fast-check/lib/esm/check/property/IgnoreEqualValuesProperty.js", "../../node_modules/fast-check/lib/esm/check/runner/DecorateProperty.js", "../../node_modules/fast-check/lib/esm/check/runner/reporter/ExecutionStatus.js", "../../node_modules/fast-check/lib/esm/check/runner/reporter/RunExecution.js", "../../node_modules/fast-check/lib/esm/check/runner/RunnerIterator.js", "../../node_modules/fast-check/lib/esm/check/runner/SourceValuesIterator.js", "../../node_modules/fast-check/lib/esm/random/generator/PureRandom.js", "../../node_modules/fast-check/lib/esm/random/generator/Random.js", "../../node_modules/fast-check/lib/esm/check/runner/Tosser.js", "../../node_modules/fast-check/lib/esm/check/runner/utils/PathWalker.js", "../../node_modules/fast-check/lib/esm/check/runner/utils/RunDetailsFormatter.js", "../../node_modules/fast-check/lib/esm/check/runner/Runner.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/BiasNumericRange.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ShrinkInteger.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/IntegerArbitrary.js", "../../node_modules/fast-check/lib/esm/arbitrary/integer.js", "../../node_modules/fast-check/lib/esm/stream/LazyIterableIterator.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/BuildCompareFilter.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/ArrayArbitrary.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/MaxLengthFromMinLength.js", "../../node_modules/fast-check/lib/esm/arbitrary/array.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/ShrinkBigInt.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/BigIntArbitrary.js", "../../node_modules/fast-check/lib/esm/arbitrary/bigInt.js", "../../node_modules/fast-check/lib/esm/arbitrary/boolean.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/ConstantArbitrary.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/IndexToCharString.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/builders/CharacterArbitraryBuilder.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/IndexToPrintableIndex.js", "../../node_modules/fast-check/lib/esm/arbitrary/char.js", "../../node_modules/fast-check/lib/esm/arbitrary/fullUnicode.js", "../../node_modules/fast-check/lib/esm/arbitrary/unicode.js", "../../node_modules/fast-check/lib/esm/arbitrary/constant.js", "../../node_modules/fast-check/lib/esm/arbitrary/context.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/TimeToDate.js", "../../node_modules/fast-check/lib/esm/arbitrary/date.js", "../../node_modules/fast-check/lib/esm/arbitrary/set.js", "../../node_modules/fast-check/lib/esm/arbitrary/tuple.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/KeyValuePairsToObject.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/DepthContext.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/FrequencyArbitrary.js", "../../node_modules/fast-check/lib/esm/arbitrary/frequency.js", "../../node_modules/fast-check/lib/esm/arbitrary/nat.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/helpers/SpecificCharacterRange.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/StringConstraintsExtractor.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/helpers/ArrayInt64.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/helpers/ArrayInt64Arbitrary.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/DoubleNextArbitrary.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/FloatNextArbitrary.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/FloatingPointArbitrary.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/helpers/TextEscaper.js", "../../node_modules/fast-check/lib/esm/arbitrary/maxSafeInteger.js", "../../node_modules/fast-check/lib/esm/arbitrary/oneof.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/CodePointsToString.js", "../../node_modules/fast-check/lib/esm/arbitrary/memo.js", "../../node_modules/fast-check/lib/esm/arbitrary/string.js", "../../node_modules/fast-check/lib/esm/arbitrary/float32Array.js", "../../node_modules/fast-check/lib/esm/arbitrary/float64Array.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/builders/TypedIntArrayArbitraryBuilder.js", "../../node_modules/fast-check/lib/esm/arbitrary/int16Array.js", "../../node_modules/fast-check/lib/esm/arbitrary/int32Array.js", "../../node_modules/fast-check/lib/esm/arbitrary/int8Array.js", "../../node_modules/fast-check/lib/esm/arbitrary/uint16Array.js", "../../node_modules/fast-check/lib/esm/arbitrary/uint32Array.js", "../../node_modules/fast-check/lib/esm/arbitrary/uint8Array.js", "../../node_modules/fast-check/lib/esm/arbitrary/uint8ClampedArray.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/SparseArrayArbitrary.js", "../../node_modules/fast-check/lib/esm/check/arbitrary/ObjectArbitrary.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/builders/PartialRecordArbitraryBuilder.js", "../../node_modules/fast-check/lib/esm/check/model/commands/CommandsIterable.js", "../../node_modules/fast-check/lib/esm/arbitrary/_internals/implementations/SchedulerImplem.js"],
  "sourcesContent": ["/**\r\n * # Dynamic Content with Web Components\r\n * \r\n * Visualizers are removed in LiTScript version 2. The recommended alternative\r\n * is to use [web components][] as a substitute. They can be inserted to \r\n * markdown as easily and have other benefits:\r\n* \r\n *   *  [Shadow DOM][] isolates styles from the parent document. This prevents \r\n *      CSS rules from spilling into the main page.\r\n * \r\n *   *  You don't have to register your components with LiTScript. The web\r\n *      component API handles that.\r\n * \r\n *   *  It's simpler to add parameters to the components using HTML attributes.\r\n * \r\n *   *  You can use JS frameworks such as [Lit][] to create your components.\r\n * \r\n * To help write web components in LiTScript, we provide a base class for custom\r\n * elements. It handles attaching the shadow DOM and loading styles into the\r\n * component. Below is an example how you can use it:\r\n * ```typescript\r\n *  // Import root style file. LiTScript will bundle this into file: \r\n *  // ${outDir}/dist/my-element.css\r\n *  import \"my-element.css\"\r\n * \r\n *  export abstract class MyElement extends StyledElement {\r\n *      constructor() {\r\n *          // Give the name of the root CSS file as argument to the inherited\r\n *          // constructor. The base class will insert a <link> tag inside the \r\n *          // component that loads the styles.\r\n *          super(\"my-element\")\r\n *          // Initialize your component here. Add your elements under the \r\n *          // inherited body element.\r\n *      }\r\n * \r\n *      protected override connect() {\r\n *          // Called when the element is attached to the DOM. Call code that\r\n *          // you want to perform here.\r\n *      }\r\n *  }\r\n *  // Register your custom element.\r\n *  customElements.define(\"my-element\", MyElement)\r\n * ```\r\n * \r\n * Now you can import your component in the [front matter][] of any other file\r\n * and insert it at any location.\r\n * ```json\r\n * ---\r\n * { \"modules\": [ \"path/to/my-element\" ] }\r\n * ---\r\n * \r\n * # Here is My Component\r\n * \r\n * <my-element />\r\n * ```\r\n * \r\n * [web components]: https://developer.mozilla.org/en-US/docs/Web/API/Web_components\r\n * [Shadow DOM]: https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM\r\n * [front matter]: templates/front-matter.html\r\n * [Lit]: https://lit.dev/\r\n * \r\n * ## CustomElement Class\r\n * \r\n * The base class for custom elements extends HTMLElement DOM class and attaches\r\n * a shadow root into it.\r\n */\r\nexport abstract class CustomElement extends HTMLElement {\r\n    protected root: ShadowRoot\r\n    /**\r\n     * The flag that tells whether the component has been attached to DOM.\r\n     */    \r\n    private connected: boolean\r\n    /**\r\n     * Constructor attaches the shadow DOM and clears the `connected` flag.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.root  = this.attachShadow({ mode: 'open' })\r\n        this.connected = false\r\n    }\r\n    /**\r\n     * This method is called when the component is attached to DOM. It checks\r\n     * whether we have already connected our functionality. If not we call the\r\n     * abstract `connect` method and set the `connected` flag.\r\n     */\r\n    connectedCallback() {\r\n        if (!this.connected) {\r\n            this.connect()\r\n            this.connected = true\r\n        }\r\n    }\r\n    /**\r\n     * Override this method to run code when the component is connected.\r\n     */\r\n    protected abstract connect()\r\n}\r\n/**\r\n * ## StyledElement Class\r\n * \r\n * The styled element inherits from custom element and adds stylesheet reference\r\n * to the shadow DOM. It also adds a `div` that is the new body of the element.\r\n */\r\nexport abstract class StyledElement extends CustomElement {\r\n    protected body: HTMLElement\r\n    /**\r\n     * Constructor attaches the shadow DOM and creates `<link>` tag under it\r\n     * that refers to the CSS file. Then it creates the `body` div under the\r\n     * shadow root. You can add your own elements under it.\r\n     */\r\n    constructor(cssRoot: string) {\r\n        super()\r\n        let link = document.createElement('link')\r\n        link.setAttribute('rel', 'stylesheet')\r\n        let src = (document.currentScript as HTMLScriptElement).src\r\n        let path = src.substring(0, src.lastIndexOf(\"/\"))\r\n        link.setAttribute('href', `${path}/${cssRoot}.css`)\r\n        this.root.appendChild(link)\r\n        this.body = document.createElement('div')\r\n        this.root.appendChild(this.body)\r\n    }\r\n}", "import * as zora from 'zora'\r\n\r\nexport interface Assertion {\r\n    name: string\r\n    pass?: boolean\r\n}\r\n\r\nexport interface Test extends Assertion {\r\n    error?: Error\r\n    passes: number\r\n    fails: number\r\n    duration: number\r\n    tests: Test[]\r\n    assertions: Assertion[]\r\n}\r\n\r\nfunction createTest(name: string): Test {\r\n    return {\r\n        name,\r\n        passes: 0,\r\n        fails: 0,\r\n        duration: 0,\r\n        tests: [],\r\n        assertions: []\r\n    }\r\n}\r\n\r\nexport function createReporter(name: string, render: (rootTest: Test) => void):\r\n    (stream: zora.TestHarness) => Promise<void> {\r\n    let rootTest = createTest(name)\r\n    let teststack: Test[] = [rootTest]\r\n    return async (stream: zora.TestHarness): Promise<void> => {\r\n        for await (let message of stream) {\r\n            switch (message.type) {\r\n                case zora.MessageType.TEST_START:\r\n                    let newtest = createTest((message as zora.StartTestMessage)\r\n                        .data.description)\r\n                    teststack[teststack.length - 1].tests.push(newtest)\r\n                    teststack.push(newtest)\r\n                    break\r\n                case zora.MessageType.TEST_END:\r\n                    let ztest = message.data as zora.Test\r\n                    let test = teststack.pop()\r\n                    test.pass = ztest.pass\r\n                    test.passes = ztest.successCount\r\n                    test.fails = ztest.failureCount\r\n                    test.error = ztest.error\r\n                    test.duration = ztest.executionTime\r\n                    render(rootTest)\r\n                    break\r\n                case zora.MessageType.ASSERTION:\r\n                    let zass = message.data as zora.AssertionResult\r\n                    teststack[teststack.length - 1].assertions.push({\r\n                        name: zass.description,\r\n                        pass: zass.pass\r\n                    })\r\n                    break\r\n                case zora.MessageType.BAIL_OUT:\r\n                    teststack[teststack.length - 1].error =\r\n                        (message as zora.BailoutMessage).data\r\n                    render(rootTest)\r\n                    break\r\n            }\r\n        }\r\n    }\r\n}", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst startTestMessage = (test, offset) => ({\n    type: \"TEST_START\" /* TEST_START */,\n    data: test,\n    offset\n});\nconst assertionMessage = (assertion, offset) => ({\n    type: \"ASSERTION\" /* ASSERTION */,\n    data: assertion,\n    offset\n});\nconst endTestMessage = (test, offset) => ({\n    type: \"TEST_END\" /* TEST_END */,\n    data: test,\n    offset\n});\nconst bailout = (error, offset) => ({\n    type: \"BAIL_OUT\" /* BAIL_OUT */,\n    data: error,\n    offset\n});\n\nconst delegateToCounter = (counter) => (target) => Object.defineProperties(target, {\n    skipCount: {\n        get() {\n            return counter.skipCount;\n        }\n    },\n    failureCount: {\n        get() {\n            return counter.failureCount;\n        }\n    },\n    successCount: {\n        get() {\n            return counter.successCount;\n        }\n    },\n    count: {\n        get() {\n            return counter.count;\n        }\n    }\n});\nconst counter = () => {\n    let success = 0;\n    let failure = 0;\n    let skip = 0;\n    return Object.defineProperties({\n        update(assertion) {\n            const { pass, skip: isSkipped } = assertion;\n            if (isSkipped) {\n                skip++;\n            }\n            else if (!isAssertionResult(assertion)) {\n                skip += assertion.skipCount;\n                success += assertion.successCount;\n                failure += assertion.failureCount;\n            }\n            else if (pass) {\n                success++;\n            }\n            else {\n                failure++;\n            }\n        }\n    }, {\n        successCount: {\n            get() {\n                return success;\n            }\n        },\n        failureCount: {\n            get() {\n                return failure;\n            }\n        },\n        skipCount: {\n            get() {\n                return skip;\n            }\n        },\n        count: {\n            get() {\n                return skip + success + failure;\n            }\n        }\n    });\n};\n\nconst defaultTestOptions = Object.freeze({\n    offset: 0,\n    skip: false,\n    runOnly: false\n});\nconst noop = () => {\n};\nconst TesterPrototype = {\n    [Symbol.asyncIterator]: async function* () {\n        await this.routine;\n        for (const assertion of this.assertions) {\n            if (assertion[Symbol.asyncIterator]) {\n                // Sub test\n                yield startTestMessage({ description: assertion.description }, this.offset);\n                yield* assertion;\n                if (assertion.error !== null) {\n                    // Bubble up the error and return\n                    this.error = assertion.error;\n                    this.pass = false;\n                    return;\n                }\n            }\n            yield assertionMessage(assertion, this.offset);\n            this.pass = this.pass && assertion.pass;\n            this.counter.update(assertion);\n        }\n        return this.error !== null ?\n            yield bailout(this.error, this.offset) :\n            yield endTestMessage(this, this.offset);\n    }\n};\nconst testerLikeProvider = (BaseProto = TesterPrototype) => (assertions, routine, offset) => {\n    const testCounter = counter();\n    const withTestCounter = delegateToCounter(testCounter);\n    let pass = true;\n    return withTestCounter(Object.create(BaseProto, {\n        routine: {\n            value: routine\n        },\n        assertions: {\n            value: assertions\n        },\n        offset: {\n            value: offset\n        },\n        counter: {\n            value: testCounter\n        },\n        length: {\n            get() {\n                return assertions.length;\n            }\n        },\n        pass: {\n            enumerable: true,\n            get() {\n                return pass;\n            },\n            set(val) {\n                pass = val;\n            }\n        }\n    }));\n};\nconst testerFactory = testerLikeProvider();\n\nconst tester = (description, spec, { offset = 0, skip = false, runOnly = false } = defaultTestOptions) => {\n    let executionTime = 0;\n    let error = null;\n    let done = false;\n    const assertions = [];\n    const collect = item => {\n        if (done) {\n            throw new Error(`test \"${description}\" \ntried to collect an assertion after it has run to its completion. \nYou might have forgotten to wait for an asynchronous task to complete\n------\n${spec.toString()}\n`);\n        }\n        assertions.push(item);\n    };\n    const specFunction = skip === true ? noop : function zora_spec_fn() {\n        return spec(assert(collect, offset, runOnly));\n    };\n    const testRoutine = (async function () {\n        try {\n            const start = Date.now();\n            const result = await specFunction();\n            executionTime = Date.now() - start;\n            return result;\n        }\n        catch (e) {\n            error = e;\n        }\n        finally {\n            done = true;\n        }\n    })();\n    return Object.defineProperties(testerFactory(assertions, testRoutine, offset), {\n        error: {\n            get() {\n                return error;\n            },\n            set(val) {\n                error = val;\n            }\n        },\n        executionTime: {\n            enumerable: true,\n            get() {\n                return executionTime;\n            }\n        },\n        skip: {\n            value: skip\n        },\n        description: {\n            enumerable: true,\n            value: description\n        }\n    });\n};\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nconst isAssertionResult = (result) => {\n    return 'operator' in result;\n};\nconst specFnRegexp = /zora_spec_fn/;\nconst zoraInternal = /zora\\/dist\\/bundle/;\nconst filterStackLine = l => (l && !zoraInternal.test(l) && !l.startsWith('Error') || specFnRegexp.test(l));\nconst getAssertionLocation = () => {\n    const err = new Error();\n    const stack = (err.stack || '')\n        .split('\\n')\n        .map(l => l.trim())\n        .filter(filterStackLine);\n    const userLandIndex = stack.findIndex(l => specFnRegexp.test(l));\n    const stackline = userLandIndex >= 1 ? stack[userLandIndex - 1] : (stack[0] || 'N/A');\n    return stackline\n        .replace(/^at|^@/, '');\n};\nconst assertMethodHook = (fn) => function (...args) {\n    // @ts-ignore\n    return this.collect(fn(...args));\n};\nconst aliasMethodHook = (methodName) => function (...args) {\n    return this[methodName](...args);\n};\nconst unbindAssert = (target) => Object.fromEntries([...Object.keys(AssertPrototype), 'collect']\n    .map((methodName) => [methodName, (...args) => target[methodName](...args)]));\nconst AssertPrototype = {\n    equal: assertMethodHook((actual, expected, description = 'should be equivalent') => ({\n        pass: fastDeepEqual(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"equal\" /* EQUAL */\n    })),\n    equals: aliasMethodHook('equal'),\n    eq: aliasMethodHook('equal'),\n    deepEqual: aliasMethodHook('equal'),\n    same: aliasMethodHook('equal'),\n    notEqual: assertMethodHook((actual, expected, description = 'should not be equivalent') => ({\n        pass: !fastDeepEqual(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"notEqual\" /* NOT_EQUAL */\n    })),\n    notEquals: aliasMethodHook('notEqual'),\n    notEq: aliasMethodHook('notEqual'),\n    notDeepEqual: aliasMethodHook('notEqual'),\n    is: assertMethodHook((actual, expected, description = 'should be the same') => ({\n        pass: Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"is\" /* IS */\n    })),\n    isNot: assertMethodHook((actual, expected, description = 'should not be the same') => ({\n        pass: !Object.is(actual, expected),\n        actual,\n        expected,\n        description,\n        operator: \"isNot\" /* IS_NOT */\n    })),\n    notSame: aliasMethodHook('isNot'),\n    ok: assertMethodHook((actual, description = 'should be truthy') => ({\n        pass: Boolean(actual),\n        actual,\n        expected: 'truthy value',\n        description,\n        operator: \"ok\" /* OK */\n    })),\n    truthy: aliasMethodHook('ok'),\n    notOk: assertMethodHook((actual, description = 'should be falsy') => ({\n        pass: !Boolean(actual),\n        actual,\n        expected: 'falsy value',\n        description,\n        operator: \"notOk\" /* NOT_OK */\n    })),\n    falsy: aliasMethodHook('notOk'),\n    fail: assertMethodHook((description = 'fail called') => ({\n        pass: false,\n        actual: 'fail called',\n        expected: 'fail not called',\n        description,\n        operator: \"fail\" /* FAIL */\n    })),\n    throws: assertMethodHook((func, expected, description) => {\n        let caught;\n        let pass;\n        let actual;\n        if (typeof expected === 'string') {\n            [expected, description] = [description, expected];\n        }\n        try {\n            func();\n        }\n        catch (err) {\n            caught = { error: err };\n        }\n        pass = caught !== undefined;\n        actual = caught && caught.error;\n        if (expected instanceof RegExp) {\n            pass = expected.test(actual) || expected.test(actual && actual.message);\n            actual = actual && actual.message || actual;\n            expected = String(expected);\n        }\n        else if (typeof expected === 'function' && caught) {\n            pass = actual instanceof expected;\n            actual = actual.constructor;\n        }\n        return {\n            pass,\n            actual,\n            expected,\n            description: description || 'should throw',\n            operator: \"throws\" /* THROWS */\n        };\n    }),\n    doesNotThrow: assertMethodHook((func, expected, description) => {\n        let caught;\n        if (typeof expected === 'string') {\n            [expected, description] = [description, expected];\n        }\n        try {\n            func();\n        }\n        catch (err) {\n            caught = { error: err };\n        }\n        return {\n            pass: caught === undefined,\n            expected: 'no thrown error',\n            actual: caught && caught.error,\n            operator: \"doesNotThrow\" /* DOES_NOT_THROW */,\n            description: description || 'should not throw'\n        };\n    })\n};\nconst assert = (collect, offset, runOnly = false) => {\n    const actualCollect = item => {\n        if (!item.pass) {\n            item.at = getAssertionLocation();\n        }\n        collect(item);\n        return item;\n    };\n    const test = (description, spec, opts) => {\n        const options = Object.assign({}, defaultTestOptions, opts, { offset: offset + 1, runOnly });\n        const subTest = tester(description, spec, options);\n        collect(subTest);\n        return subTest.routine;\n    };\n    const skip = (description, spec, opts) => {\n        return test(description, spec, Object.assign({}, opts, { skip: true }));\n    };\n    // @ts-ignore\n    return {\n        ...unbindAssert(Object.create(AssertPrototype, { collect: { value: actualCollect } })),\n        test(description, spec, opts = {}) {\n            if (runOnly) {\n                return skip(description, spec, opts);\n            }\n            return test(description, spec, opts);\n        },\n        skip(description, spec = noop, opts = {}) {\n            return skip(description, spec, opts);\n        },\n        only(description, spec, opts = {}) {\n            const specFn = runOnly === false ? _ => {\n                throw new Error(`Can not use \"only\" method when not in run only mode`);\n            } : spec;\n            return test(description, specFn, opts);\n        }\n    };\n};\n\nconst map = (fn) => async function* (stream) {\n    for await (const m of stream) {\n        yield fn(m);\n    }\n};\n// ! it mutates the underlying structure yet it is more efficient regarding performances\nconst flatten = map((m) => {\n    m.offset = 0;\n    return m;\n});\nconst isAssertionResult$1 = (result) => {\n    return 'operator' in result;\n};\nconst stringifySymbol = (key, value) => {\n    if (typeof value === 'symbol') {\n        return value.toString();\n    }\n    return value;\n};\n\n// @ts-ignore\nconst flatDiagnostic = ({ pass, description, ...rest }) => rest;\nconst Tap = {\n    print(message, offset = 0) {\n        this.log(message.padStart(message.length + (offset * 4))); // 4 white space used as indent (see tap-parser)\n    },\n    printYAML(obj, offset = 0) {\n        const YAMLOffset = offset + 0.5;\n        this.print('---', YAMLOffset);\n        for (const [prop, value] of Object.entries(obj)) {\n            this.print(`${prop}: ${JSON.stringify(value, stringifySymbol)}`, YAMLOffset + 0.5);\n        }\n        this.print('...', YAMLOffset);\n    },\n    printComment(comment, offset = 0) {\n        this.print(`# ${comment}`, offset);\n    },\n    printBailOut(message) {\n        this.print('Bail out! Unhandled error.');\n    },\n    printTestStart(message) {\n        const { data: { description }, offset } = message;\n        this.printComment(description, offset);\n    },\n    printTestEnd(message) {\n        // do nothing\n    },\n    printAssertion(message) {\n        const { data, offset } = message;\n        const { pass, description } = data;\n        const label = pass === true ? 'ok' : 'not ok';\n        if (isAssertionResult$1(data)) {\n            const id = this.nextId();\n            this.print(`${label} ${id} - ${description}`, offset);\n            if (pass === false) {\n                this.printYAML(flatDiagnostic(data), offset);\n            }\n        }\n        else if (data.skip) {\n            const id = this.nextId();\n            this.print(`${pass ? 'ok' : 'not ok'} ${id} - ${description} # SKIP`, offset);\n        }\n    },\n    printSummary(endMessage) {\n        this.print('', 0);\n        this.printComment(endMessage.data.pass ? 'ok' : 'not ok', 0);\n        this.printComment(`success: ${endMessage.data.successCount}`, 0);\n        this.printComment(`skipped: ${endMessage.data.skipCount}`, 0);\n        this.printComment(`failure: ${endMessage.data.failureCount}`, 0);\n    },\n    async report(stream) {\n        const src = flatten(stream);\n        let lastMessage = null;\n        this.print('TAP version 13');\n        for await (const message of src) {\n            lastMessage = message;\n            switch (message.type) {\n                case \"TEST_START\" /* TEST_START */:\n                    this.printTestStart(message);\n                    break;\n                case \"ASSERTION\" /* ASSERTION */:\n                    this.printAssertion(message);\n                    break;\n                case \"BAIL_OUT\" /* BAIL_OUT */:\n                    this.printBailOut(message);\n                    throw message.data;\n            }\n        }\n        this.print(`1..${lastMessage.data.count}`, 0);\n        this.printSummary(lastMessage);\n    }\n};\nconst factory = (log) => {\n    let i = 0;\n    return Object.create(Tap, {\n        nextId: {\n            enumerable: true,\n            value: () => {\n                return ++i;\n            }\n        },\n        log: { value: log }\n    });\n};\n\nconst indentedDiagnostic = ({ expected, pass, description, actual, operator, at = 'N/A', ...rest }) => ({\n    wanted: expected,\n    found: actual,\n    at,\n    operator,\n    ...rest\n});\nconst id = function* () {\n    let i = 0;\n    while (true) {\n        yield ++i;\n    }\n};\nconst idGen = () => {\n    let stack = [id()];\n    return {\n        [Symbol.iterator]() {\n            return this;\n        },\n        next() {\n            return stack[0].next();\n        },\n        fork() {\n            stack.unshift(id());\n        },\n        merge() {\n            stack.shift();\n        }\n    };\n};\nconst IndentedTap = Object.assign({}, Tap, {\n    printTestStart(message) {\n        const { data: { description }, offset } = message;\n        this.printComment(`Subtest: ${description}`, offset);\n    },\n    printAssertion(message) {\n        const { data, offset } = message;\n        const { pass, description } = data;\n        const label = pass === true ? 'ok' : 'not ok';\n        const id = this.nextId();\n        if (isAssertionResult$1(data)) {\n            this.print(`${label} ${id} - ${description}`, offset);\n            if (pass === false) {\n                this.printYAML(indentedDiagnostic(data), offset);\n            }\n        }\n        else {\n            const comment = data.skip === true ? 'SKIP' : `${data.executionTime}ms`;\n            this.print(`${pass ? 'ok' : 'not ok'} ${id} - ${description} # ${comment}`, message.offset);\n        }\n    },\n    printTestEnd(message) {\n        const length = message.data.length;\n        const { offset } = message;\n        this.print(`1..${length}`, offset);\n    }\n});\nconst factory$1 = (log) => {\n    const id = idGen();\n    return Object.create(IndentedTap, {\n        nextId: {\n            enumerable: true,\n            value: () => {\n                return id.next().value;\n            }\n        },\n        report: {\n            enumerable: true,\n            value: async function (stream) {\n                this.print('TAP version 13');\n                let lastMessage = null;\n                for await (const message of stream) {\n                    lastMessage = message;\n                    switch (message.type) {\n                        case \"TEST_START\" /* TEST_START */:\n                            id.fork();\n                            this.printTestStart(message);\n                            break;\n                        case \"ASSERTION\" /* ASSERTION */:\n                            this.printAssertion(message);\n                            break;\n                        case \"TEST_END\" /* TEST_END */:\n                            id.merge();\n                            this.printTestEnd(message);\n                            break;\n                        case \"BAIL_OUT\" /* BAIL_OUT */:\n                            this.printBailOut(message);\n                            throw message.data;\n                    }\n                }\n                this.printSummary(lastMessage);\n            }\n        },\n        log: { value: log }\n    });\n};\n\nconst report = (factory) => (logger = console) => {\n    const log = logger.log.bind(logger);\n    return async (stream) => factory(log).report(stream);\n};\nconst tapReporter = report(factory);\nconst indentedTapReporter = report(factory$1);\n\n//@ts-ignore\nconst mochaTapLike = indentedTapReporter();\n//@ts-ignore\nconst tapeTapLike = tapReporter();\n\nconst harnessFactory = ({ runOnly = false, indent = false } = {\n    runOnly: false,\n    indent: false\n}) => {\n    const tests = [];\n    const rootOffset = 0;\n    const collect = item => tests.push(item);\n    const api = assert(collect, rootOffset, runOnly);\n    let error = null;\n    const factory = testerLikeProvider(Object.assign(api, TesterPrototype, {\n        report: async function (reporter) {\n            const rep = reporter || (indent ? mochaTapLike : tapeTapLike);\n            return rep(this);\n        }\n    }));\n    return Object.defineProperties(factory(tests, Promise.resolve(), rootOffset), {\n        error: {\n            get() {\n                return error;\n            },\n            set(val) {\n                error = val;\n            }\n        }\n    });\n};\n\nconst findConfigurationFlag = (name) => {\n    if (typeof process !== 'undefined') {\n        return process.env[name] === 'true';\n        // @ts-ignore\n    }\n    else if (typeof Deno !== 'undefined') {\n        // @ts-ignore\n        return Deno.env.get(name) === 'true';\n        // @ts-ignore\n    }\n    else if (typeof window !== 'undefined') {\n        // @ts-ignore\n        return Boolean(window[name]);\n    }\n    return false;\n};\nconst defaultTestHarness = harnessFactory({\n    runOnly: findConfigurationFlag('RUN_ONLY')\n});\nlet autoStart = true;\nlet indent = findConfigurationFlag('INDENT');\nconst rootTest = defaultTestHarness.test.bind(defaultTestHarness);\nrootTest.indent = () => {\n    console.warn('indent function is deprecated, use \"INDENT\" configuration flag instead');\n    indent = true;\n};\nconst test = rootTest;\nconst skip = defaultTestHarness.skip.bind(defaultTestHarness);\nconst only = defaultTestHarness.only.bind(defaultTestHarness);\nrootTest.skip = skip;\nconst equal = defaultTestHarness.equal.bind(defaultTestHarness);\nconst equals = equal;\nconst eq = equal;\nconst deepEqual = equal;\nconst notEqual = defaultTestHarness.notEqual.bind(defaultTestHarness);\nconst notEquals = notEqual;\nconst notEq = notEqual;\nconst notDeepEqual = notEqual;\nconst is = defaultTestHarness.is.bind(defaultTestHarness);\nconst same = is;\nconst isNot = defaultTestHarness.isNot.bind(defaultTestHarness);\nconst notSame = isNot;\nconst ok = defaultTestHarness.ok.bind(defaultTestHarness);\nconst truthy = ok;\nconst notOk = defaultTestHarness.notOk.bind(defaultTestHarness);\nconst falsy = notOk;\nconst fail = defaultTestHarness.fail.bind(defaultTestHarness);\nconst throws = defaultTestHarness.throws.bind(defaultTestHarness);\nconst doesNotThrow = defaultTestHarness.doesNotThrow.bind(defaultTestHarness);\nconst createHarness = (opts = {}) => {\n    autoStart = false;\n    return harnessFactory(opts);\n};\nconst start = () => {\n    if (autoStart) {\n        defaultTestHarness.report(indent ? mochaTapLike : tapeTapLike);\n    }\n};\n// on next tick start reporting\n// @ts-ignore\nif (typeof window === 'undefined') {\n    setTimeout(start, 0);\n}\nelse {\n    // @ts-ignore\n    window.addEventListener('load', start);\n}\n\nexports.AssertPrototype = AssertPrototype;\nexports.createHarness = createHarness;\nexports.deepEqual = deepEqual;\nexports.doesNotThrow = doesNotThrow;\nexports.eq = eq;\nexports.equal = equal;\nexports.equals = equals;\nexports.fail = fail;\nexports.falsy = falsy;\nexports.is = is;\nexports.isNot = isNot;\nexports.mochaTapLike = mochaTapLike;\nexports.notDeepEqual = notDeepEqual;\nexports.notEq = notEq;\nexports.notEqual = notEqual;\nexports.notEquals = notEquals;\nexports.notOk = notOk;\nexports.notSame = notSame;\nexports.ok = ok;\nexports.only = only;\nexports.same = same;\nexports.skip = skip;\nexports.tapeTapLike = tapeTapLike;\nexports.test = test;\nexports.throws = throws;\nexports.truthy = truthy;\n", "import * as zora from 'zora'\r\nexport { Assert } from 'zora'\r\n\r\nlet harness = zora.createHarness()\r\nif (typeof window === 'undefined')\r\n    setTimeout(runTests, 0)\r\n\r\nexport function getHarness(): zora.TestHarness{\r\n    return harness\r\n}\r\n\r\nasync function runTests() {\r\n    try {\r\n        await harness.report(zora.mochaTapLike)\r\n    }\r\n    catch(e) {\r\n        harness.pass = false\r\n        if (e instanceof Error) {\r\n            console.error(e.name + \" exception thrown: \" + e.message)\r\n            console.error(e.stack)\r\n        }\r\n    }\r\n    if (harness.pass)\r\n        console.log('Tests PASSED')\r\n    else\r\n        console.log('Tests FAILED')\r\n    process.exit(harness.pass ? 0 : 1)\r\n}\r\n\r\nexport function test(description: string, spec: zora.SpecFunction, \r\n    options?: object): Promise<zora.TestResult> {\r\n    return harness.test(description, spec, options)\r\n}", "import * as tr from './test-reporter'\r\nimport * as tester from './tester'\r\n\r\nexport class TestRunner extends HTMLElement {\r\n    private body: HTMLElement\r\n    private connected: boolean\r\n    private styles = /*css*/`\r\n        .test-runner {\r\n            font-family: var(--sans-font);\r\n            font-size: 1rem;\r\n        }    \r\n        .test-visualizer {\r\n            overflow: auto;\r\n        }\r\n        .test-runner .summary {\r\n            font-weight: bolder;\r\n        }\r\n        .test-runner .summary .count {\r\n            margin-left: 1rem;\r\n        }\r\n        .test-runner pre {\r\n            background-color: #fff0f0;\r\n        }`\r\n\r\n    constructor() {\r\n        super();\r\n        let shadow = this.attachShadow({ mode: 'open' })\r\n        let sheet = new CSSStyleSheet()\r\n        sheet.replaceSync(this.styles)\r\n        shadow.adoptedStyleSheets = [ sheet ]\r\n        this.body = this.elem('div', \"test-runner\")\r\n        shadow.appendChild(this.body)\r\n        this.connected = false\r\n    }\r\n\r\n    connectedCallback() {\r\n        if (this.connected)\r\n            return\r\n        this.connected = true\r\n        let name = this.getAttribute(\"name\")\r\n        this.runTests(name)\r\n    }\r\n    \r\n    runTests(name: string) {\r\n        tester.getHarness().report(tr.createReporter(name, status => {\r\n            while (this.body.firstChild)\r\n                this.body.firstChild.remove()\r\n            this.body.appendChild(this.testStatus(status))\r\n        }))\r\n    }\r\n    \r\n    elem<K extends keyof HTMLElementTagNameMap>(tagName: K, cls?: string,\r\n        text?: string): HTMLElement {\r\n        let res = document.createElement(tagName)\r\n        if (cls)\r\n            res.classList.add(cls)\r\n        if (text)\r\n            res.innerText = text\r\n        return res\r\n    }\r\n    \r\n    statusIcon(assertion: tr.Assertion): string {\r\n        return assertion.pass ? \"\u2705\" : \"\u274C\"\r\n    }\r\n\r\n    testStyle(test: tr.Test) {\r\n        return test.pass ? '#f8fff8' : '#fff8f8'\r\n    }\r\n\r\n    testStatus(rootTest: tr.Test): HTMLElement {\r\n        let vis = this.elem(\"div\",\"test-visualizer\")\r\n        vis.style.backgroundColor = this.testStyle(rootTest)\r\n        let sum = this.elem(\"div\", \"summary\", `${this.statusIcon(rootTest)} ${\r\n            rootTest.name}`)\r\n        sum.appendChild(this.elem(\"span\", \"count\", `Pass: ${rootTest.passes}`))\r\n        sum.appendChild(this.elem(\"span\", \"count\", `Fail: ${rootTest.fails}`))\r\n        vis.appendChild(sum)\r\n        vis.appendChild(this.testList(rootTest.tests))\r\n        return vis\r\n    }\r\n\r\n    testList(tests: tr.Test[]): HTMLElement {\r\n        let lst = this.elem(\"ol\", \"test-list\")\r\n        for (let i = 0; i < tests.length; i++)\r\n            lst.appendChild(this.test(tests[i]))\r\n        return lst\r\n    }\r\n\r\n    assertion(assertion: tr.Assertion): HTMLElement {\r\n        return this.elem(\"li\", undefined, `${this.statusIcon(assertion)} ${\r\n            assertion.name}`)\r\n    }\r\n\r\n    assertions(assertions: tr.Assertion[]): HTMLElement {\r\n        let det = this.elem(\"details\")\r\n        det.appendChild(\r\n            this.elem(\"summary\", undefined, `${assertions.length} assertions`))\r\n        let ol = this.elem(\"ol\")\r\n        for (let i = 0; i < assertions.length; i++) \r\n            ol.appendChild(this.assertion(assertions[i]))\r\n        det.appendChild(ol)\r\n        return det\r\n    }\r\n\r\n    test(test: tr.Test): HTMLElement {\r\n        if (test.error)\r\n            return this.bailedOutTest(test)\r\n        let li = this.elem(\"li\", undefined, \r\n            `${this.statusIcon(test)} ${test.name} in ${test.duration}ms`)\r\n        if (test.assertions)\r\n            li.appendChild(this.assertions(test.assertions))\r\n        if (test.tests)\r\n            li.appendChild(this.testList(test.tests))\r\n        return li\r\n    }\r\n\r\n    bailedOutTest(test: tr.Test): HTMLElement {\r\n        let res = this.elem(\"li\")\r\n        res.innerHTML =\r\n            `${this.statusIcon(test)} ${test.name} threw <b>${\r\n                test.error.name}</b> exception:\r\n            <br/><b>${test.error.message}</b>\r\n            <pre>${test.error.stack}</pre>`\r\n        return res\r\n    }\r\n}\r\n\r\ncustomElements.define('test-runner', TestRunner)", "import { StyledElement } from 'litscript/lib/src/custom-elem'\r\nimport 'lits-extras/lib/test-runner'\r\nimport * as pz from '..'\r\nimport * as jp from '../test/jsonparser'\r\nimport '../test/jsontests'\r\nimport './run-json-tests.css'\r\n\r\nexport class JsonParser extends StyledElement {\r\n    private textarea: HTMLTextAreaElement\r\n    private result: HTMLDivElement\r\n\r\n    constructor() {\r\n        super(\"run-json-tests\")\r\n        this.body.classList.add(\"json-editor\")\r\n        this.textarea = document.createElement('textarea')\r\n        this.textarea.cols = 40\r\n        this.textarea.rows = 10\r\n        this.result = document.createElement('div')\r\n        this.result.classList.add(\"result\")\r\n        this.body.append(this.textarea, this.result)\r\n    }\r\n    \r\n    protected override connect() {\r\n        this.textarea.addEventListener(\"input\",  _ => {\r\n            try {\r\n                this.result.innerText = JSON.stringify(jp.parseJson(\r\n                    this.textarea.value), undefined, 2)\r\n            }\r\n            catch(e) {\r\n                if (e instanceof pz.ParseError)\r\n                    this.result.innerText = e.message\r\n                else\r\n                    throw e\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\ncustomElements.define(\"json-parser\", JsonParser)", "/**\r\n * # Reference Cells\r\n * \r\n * `Ref<T>` class provides a simple reference cell, which can be used\r\n * as a surrogate for a parser that is defined later on. We can define \r\n * a _reference_ to parser, but we don't have to give the target right\r\n * away. When composing parsers we can use the `forwardRef` function\r\n * to pass a reference to any combinator expecting a `Parser<T, S>`.\r\n * Of course, we have to eventually assign a real parser as the target\r\n * of the reference before running the parser.     \r\n */\r\nexport class Ref<T> {\r\n    private _target: T | null = null\r\n    /**\r\n     * Constructing a reference. The target value is optional.\r\n     */\r\n    constructor(value?: T) {\r\n        if (value)\r\n            this._target = value\r\n    }\r\n    /**\r\n     * Get the target of the reference. If no target is set, a \r\n     * `ReferenceError` is thrown.\r\n     */\r\n    get target(): T {\r\n        if (this._target)\r\n            return this._target\r\n        throw ReferenceError(\"Target not set.\")\r\n    }\r\n    /**\r\n     * Set the target.\r\n     */\r\n    set target(value: T) {\r\n        this._target = value\r\n    }\r\n}", "/**\r\n * # Error Reporting\r\n *\r\n * We define a custom Error class for parsing errors.\r\n * \r\n * The possible sources of errors are defined in the enumeration below.\r\n */\r\nexport enum ErrorSource {\r\n    Input = \"Input\",\r\n    Lexer = \"Lexer\",\r\n    Parser = \"Parsing\"\r\n}\r\n/**\r\n * The ParseError class contains information about the parsing error in\r\n * an easily accessible form.\r\n */\r\nexport class ParseError extends Error {\r\n    constructor(\r\n        /**\r\n         * The source of the error.\r\n         */\r\n        readonly source: ErrorSource,\r\n        /**\r\n         * The position where the error happened.\r\n         */\r\n        readonly position: number,\r\n        /**\r\n         * Input found at `position`.\r\n         */\r\n        readonly found: string, \r\n        /**\r\n         * Input expected at `position`. There can be multiple terminals.\r\n         */\r\n        readonly expected: string[] = []) {\r\n        /**\r\n         * Constructor formats the error message using the parameters provided.\r\n         */\r\n        super(`${source} error at position ${position + 1}.\\n` +\r\n            `\\tFound: \"${found}\"\\n` +\r\n            `\\tExpected: ${expected.map(s => `\"${s}\"`).join(\", \")}`);\r\n    }\r\n}", "/**\r\n * # Parser Result\r\n * \r\n * The result of a parser function is a discriminated union that\r\n * represents either success or failure. In both cases need the \r\n * `position` field to indicate where in the input stream we are. \r\n * This is field is defined in the base interface.\r\n */\r\ninterface Position {\r\n    position: number\r\n}\r\n/**\r\n * When parsing succeeds we return the the `Ok<T>` object. It contains\r\n * the `result` returned by the parser. Type parameter `T` indicates \r\n * its type. \r\n */\r\ninterface Ok<T> extends Position {\r\n    kind: \"ok\"\r\n    result: T\r\n}\r\n/**\r\n * When parsing fails we return the `Fail` object. It does not have a \r\n * result, but information about the input `found` and input `expected`. \r\n */\r\ninterface Fail extends Position {\r\n    kind: \"fail\"\r\n    found: string\r\n    expected: string[]\r\n}\r\n/**\r\n * The actual result type is a discriminated union of the `Ok<T>` and \r\n * `Fail` objects.\r\n */\r\nexport type ParseResult<T> = Ok<T> | Fail\r\n\r\n/**\r\n * ## Helper Functions\r\n * \r\n * The `joinExpected` function concatenates the list of expected\r\n * inputs from the `other` failed parse result into the `expected` \r\n * array of the first one.  \r\n */\r\nexport function joinExpected(result: Fail, other: Fail) {\r\n    if (other.expected.length > 0)\r\n        result.expected = result.expected.concat(other.expected)\r\n}\r\n/**\r\n * This function formats the array of expected inputs as a string for\r\n * printing.\r\n */\r\nexport function expectedAsCsv(result: Fail): string {\r\n        return result.expected.map(s => `\"${s}\"`).join(\", \")\r\n}\r\n\r\n/**\r\n * ## Constructor Functions\r\n * \r\n * The following function is used to construct an `Ok<T>` result. \r\n */\r\nexport function succeeded<T>(pos: number, res: T): ParseResult<T> {\r\n    return {\r\n        kind: \"ok\",\r\n        position: pos, \r\n        result: res\r\n    }\r\n}\r\n/**\r\n * The next one constructs a `Fail` result.\r\n */\r\nexport function failed<T>(pos: number, fnd: string, exp: string[] = []): ParseResult<T> {\r\n    return {\r\n        kind: \"fail\",\r\n        position: pos, \r\n        found: fnd, \r\n        expected: exp\r\n    }\r\n}", "/**\r\n * # Utility Functions\r\n * \r\n * This module contains general functions used elsewhere in the library.\r\n * \r\n * The first function initializes an object from an array of `[string, any]`\r\n * pairs. It is used to populate an object dynamically.\r\n */\r\nexport function initObject(members: [string, any][]): any {\r\n    let res: any = {}\r\n    for (let i = 0; i < members.length; i++) {\r\n        let [m, v] = members[i];\r\n        res[m] = v\r\n    }\r\n    return res\r\n}\r\n/**\r\n * The `escapeWhitespace` function helps printing strings containing whitespace\r\n * characters. It replaces them with their escape codes.\r\n */\r\nexport function escapeWhitespace(text: string): string {\r\n    return text.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\\t\", \"\\\\t\");\r\n}", "/**\r\n * # Lexical Analyzer\r\n * \r\n * [Lexical analyzer][lexer], also known as lexer or scanner, is a program that \r\n * converts sequence of characters into a sequence of _tokens_. It simplifies \r\n * and speeds up parsing because the parser does not have to recognize low level \r\n * patterns such as whitespace, keywords, identifiers, or numbers. Instead, the \r\n * parser can focus on the high level grammar and structure of the input.\r\n * \r\n * A lexer is usually implemented using a [deterministic finite automaton][dfa],\r\n * and the DFA is typically represented by a regular expression. This is a \r\n * natural choice for us too, as Javascript natively supports them.\r\n * \r\n * [lexer]: https://en.wikipedia.org/wiki/Lexical_analysis\r\n * [dfa]: https://en.wikipedia.org/wiki/Deterministic_finite_automaton \r\n */\r\nimport * as inp from \"./input\"\r\nimport * as utils from \"./utils\"\r\nimport * as err from \"./error\"\r\n\r\n/**\r\n * ## Recognizing a Token\r\n * \r\n * The mapping from regular expressions to tokens is defined using the \r\n * `TokenMatcher<S>` interface. A token can be of any type `S`, although usually \r\n * an enumeration is used.\r\n */\r\ninterface TokenMatcher<S> {\r\n    regex: RegExp\r\n    token: S\r\n}\r\n/**\r\n * ## Representing a Token\r\n * \r\n * When a token is recognized it is wrapped in a `Token<S>` object. This \r\n * contains also the recognized string for error reporting and diagnostics.\r\n */\r\nexport class Token<S> {\r\n    constructor(readonly token: S, readonly text: string) { }\r\n    /**\r\n     * We override the `toString` function so we can output a token \r\n     * to screen.\r\n     */\r\n    toString() {\r\n        return this.text ? utils.escapeWhitespace(this.text) : this.token\r\n    }\r\n}\r\n/**\r\n * ## Lexer\r\n * \r\n * The lexer itself is a simple class that contains all the TokenMatchers and\r\n * recognizes the next token in a string.\r\n */\r\nexport class Lexer<S> {\r\n    private matchers: TokenMatcher<S>[]\r\n    /**\r\n     * The constructor adds two flags to the regular expressions given as \r\n     * arguments. The `y` flag makes the search sticky so that it scans the\r\n     * input string from the position indicated by the `lastIndex` property.\r\n     * The `u` flag makes the search support unicode characters.\r\n     */\r\n    constructor(...tokens: [RegExp, S][]) {\r\n        this.matchers = tokens.map(t => ({\r\n            regex: new RegExp(t[0], \"yu\"),\r\n            token: t[1]\r\n        }))\r\n    }\r\n    /**\r\n     * We check matchers one-by-one in the order they were given to\r\n     * recognize the token in the given position. If none of the matchers\r\n     * succeed, we return `null`.\r\n     */\r\n    matchToken(input: string, pos: number): Token<S> | null {\r\n        for (let i = 0; i < this.matchers.length; i++) {\r\n            let matcher = this.matchers[i]\r\n            matcher.regex.lastIndex = pos\r\n            let match = matcher.regex.exec(input)\r\n            if (match != null)\r\n                return new Token<S>(matcher.token, match[0])\r\n        }\r\n        return null\r\n    }\r\n}\r\n/**\r\n * ## Lexer as Input\r\n * \r\n * We can integrate lexing directly into the parsing process by implementing \r\n * the `ParserInput` interface for any token. We don't expose `LexerInput` \r\n * class outside the module. It can be created with the `lexerInput` function.\r\n */\r\nclass LexerInput<S> implements inp.ParserInput<Token<S>> {\r\n    /**\r\n     * We define the fields of the `ParserInput` interface.\r\n     */\r\n    position: number\r\n    current: Token<S>\r\n    state: any\r\n    /**\r\n     * We also need to store the input string and the lexer used. These we\r\n     * get as an argument.\r\n     */\r\n    private input: string\r\n    private lexer: Lexer<S>\r\n    /**\r\n     * To avoid recognizing the same token multiple times as the parser\r\n     * backtracks, we store all the tokens we have matched so far in \r\n     * an array.\r\n     */\r\n    private tokens: Token<S>[]\r\n    /**\r\n     * We store the result designating end of the input.\r\n     */\r\n    private eof: Token<S>\r\n    /**\r\n     * Create an input stream for given string and lexer. Initialize the\r\n     * instance variables.\r\n     */\r\n    constructor(input: string, lexer: Lexer<S>, eof: Token<S>) {\r\n        this.input = input\r\n        this.lexer = lexer\r\n        this.tokens = new Array<Token<S>>(input.length)\r\n        this.position = -1\r\n        this.eof = eof\r\n        this.current = this.eof\r\n    }\r\n    /**\r\n     * The iterator implementation is fairly straightforward. We need to make \r\n     * sure that the state variables `position` and `current` are kept in sync \r\n     * while we advance in the input string. We must also do a lookup in the \r\n     * cach\u00E9 before calling the lexer to recognize the token. If the lexer finds \r\n     * a match, we update the cach\u00E9. If the lexer cannot recognize the next \r\n     * token, we throw a `ParseError`.\r\n     */\r\n    next(): Token<S> {\r\n        let pos = this.position\r\n        pos += this.tokens[pos] ? this.tokens[pos].text.length : 1\r\n        if (pos >= this.input.length)\r\n            return this.eof\r\n        this.position = pos\r\n        let match = this.tokens[pos] || this.lexer.matchToken(this.input, pos)\r\n        if (!match)\r\n            throw new err.ParseError(err.ErrorSource.Lexer, pos,\r\n                this.input.substr(pos, 10) + \"...\", [\"<valid token>\"])\r\n        this.tokens[pos] = match\r\n        this.current = match\r\n        return match\r\n    }\r\n}\r\n/**\r\n * Create an input stream for given `text` string using the given `lexer`.\r\n */\r\nexport function lexerInput<S>(text: string, lexer: Lexer<S>, eof: Token<S>):\r\n    inp.ParserInput<Token<S>> {\r\n    return new LexerInput<S>(text, lexer, eof)\r\n}", "/**\r\n * # Parser Monad and Basic Combinators\r\n * \r\n * This module defines the basic types and combinators for the parser monad. \r\n * To learn about monadic parsers refer to the list of literature in the \r\n * [Wikipedia page](https://en.wikipedia.org/wiki/Parser_combinator).\r\n */\r\nimport * as inp from \"./input\"\r\nimport * as pr from \"./result\"\r\nimport * as lex from \"./lexer\"\r\nimport * as ref from \"./ref\"\r\nimport * as utils from \"./utils\"\r\nimport * as err from \"./error\"\r\n/**\r\n * \r\n * ## Parsing Function\r\n * \r\n * `Parse<T, S>` type represents a parsing function whics takes a \r\n * `ParserInput<S>` stream as an argument and returns a `ParseResult<T>` object. \r\n * The type of value to be parsed and the type of terminals in the input stream \r\n * are given as type parameters `T` and `S`.\r\n */\r\nexport type Parse<T, S> = (input: inp.ParserInput<S>) => pr.ParseResult<T>\r\n/**\r\n * ## Parser Class\r\n * \r\n * The central type in the Parzec library is the `Parser<T, S>` class. It wraps\r\n * a parsing function and provides the core combinators to combine parsers in \r\n * various ways.\r\n */\r\nexport class Parser<T, S> {\r\n    /**\r\n     * Constructor wraps the parsing function.\r\n     */\r\n    constructor(readonly parse: Parse<T, S>) { }\r\n    /**\r\n     * The monadic bind that corresponds to Haskell's `>>=` operator. Runs \r\n     * `this` parser, and if it succeeds, feeds its result to the `binder` \r\n     * function that returns a new Parser. This is the basic operation that is \r\n     * used in other combinators to glue parsers together.\r\n     */\r\n    bind<U>(binder: (value: T) => Parser<U, S>): Parser<U, S> {\r\n        return new Parser(input => {\r\n            let pos = input.position\r\n            let res1 = this.parse(input)\r\n            if (res1.kind == \"ok\") {\r\n                let res2 = binder(res1.result).parse(input)\r\n                if (res2.kind == \"fail\" && pos !== input.position)\r\n                    input.position = pos // backtrack\r\n                return res2\r\n            }\r\n            return res1\r\n        })\r\n    }\r\n    /**\r\n     * The sequence operator. Runs `this` parser, and if it succeeds, runs the \r\n     * `other` parser ignoring the result of `this` one.\r\n     */\r\n    seq<U>(other: Parser<U, S>): Parser<U, S> {\r\n        return this.bind(_ => other)\r\n    }\r\n    /**\r\n     * Map result of the parser to another value. This function implements a \r\n     * [_functor_](https://en.wikipedia.org/wiki/Functor) which is a superclass \r\n     * of monad.\r\n     */\r\n    map<U>(mapper: (value: T) => U): Parser<U, S> {\r\n        return this.bind(x => mret(mapper(x))) as Parser<U, S>\r\n    }\r\n    /**\r\n     * ## Conditional Parsing\r\n     * \r\n     * The ordered choice operation. Creates a parser that first runs `this` \r\n     * parser, and if that fails, runs the `other` one. Corresponds to the `/` \r\n     * operation in [PEG grammars](https://en.wikipedia.org/wiki/Parsing_expression_grammar).\r\n     */\r\n    or<U>(other: Parser<U, S>): Parser<T | U, S> {\r\n        return new Parser(input => {\r\n            let pos = input.position;\r\n            let res1 = this.parse(input) as pr.ParseResult<T | U>\r\n            if (res1.kind == \"ok\")\r\n                return res1\r\n            if (res1.position > pos)\r\n                return res1\r\n            let res2 = other.parse(input)\r\n            if (res2.kind == \"ok\")\r\n                return res2\r\n            pr.joinExpected(res2, res1)\r\n            return res2\r\n        })\r\n    }\r\n    /**\r\n     * Parse an optional value, if the parser fails then the default value is \r\n     * returned.\r\n     */\r\n    optional(defaultValue: T): Parser<T, S> {\r\n        return this.or(mret(defaultValue))\r\n    }\r\n    /**\r\n     * Parse an optional reference value, if the parser fails then null is \r\n     * returned.\r\n     */\r\n    optionalRef(): Parser<T | null, S> {\r\n        return this.or(mret(null))\r\n    }\r\n    /**\r\n     * Runs parser and checks that it succeeds and that the result it returns\r\n     * satisfies a given predicate.\r\n     */\r\n    where(predicate: (value: T) => boolean): Parser<T, S> {\r\n        return this.bind(x =>\r\n            predicate(x) ? mret(x) : fail(`${x}`, \"predicate\"))\r\n    }\r\n    /**\r\n     * ## Parsing Multiple Items\r\n     * \r\n     * Creates a parser that will run `this` parser zero or more times. The \r\n     * results of the input parser are added to an array.\r\n     */\r\n    zeroOrMore(): Parser<T[], S> {\r\n        return new Parser(input => {\r\n            let list: T[] = []\r\n            while (true) {\r\n                let pos = input.position\r\n                let res = this.parse(input)\r\n                if (res.kind == \"fail\")\r\n                    return res.position > pos ?\r\n                        res : pr.succeeded(res.position, list)\r\n                list.push(res.result)\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * Creates a parser that runs `this` parser one or more times.\r\n     */\r\n    oneOrMore(): Parser<T[], S> {\r\n        return new Parser(input => {\r\n            let res = this.parse(input)\r\n            if (res.kind == \"fail\")\r\n                return res\r\n            let list = [res.result]\r\n            while (true) {\r\n                let pos = input.position\r\n                res = this.parse(input)\r\n                if (res.kind == \"fail\")\r\n                    return res.position > pos ? \r\n                        res : pr.succeeded(res.position, list)\r\n                list.push(res.result)\r\n            }\r\n        })\r\n    }\r\n    /**\r\n     * Parsing succeeds if `this` parser succeeds from `min` to `max` times.\r\n     */\r\n    occurrences(min: number, max: number): Parser<T[], S> {\r\n        return this.zeroOrMore().bind(list => {\r\n            let cnt = list.length\r\n            return cnt >= min && cnt <= max ?\r\n                mret(list) :\r\n                fail(`${cnt} occurrences`, `${min}-${max} occurrences`)\r\n        })\r\n    }\r\n    /**\r\n     * ## Lookahead & Backtracking\r\n     * \r\n     * Check that `this` parser succeeds without consuming any input. \r\n     * Corresponds to the `&` operator in PEG grammars.\r\n     */\r\n    and(): Parser<T, S> {\r\n        return new Parser(input => {\r\n            let pos = input.position\r\n            let res = this.parse(input)\r\n            input.position = pos\r\n            return res\r\n        })\r\n    }\r\n    /**\r\n     * Check that `this` parser fails without consuming any input. Corresponds \r\n     * to the `!` operator in PEG grammars.\r\n     */\r\n    not(): Parser<T, S> {\r\n        return new Parser(input => {\r\n            let pos = input.position\r\n            let res = this.parse(input)\r\n            input.position = pos\r\n            if (res.kind == \"ok\") {\r\n                let found = `${res.result}`\r\n                return pr.failed(res.position, found, [\"not \" + found])\r\n            }\r\n            return pr.succeeded(res.position, <T><unknown>undefined)\r\n        })\r\n    }\r\n    /**\r\n     * Bactrack to the current input position, even if the given parser fails\r\n     * and has advanced the input position. Normally we do not bactrack when a\r\n     * parser has advanced in the input. Doing so would loose the position where\r\n     * the parsing failed and make error messages more vague. Sometimes, \r\n     * however, we need more input lookahead. In these cases, you can use the \r\n     * backtrack operation to retry the next rule.\r\n     */\r\n    backtrack(): Parser<T, S> {\r\n        return new Parser(input => {\r\n            let pos = input.position\r\n            let res = this.parse(input)\r\n            if (res.kind == \"fail\" && res.position > pos)\r\n                res.position = pos\r\n            return res\r\n        })\r\n    }\r\n    /**\r\n     * ## Error Reporting and Debugging\r\n     * \r\n     * Give a human-readable name to the \"thing\" that the given parser matches. \r\n     * This name is reported as expected value, if the parsing fails.\r\n     */\r\n    expect(expected: string): Parser<T, S> {\r\n        if (!parserDebug.errorMessages)\r\n            return this\r\n        let resParser = new Parser((input: inp.ParserInput<S>) => {\r\n            let res = this.parse(input)\r\n            if (res.kind == \"fail\")\r\n                res.expected.push(expected)\r\n            return res\r\n        })\r\n        return parserDebug.debugging ? resParser.trace(expected) : resParser\r\n    }\r\n    /**\r\n     * Attach debugging information to a parser. To trace which rules are \r\n     * triggered during parsing, you can add debugging info to any parser. This \r\n     * combinator produces a hierarchical tree of parser invocations which \r\n     * includes information about input symbol and its position. If debugging \r\n     * is disabled, this function does nothing.\r\n     */\r\n    trace(ruleName: string): Parser<T, S> {\r\n        if (!parserDebug.debugging)\r\n            return this;\r\n        return new Parser(input => {\r\n            parserDebug.write(`${ruleName} called with input '${input.current}'.`)\r\n            parserDebug.indent()\r\n            let res = this.parse(input)\r\n            parserDebug.rulesEvaluated++\r\n            parserDebug.unindent()\r\n            parserDebug.write((res.kind == \"ok\" ?\r\n                `${ruleName} SUCCEEDED with value '${\r\n                    utils.escapeWhitespace(`${res.result}`)}'` :\r\n                `${ruleName} FAILED with value '${\r\n                    utils.escapeWhitespace(`${res.found}`)\r\n                    }'. Expected values: ${pr.expectedAsCsv(res)}`) +\r\n                ` at position ${res.position}`)\r\n            return res\r\n        })\r\n    }\r\n}\r\n/**\r\n * ## Debugging Options\r\n * \r\n * The following object contains the global settings that control the parser \r\n * reporting. \r\n */\r\nexport const parserDebug = {\r\n    /** \r\n     * When `debugging` flag is on parsers count the number of rules evaluated \r\n     * during their operation. The `rulesEvaluated` field contains this \r\n     * information. \r\n     */\r\n    debugging: false,\r\n    rulesEvaluated: 0,\r\n    /**\r\n     * If errorMessages flag is turned off, the expected information will not be \r\n     * available in parse errors. This speeds up the parsing nominally.\r\n     */\r\n    errorMessages: true,\r\n    /**\r\n     * The current indentation level in the debugging output is stored in this \r\n     * field.\r\n     */\r\n    indentation: 0,\r\n    /**\r\n     * Indent the debug output by one level.\r\n     */\r\n    indent() {\r\n        this.indentation++\r\n    },\r\n    /**\r\n     * Unndent the debug output by one level.\r\n     */\r\n    unindent() {\r\n        this.indentation--\r\n    },\r\n    /**\r\n     * Write a string to the debug output.\r\n     */\r\n    write(text: string) {\r\n        let tabs = \"  \".repeat(this.indentation)\r\n        console.log(tabs + text)\r\n    }\r\n}\r\n\r\n/**\r\n * ## Main Functions\r\n * \r\n * Attempt to parse an input with a given parser. Takes a Parser and a \r\n * ParserInput as arguments and return a ParseResult.\r\n */\r\nexport function tryParse<T, S>(parser: Parser<T, S>, input: inp.ParserInput<S>):\r\n    pr.ParseResult<T> {\r\n    parserDebug.rulesEvaluated = 0\r\n    let res = parser.parse(input)\r\n    if (parserDebug.debugging)\r\n        console.info(\"Number of rules evaluated: \" + parserDebug.rulesEvaluated)\r\n    return res\r\n}\r\n/**\r\n * Parse an input using a given parser, or throw an exception, if parsing fails.\r\n */\r\nexport function parse<T, S>(parser: Parser<T, S>, input: inp.ParserInput<S>): T {\r\n    var res = tryParse(parser, input)\r\n    if (res.kind == \"fail\")\r\n        throw new err.ParseError(err.ErrorSource.Parser, res.position, \r\n            res.found, res.expected)\r\n    return res.result\r\n}\r\n/**\r\n * ## Monadic Returns\r\n * \r\n * Create a parser that always succeeds and returns the given value without \r\n * consuming any input. This function implements the monadic return, that is, \r\n * it lifts a value to the parser monad.\r\n */\r\nexport function mret<T, S>(value: T): Parser<T, S> {\r\n    return new Parser(input => pr.succeeded(input.position, value))\r\n}\r\n/**\r\n * Create a parser that always fails. The terminals reported as\r\n * found or expected are given as an argument.\r\n */\r\nexport function fail<T, S>(found: string, ...expected: string[]): Parser<T, S> {\r\n    return new Parser(input => pr.failed(input.position, found, expected))\r\n}\r\n/**\r\n * ## Parsing Terminals\r\n * \r\n * Creates a parser that reads one terminal from the input and returns it, if it \r\n * satisfies the given predicate; otherwise the parser fails.\r\n */\r\nexport function satisfy<T>(predicate: (value: T) => boolean): Parser<T, T> {\r\n    return new Parser(input => {\r\n        let pos = input.position\r\n        let item = input.next()\r\n        if (predicate(item))\r\n            return pr.succeeded(input.position, item)\r\n        input.position = pos\r\n        return pr.failed<T>(input.position, `${item}`)\r\n    })\r\n}\r\n/**\r\n * Creates a parser that reads one terminal from the input and returns it, if it\r\n * does **not** satisfy a given predicate.\r\n */\r\nexport function notSatisfy<T>(predicate: (value: T) => boolean): Parser<T, T> {\r\n    return satisfy(x => !predicate(x))\r\n}\r\n/**\r\n * Any of the given parsers must succeed. The operation is the same \r\n * as the `or` combinator generalized to arbitrary number of choices.\r\n */\r\nexport function any<T, S>(...parsers: Parser<T, S>[]): Parser<T, S> {\r\n    if (parsers.length == 0)\r\n        throw Error(\"At least one parser must be given.\")\r\n    return new Parser(input => {\r\n        let res: pr.ParseResult<T> | null = null\r\n        let i = 0\r\n        let pos = input.position\r\n        do {\r\n            let r = parsers[i++].parse(input)\r\n            if (r.kind == \"ok\")\r\n                return r\r\n            if (r.position > pos)\r\n                return r\r\n            if (res == null)\r\n                res = r\r\n            else\r\n                pr.joinExpected(res, r)\r\n        }\r\n        while (i < parsers.length)\r\n        return res\r\n    })\r\n}\r\n/** \r\n * Peek next symbol in the input stream without changing the position.\r\n */\r\nexport function peek<S>(): Parser<S, S> {\r\n    return new Parser(input => {\r\n        let pos = input.position\r\n        let next = input.next()\r\n        input.position = pos\r\n        return pr.succeeded(pos, next)\r\n    })\r\n}\r\n/**\r\n * Select a parser to be used based on the next symbol in the input. This \r\n * function is an alternative to the the \"any\" combinator. It reduces \r\n * backtracking when the parser to be applied can be deduced from the next \r\n * symbol.\r\n */\r\nexport function choose<T, S>(selector: (input: S) => Parser<T, S>):\r\n    Parser<T, S> {\r\n    return peek<S>().bind(selector)\r\n}\r\n/**\r\n * ## Getting Current Position\r\n * \r\n * A parser that returns the current position of the input. This is useful\r\n * when binding parsers together and you want to know the position where you\r\n * currently are. The position can be also used for backtracking.\r\n */\r\nexport function position<S>(): Parser<number, S> {\r\n    return new Parser(input => pr.succeeded(input.position, input.position))\r\n}\r\n/**\r\n * ## User-Managed State\r\n * \r\n * Get the current satellite state stored in the input.\r\n */\r\nexport function getState<T, S>(): Parser<T, S> {\r\n    return new Parser(input => pr.succeeded(input.position, <T>input.state))\r\n}\r\n/**\r\n * Set the current satellite state stored in the input. The new state\r\n * is not given explicitly. Rather, a funcion which returns the new\r\n * state is specified.\r\n */\r\nexport function setState<T, S>(newValue: () => T): Parser<T, S> {\r\n    return new Parser(input =>\r\n        pr.succeeded(input.position, input.state = newValue()))\r\n}\r\n/**\r\n * Mutate the satellite state stored in the input. The mutation is done\r\n * with a function given as an argument. \r\n */\r\nexport function mutateState<T, S>(mutate: (state: T) => void): Parser<T, S> {\r\n    return new Parser(input => {\r\n        mutate(input.state)\r\n        return pr.succeeded(input.position, input.state)\r\n    })\r\n}\r\n/**\r\n * Check that the current state matches a predicate. If not, the result parser \r\n * fails.\r\n */\r\nexport function checkState<T, S>(predicate: (state: T) => boolean): \r\n    Parser<T, S> {\r\n    return new Parser(input => predicate(input.state) ?\r\n        pr.succeeded(input.position, input.state) :\r\n        pr.failed(input.position, \"Matching predicate.\"))\r\n}\r\n/**\r\n * Clean up the current state after a parser has been executed. The clean-up \r\n * function is run regardless of whether the parser succeeds or fails.\r\n */\r\nexport function cleanupState<T, U, S>(parser: Parser<T, S>,\r\n    cleanup: (state: U) => void): Parser<T, S> {\r\n    return new Parser(input => {\r\n        let res = parser.parse(input)\r\n        cleanup(input.state)\r\n        return res\r\n    })\r\n}\r\n/**\r\n * ## Defining Mutually Recursive Parsers\r\n * \r\n * Often grammar rules are mutually recursive, which means that there is no way \r\n * to write them in an order where all the dependent rules are defined. In these \r\n * occasions, you can just create a _reference_ to a parser and set its \r\n * implementation later. To refer to the parser that is not yet defined, you can \r\n * use this function. \r\n */\r\nexport function forwardRef<T, S>(parser: ref.Ref<Parser<T, S>>): Parser<T, S> {\r\n    return new Parser(input => parser.target.parse(input))\r\n}\r\n/**\r\n * ## General Parsers\r\n * \r\n * The catch-all parser that will match any symbol read from the input.\r\n */\r\nexport function anything<T>(): Parser<T, T> {\r\n    return satisfy<T>(_ => true)\r\n}\r\n/**\r\n * Parser that succeeds if the symbol read from the input is equal (===) to\r\n * given parameter; otherwise parsing fails.\r\n */\r\nexport function is<T>(value: T): Parser<T, T> {\r\n    return satisfy<T>(x => x === value)\r\n}\r\n/**\r\n * Parse a specific token from the lexer input stream.\r\n */\r\nexport function token<T>(token: T): Parser<lex.Token<T>, lex.Token<T>> {\r\n    return satisfy<lex.Token<T>>(t => t.token === token)\r\n}\r\n/**\r\n * Helper function to create a terminal parser.\r\n */\r\nexport function terminal<T>(tok: T, name: string) {\r\n    return token(tok).expect(name)\r\n}", "/**\r\n * # Combinators for Parsing Arrays and Expressions\r\n * \r\n * This module contains additional combinators that are useful when parsing \r\n * sequences or expressions. They are adapted from the original \r\n * [Parsec](http://hackage.haskell.org/package/parsec-3.1.13.0/docs/Text-Parsec-Combinator.html)\r\n * library.\r\n */\r\nimport * as par from \"./parser\"\r\n/**\r\n * We use a trick described \r\n * [here](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation)\r\n * to add the functions we define to the `Parser<T, S>` class.\r\n */\r\ndeclare module './parser' {\r\n    export interface Parser<T, S> {\r\n        oneOrMoreSeparatedBy<U>(separator: Parser<U, S>): Parser<T[], S>\r\n        zeroOrMoreSeparatedBy<U>(separator: Parser<U, S>): Parser<T[], S>\r\n        followedBy<U>(after: Parser<U, S>): Parser<T, S>\r\n        surroundedBy<U>(surround: Parser<U, S>): Parser<T, S>\r\n        bracketedBy<U, V>(open: Parser<U, S>, close: Parser<V, S>): Parser<T, S>\r\n        chainOneOrMore(operation: Parser<BinaryOp<T>, S>): Parser<T, S>\r\n        chainZeroOrMore(operation: Parser<BinaryOp<T>, S>, value: T):\r\n            Parser<T, S>\r\n    }\r\n}\r\n/**\r\n * Type definition for a binary function that has the same domain and range \r\n * type.\r\n */\r\nexport type BinaryOp<T> = (x: T, y: T) => T\r\n/**\r\n * ## Parsing Separated Lists\r\n * \r\n * Parse an array containing at least one element. The items of the array are \r\n * recognized by `parser`. The items are separated by input recognized by \r\n * `separator`. The function returns an array of parsed elements.\r\n */\r\npar.Parser.prototype.oneOrMoreSeparatedBy = function<T, U, S>(\r\n    this: par.Parser<T, S>, separator: par.Parser<U, S>): par.Parser<T[], S> {\r\n    return this.bind(\r\n        x => separator.seq(this).zeroOrMore().bind(\r\n        xs => par.mret([x].concat(xs))))\r\n}\r\n/**\r\n * Parse a potentially empty array. The items of the array are recognized by \r\n * `parser`. The items are separated by input recognized by `separator`.\r\n */\r\npar.Parser.prototype.zeroOrMoreSeparatedBy = function<T, U, S>(\r\n    this: par.Parser<T, S>, separator: par.Parser<U, S>): par.Parser<T[], S> {\r\n    return this.oneOrMoreSeparatedBy(separator).or(par.mret([]))\r\n}\r\n/**\r\n * ## Terminators & Brackets\r\n * \r\n * Parse item(s) followed by a terminator given in the `after` parser. The \r\n * result of `parser` is returned, and result of `after` is ignored.\r\n */\r\npar.Parser.prototype.followedBy = function<T, U, S>(this: par.Parser<T, S>,\r\n    after: par.Parser<U, S>): par.Parser<T, S> {\r\n    return this.bind(p => after.bind(_ => par.mret(p)))\r\n}\r\n/**\r\n * Parse item(s) surrounded by input recognized by the `surround` parser. The \r\n * result of `parser` is returned.\r\n */\r\npar.Parser.prototype.surroundedBy = function<T, U, S>(this: par.Parser<T, S>,\r\n    surround: par.Parser<U, S>): par.Parser<T, S> {\r\n    return surround.bind(\r\n        o => this.bind(\r\n        p => surround.bind(\r\n        c => par.mret(p))))\r\n}\r\n/**\r\n * Parse item(s) surrounded by an open and closing bracket. The result `parser` \r\n * is returned.\r\n */\r\npar.Parser.prototype.bracketedBy = function<T, U, V, S>(this: par.Parser<T, S>,\r\n    open: par.Parser<U, S>, close: par.Parser<V, S>): par.Parser<T, S> {\r\n    return open.bind(\r\n        o => this.bind(\r\n        p => close.bind(\r\n        c => par.mret(p))))\r\n}\r\n/**\r\n * ## Parsing Expressions\r\n * \r\n * Parse one or more occurrences of `parser`, separated by `operation`. \r\n * Return a value obtained by a left associative application of all functions \r\n * returned by `operation` to the values returned by `parser`. This parser can \r\n * for example be used to eliminate left recursion which typically occurs in \r\n * expression grammars.\r\n */\r\npar.Parser.prototype.chainOneOrMore = function<T, S>(this: par.Parser<T, S>,\r\n    operation: par.Parser<BinaryOp<T>, S>): par.Parser<T, S> {\r\n    return this.bind(\r\n        x => operation.bind(\r\n            f => this.bind(\r\n            y => par.mret([f, y] as [BinaryOp<T>, T]))).zeroOrMore().bind(\r\n        fys => par.mret(fys.reduce((z, [f, y]) => f(z, y), x))))\r\n}\r\n/**\r\n * Parse zero or more occurrences of `parser`, separated by `operation`. \r\n * Return a value obtained by a left associative application of all functions \r\n * returned by `operation` to the values returned by `parser`. If there are \r\n * zero occurrences of `parser`, the `value` is returned.\r\n */\r\npar.Parser.prototype.chainZeroOrMore = function<T, S>(this: par.Parser<T, S>,\r\n    operation: par.Parser<BinaryOp<T>, S>, value: T): par.Parser<T, S> {\r\n    return this.chainOneOrMore(operation).or(par.mret(value))\r\n}\r\n/**\r\n * Construct a parser for operator selection. Used typically in conjunction\r\n * with `chain*` functions.\r\n */\r\nexport function operators<T, U, S>(...ops: [par.Parser<T, S>, U][]): \r\n    par.Parser<U, S> {\r\n    return par.any(...ops.map(([p, o]) => p.map(_ => o)))\r\n}", "/**\r\n * # Parsing JSON\r\n * \r\n * The next example parser converts JSON strings to JavaScript objects. It\r\n * effectively does the same thing as the `JSON.parse` function. So, it serves \r\n * no practical purpose, but is a nice example due to simplicity of the JSON \r\n * grammar. To make our implementation marginally more useful, let's allow to\r\n * include comments inside JSON.\r\n */\r\nimport * as pz from \"..\";\r\n/**\r\n * ## Tokens\r\n * \r\n * First we define all the tokens that JSON files may contain. These are all\r\n * specified in [json.org][].\r\n * \r\n * [json.org]: https://www.json.org\r\n */\r\nexport enum JsonToken {\r\n    True, False, Null, LeftBrace, RightBrace, LeftBracket, RightBracket, Comma,\r\n    Colon, Number, String, Whitespace, Comment, EOF\r\n}\r\n//#region -c Debug settings\r\npz.parserDebug.debugging = false\r\n//#endregion\r\n/**\r\n * ## Lexer\r\n * \r\n * ![number](../../images/number.png)\r\n * We define lexers for all the tokens. First we handle constants and separator\r\n * characters. They are trivial to recognize.\r\n * \r\n * Numbers are a bit trickier as we need to support decimal formats with\r\n * and without exponents. \r\n * \r\n * ![string](../../images/string.png)\r\n * Strings can be a bit tricky as well, as there are special characters that\r\n * have to be accounted for. Another notable thing is that we need to use the\r\n * `u` specifier in our regex for unicode support.\r\n * \r\n * ![string](../../images/whitespace.png)\r\n * Below we see how whitespace is scanned in JSON. We'll add a lexer for inline \r\n * comments `//...` as well.\r\n */\r\nconst lexer = new pz.Lexer<JsonToken>(\r\n    [/true/, JsonToken.True],\r\n    [/false/, JsonToken.False],\r\n    [/null/, JsonToken.Null],\r\n    [/\\{/, JsonToken.LeftBrace],\r\n    [/\\}/, JsonToken.RightBrace],\r\n    [/\\[/, JsonToken.LeftBracket],\r\n    [/\\]/, JsonToken.RightBracket],\r\n    [/,/, JsonToken.Comma],\r\n    [/:/, JsonToken.Colon],\r\n    [/-?(?:[1-9]\\d+|\\d(?!\\d))(?:\\.\\d+)?(?:[eE][+-]?\\d+)?/, JsonToken.Number],\r\n    [/\"(?:(?:(?![\"\\\\])[\\u{0020}-\\u{ffff}])|(?:\\\\(?:[\"\\\\\\/bnfrt]|(?:u[0-9a-fA-F]{4}))))*\"/u,\r\n        JsonToken.String],\r\n    [/[\\t\\n\\r ]+/, JsonToken.Whitespace],\r\n    [/\\/\\/[^\\n\\r]*/, JsonToken.Comment]);\r\n/**\r\n * ## Terminals\r\n * \r\n * With tokens defined, parsers for terminals are trivial to write. Note how\r\n * we map the terminals to JavaScript types. We even cheat a bit, and convert\r\n * strings using `JSON.parse`. We skip the trailing whitespace (including \r\n * comments) for each token which makes our other rules simpler.\r\n */\r\nconst comment = pz.token(JsonToken.Comment)\r\nconst whitespace = pz.token(JsonToken.Whitespace).or(comment).zeroOrMore()\r\nconst number = pz.terminal(JsonToken.Number, \"<number>\")\r\n    .map(t => <any>Number(t.text)).followedBy(whitespace)\r\nconst string = pz.terminal(JsonToken.String, \"<string>\")\r\n    .map(t => <any>JSON.parse(t.text)).followedBy(whitespace)\r\nconst littrue = pz.terminal(JsonToken.True, \"true\").map(t => <any>true)\r\n    .followedBy(whitespace)\r\nconst litfalse = pz.terminal(JsonToken.False, \"false\").map(t => <any>false)\r\n    .followedBy(whitespace)\r\nconst litnull = pz.terminal(JsonToken.Null, \"null\").map(t => <any>null)\r\n    .followedBy(whitespace)\r\nconst comma = pz.terminal(JsonToken.Comma, \",\").followedBy(whitespace)\r\nconst colon = pz.terminal(JsonToken.Colon, \":\").followedBy(whitespace)\r\nconst beginarray = pz.terminal(JsonToken.LeftBracket, \"[\").followedBy(whitespace)\r\nconst endarray = pz.terminal(JsonToken.RightBracket, \"]\").followedBy(whitespace)\r\nconst beginobject = pz.terminal(JsonToken.LeftBrace, \"{\").followedBy(whitespace)\r\nconst endobject = pz.terminal(JsonToken.RightBrace, \"}\").followedBy(whitespace)\r\nconst eof = pz.terminal(JsonToken.EOF, \"<end of input>\")\r\n/**\r\n * ## Nonterminals \r\n * \r\n * Now we can define parsers for nonterminals, the abstract and recursive part \r\n * of the grammar. `element` is a recursive parsing rule that we need to define \r\n * later since it depends on other rules. We create a reference cell for it and \r\n * then define that multiple elements can be separated by comma.\r\n */\r\nconst element = new pz.Ref<pz.Parser<any, pz.Token<JsonToken>>>()\r\nconst elements = pz.forwardRef(element).zeroOrMoreSeparatedBy(comma)\r\n    .trace(\"elements\")\r\n/**\r\n * An array consists of list of elements separated by comma and bracketed by \r\n * `[` and `]`.\r\n */\r\nconst array = elements.bracketedBy(beginarray, endarray).trace(\"array\")\r\n/**\r\n * A member (of an object) consist of a string key, a colon, and an element. \r\n * The `member` parser returns a [_key_, _value_] pair. The `members` parses a \r\n * list of members separated by commas and returns array of pairs.\r\n */\r\nconst member = string.bind(\r\n        s => colon.bind(\r\n        c => pz.forwardRef(element).bind(\r\n        e => pz.mret(<[string, any]>[s, e]))))\r\n        .trace(\"member\")                        \r\nconst members = member.zeroOrMoreSeparatedBy(comma).trace(\"members\")\r\n/**\r\n * An object is list of members surrounded by `{` and `}`. The parser returns a \r\n * JavaScript object which is created by the `initObject` helper function. It \r\n * constructs an object from an array of [_key_, _value_] pairs.\r\n */\r\nconst object = members.bracketedBy(beginobject, endobject)\r\n    .map(ms => pz.initObject(ms)).trace(\"object\")\r\n/**\r\n * Now we can define the `element` rule. It chooses the next parser to be \r\n * applied based on a lookahead token. If it is a left brace or bracket, we \r\n * parse an object or an array respectively. If it is a primitive element \r\n * (string, number, boolean, or null), we jump directly to the correct parser. \r\n * This speeds up parsing as we don't need to use the `or` combinator, which \r\n * tries alternative parsers in turn.\r\n */    \r\nelement.target = pz.choose(\r\n    (token: pz.Token<JsonToken>) => {\r\n        switch (token.token) {\r\n            case JsonToken.LeftBrace: return object\r\n            case JsonToken.LeftBracket: return array\r\n            case JsonToken.String: return string\r\n            case JsonToken.Number: return number\r\n            case JsonToken.True: return littrue\r\n            case JsonToken.False: return litfalse\r\n            case JsonToken.Null: return litnull\r\n            default: return pz.fail<any, pz.Token<JsonToken>>(token.text,\r\n                \"{\", \"[\", \"<string>\", \"<number>\", \"true\", \"false\", \"null\")\r\n        }\r\n    }).trace(\"element\")\r\n/**\r\n * Finally we can define the root parser for JSON. It is just an `element` \r\n * parser preceded by optional whitespace. \r\n */\r\nconst json = whitespace.seq(element.target).followedBy(eof).trace(\"json\")\r\n/**\r\n * If you compare the definitions above to the official grammar in [json.org][],\r\n * you'll find that they are almost identical. The only difference is that we \r\n * need to declare the rules bottom-up as you cannot refer to a rule which is \r\n * not yet defined. Otherwise it is almost mechanical exercise to convert the\r\n * grammar to Parzec combinators.\r\n * \r\n * ## Exported Parsing Functions\r\n * \r\n * First we provide a function that creates a lexer input stream for a JSON \r\n * string.\r\n */\r\nexport function jsonInput(text: string): pz.ParserInput<pz.Token<JsonToken>> {\r\n    return pz.lexerInput<JsonToken>(text, lexer, \r\n        new pz.Token(JsonToken.EOF, \"<end of input>\"));\r\n}\r\n/**\r\n * Then we can define a function that takes a string and returns a JS object. \r\n * It throws an exception, if parsing fails. So, it works the same way as \r\n * `JSON.parse`.\r\n */\r\nexport function parseJson(text: string): any {\r\n    return pz.parse(json, jsonInput(text))\r\n}", "/**\r\n * ---\r\n * {\r\n *  \"modules\": [ \"./src/components/run-json-tests.ts\" ]\r\n * }\r\n * ---\r\n * \r\n * # Testing JSON Parser\r\n * \r\n * To manually test the parser enter or paste some JSON to the text box below.\r\n * Try also add comments anywhere inside JSON.\r\n * \r\n * <json-parser></json-parser>\r\n * \r\n * Manually entering test data becomes boring soon, so we'll again use \r\n * **fast-check** to automate test case generation. In this case we can use the\r\n * built-in combinator that generates arbitrary JSON data. So, our job is made\r\n * easy for us.\r\n */\r\nimport { parseJson } from \"./jsonparser\"\r\nimport { test } from \"lits-extras/lib/tester\"\r\nimport * as fc from \"fast-check\"\r\n/**\r\n * We should get interesting test data. You can check the test cases below.\r\n * \r\n * <test-runner name=\"JSON tests\"></test-runner>\r\n * \r\n * Using `JSON.parse` as the baseline for our parser, we can check that it and\r\n * our parsing functions produce identical JavaScript objects. We use the\r\n * `deepEqual` assertion to check that.\r\n */\r\ntest(\"Test arbitrary JSON data\", async t =>\r\n    fc.assert(\r\n        fc.property(fc.json(), str => {\r\n            let obj1 = JSON.parse(str)\r\n            let obj2 = parseJson(str)\r\n            t.deepEqual(obj2, obj1, JSON.stringify(obj2) + \r\n                \" should be deep equal to \" + JSON.stringify(obj1))\r\n        })))", "export class PreconditionFailure extends Error {\n    constructor(interruptExecution = false) {\n        super();\n        this.interruptExecution = interruptExecution;\n        this.footprint = PreconditionFailure.SharedFootPrint;\n    }\n    static isFailure(err) {\n        return err != null && err.footprint === PreconditionFailure.SharedFootPrint;\n    }\n}\nPreconditionFailure.SharedFootPrint = Symbol('fast-check/PreconditionFailure');\n", "class Nil {\n    [Symbol.iterator]() {\n        return this;\n    }\n    next(value) {\n        return { value, done: true };\n    }\n}\nNil.nil = new Nil();\nexport function nilHelper() {\n    return Nil.nil;\n}\nexport function* mapHelper(g, f) {\n    for (const v of g) {\n        yield f(v);\n    }\n}\nexport function* flatMapHelper(g, f) {\n    for (const v of g) {\n        yield* f(v);\n    }\n}\nexport function* filterHelper(g, f) {\n    for (const v of g) {\n        if (f(v)) {\n            yield v;\n        }\n    }\n}\nexport function* takeNHelper(g, n) {\n    for (let i = 0; i < n; ++i) {\n        const cur = g.next();\n        if (cur.done) {\n            break;\n        }\n        yield cur.value;\n    }\n}\nexport function* takeWhileHelper(g, f) {\n    let cur = g.next();\n    while (!cur.done && f(cur.value)) {\n        yield cur.value;\n        cur = g.next();\n    }\n}\nexport function* joinHelper(g, others) {\n    for (let cur = g.next(); !cur.done; cur = g.next()) {\n        yield cur.value;\n    }\n    for (const s of others) {\n        for (let cur = s.next(); !cur.done; cur = s.next()) {\n            yield cur.value;\n        }\n    }\n}\n", "import { filterHelper, flatMapHelper, joinHelper, mapHelper, nilHelper, takeNHelper, takeWhileHelper, } from './StreamHelpers.js';\nexport class Stream {\n    constructor(g) {\n        this.g = g;\n    }\n    static nil() {\n        return new Stream(nilHelper());\n    }\n    static of(...elements) {\n        return new Stream(elements[Symbol.iterator]());\n    }\n    next() {\n        return this.g.next();\n    }\n    [Symbol.iterator]() {\n        return this.g;\n    }\n    map(f) {\n        return new Stream(mapHelper(this.g, f));\n    }\n    flatMap(f) {\n        return new Stream(flatMapHelper(this.g, f));\n    }\n    dropWhile(f) {\n        let foundEligible = false;\n        function* helper(v) {\n            if (foundEligible || !f(v)) {\n                foundEligible = true;\n                yield v;\n            }\n        }\n        return this.flatMap(helper);\n    }\n    drop(n) {\n        let idx = 0;\n        function helper() {\n            return idx++ < n;\n        }\n        return this.dropWhile(helper);\n    }\n    takeWhile(f) {\n        return new Stream(takeWhileHelper(this.g, f));\n    }\n    take(n) {\n        return new Stream(takeNHelper(this.g, n));\n    }\n    filter(f) {\n        return new Stream(filterHelper(this.g, f));\n    }\n    every(f) {\n        for (const v of this.g) {\n            if (!f(v)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    has(f) {\n        for (const v of this.g) {\n            if (f(v)) {\n                return [true, v];\n            }\n        }\n        return [false, null];\n    }\n    join(...others) {\n        return new Stream(joinHelper(this.g, others));\n    }\n    getNthOrLast(nth) {\n        let remaining = nth;\n        let last = null;\n        for (const v of this.g) {\n            if (remaining-- === 0)\n                return v;\n            last = v;\n        }\n        return last;\n    }\n}\nexport function stream(g) {\n    return new Stream(g);\n}\n", "export const cloneMethod = Symbol('fast-check/cloneMethod');\nexport function hasCloneMethod(instance) {\n    return (instance !== null &&\n        (typeof instance === 'object' || typeof instance === 'function') &&\n        cloneMethod in instance &&\n        typeof instance[cloneMethod] === 'function');\n}\nexport function cloneIfNeeded(instance) {\n    return hasCloneMethod(instance) ? instance[cloneMethod]() : instance;\n}\n", "import { Stream } from '../../../stream/Stream.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class Shrinkable {\n    constructor(value_, shrink = () => Stream.nil(), customGetValue = undefined) {\n        this.value_ = value_;\n        this.shrink = shrink;\n        this.hasToBeCloned = customGetValue !== undefined || hasCloneMethod(value_);\n        this.readOnce = false;\n        if (this.hasToBeCloned) {\n            Object.defineProperty(this, 'value', { get: customGetValue !== undefined ? customGetValue : this.getValue });\n        }\n        else {\n            this.value = value_;\n        }\n    }\n    getValue() {\n        if (!this.readOnce) {\n            this.readOnce = true;\n            return this.value_;\n        }\n        return this.value_[cloneMethod]();\n    }\n    applyMapper(mapper) {\n        if (this.hasToBeCloned) {\n            const out = mapper(this.value);\n            if (out instanceof Object) {\n                out[cloneMethod] = () => this.applyMapper(mapper);\n            }\n            return out;\n        }\n        return mapper(this.value);\n    }\n    map(mapper) {\n        return new Shrinkable(this.applyMapper(mapper), () => this.shrink().map((v) => v.map(mapper)));\n    }\n    filter(refinement) {\n        const refinementOnShrinkable = (s) => {\n            return refinement(s.value_);\n        };\n        return new Shrinkable(this.value, () => this.shrink()\n            .filter(refinementOnShrinkable)\n            .map((v) => v.filter(refinement)));\n    }\n}\n", "import { Shrinkable } from './Shrinkable.js';\nexport class Arbitrary {\n    filter(refinement) {\n        return new FilterArbitrary(this, refinement);\n    }\n    map(mapper) {\n        return new MapArbitrary(this, mapper);\n    }\n    chain(fmapper) {\n        return new ChainArbitrary(this, fmapper);\n    }\n    noShrink() {\n        return new NoShrinkArbitrary(this);\n    }\n    withBias(_freq) {\n        return this;\n    }\n    noBias() {\n        return new NoBiasArbitrary(this);\n    }\n}\nclass ChainArbitrary extends Arbitrary {\n    constructor(arb, fmapper) {\n        super();\n        this.arb = arb;\n        this.fmapper = fmapper;\n    }\n    generate(mrng) {\n        const clonedMrng = mrng.clone();\n        const src = this.arb.generate(mrng);\n        const dst = this.fmapper(src.value).generate(mrng);\n        return ChainArbitrary.shrinkChain(clonedMrng, src, dst, this.fmapper);\n    }\n    withBias(freq) {\n        return this.arb.withBias(freq).chain((t) => this.fmapper(t).withBias(freq));\n    }\n    static shrinkChain(mrng, src, dst, fmapper) {\n        return new Shrinkable(dst.value, () => src\n            .shrink()\n            .map((v) => ChainArbitrary.shrinkChain(mrng.clone(), v, fmapper(v.value).generate(mrng.clone()), fmapper))\n            .join(dst.shrink()));\n    }\n}\nclass MapArbitrary extends Arbitrary {\n    constructor(arb, mapper) {\n        super();\n        this.arb = arb;\n        this.mapper = mapper;\n    }\n    generate(mrng) {\n        return this.arb.generate(mrng).map(this.mapper);\n    }\n    withBias(freq) {\n        return this.arb.withBias(freq).map(this.mapper);\n    }\n}\nclass FilterArbitrary extends Arbitrary {\n    constructor(arb, refinement) {\n        super();\n        this.arb = arb;\n        this.refinement = refinement;\n    }\n    generate(mrng) {\n        let g = this.arb.generate(mrng);\n        while (!this.refinementOnShrinkable(g)) {\n            g = this.arb.generate(mrng);\n        }\n        return g.filter(this.refinement);\n    }\n    withBias(freq) {\n        return this.arb.withBias(freq).filter(this.refinement);\n    }\n    refinementOnShrinkable(s) {\n        return this.refinement(s.value);\n    }\n}\nclass NoShrinkArbitrary extends Arbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng) {\n        return new Shrinkable(this.arb.generate(mrng).value);\n    }\n    withBias(freq) {\n        return this.arb.withBias(freq).noShrink();\n    }\n}\nclass NoBiasArbitrary extends Arbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng) {\n        return this.arb.generate(mrng);\n    }\n}\nexport function assertIsArbitrary(instance) {\n    if (typeof instance !== 'object' || instance === null || !('generate' in instance)) {\n        throw new Error('Unexpected value received: not an instance of Arbitrary');\n    }\n}\n", "import { Arbitrary } from './Arbitrary.js';\nimport { Shrinkable } from './Shrinkable.js';\nfunction removeContextFromContextualValue(contextualValue) {\n    return contextualValue[0];\n}\nclass ArbitraryWithContextualShrink extends Arbitrary {\n    contextualShrinkableFor(value, context) {\n        return new Shrinkable(value, () => this.contextualShrink(value, context).map((contextualValue) => this.contextualShrinkableFor(contextualValue[0], contextualValue[1])));\n    }\n    shrink(value, shrunkOnce) {\n        const context = shrunkOnce === true ? this.shrunkOnceContext() : undefined;\n        return this.contextualShrink(value, context).map(removeContextFromContextualValue);\n    }\n    shrinkableFor(value, shrunkOnce) {\n        return new Shrinkable(value, () => {\n            return this.shrink(value, shrunkOnce).map((value) => this.shrinkableFor(value, true));\n        });\n    }\n}\nexport { ArbitraryWithContextualShrink };\n", "import { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class NextValue {\n    constructor(value_, context, customGetValue = undefined) {\n        this.value_ = value_;\n        this.context = context;\n        this.hasToBeCloned = customGetValue !== undefined || hasCloneMethod(value_);\n        this.readOnce = false;\n        if (this.hasToBeCloned) {\n            Object.defineProperty(this, 'value', { get: customGetValue !== undefined ? customGetValue : this.getValue });\n        }\n        else {\n            this.value = value_;\n        }\n    }\n    getValue() {\n        if (this.hasToBeCloned) {\n            if (!this.readOnce) {\n                this.readOnce = true;\n                return this.value_;\n            }\n            return this.value_[cloneMethod]();\n        }\n        return this.value_;\n    }\n}\n", "import { Stream } from '../../../stream/Stream.js';\nimport { cloneMethod } from '../../symbols.js';\nimport { NextValue } from './NextValue.js';\nexport class NextArbitrary {\n    filter(refinement) {\n        return new FilterArbitrary(this, refinement);\n    }\n    map(mapper, unmapper) {\n        return new MapArbitrary(this, mapper, unmapper);\n    }\n    chain(chainer) {\n        return new ChainArbitrary(this, chainer);\n    }\n    noShrink() {\n        return new NoShrinkArbitrary(this);\n    }\n    noBias() {\n        return new NoBiasArbitrary(this);\n    }\n}\nclass ChainArbitrary extends NextArbitrary {\n    constructor(arb, chainer) {\n        super();\n        this.arb = arb;\n        this.chainer = chainer;\n    }\n    generate(mrng, biasFactor) {\n        const clonedMrng = mrng.clone();\n        const src = this.arb.generate(mrng, biasFactor);\n        return this.valueChainer(src, mrng, clonedMrng, biasFactor);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    shrink(value, context) {\n        if (this.isSafeContext(context)) {\n            return (!context.stoppedForOriginal\n                ? this.arb\n                    .shrink(context.originalValue, context.originalContext)\n                    .map((v) => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias))\n                : Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map((dst) => {\n                const newContext = Object.assign(Object.assign({}, context), { chainedContext: dst.context, stoppedForOriginal: true });\n                return new NextValue(dst.value_, newContext);\n            }));\n        }\n        return Stream.nil();\n    }\n    valueChainer(v, generateMrng, clonedMrng, biasFactor) {\n        const chainedArbitrary = this.chainer(v.value_);\n        const dst = chainedArbitrary.generate(generateMrng, biasFactor);\n        const context = {\n            originalBias: biasFactor,\n            originalValue: v.value_,\n            originalContext: v.context,\n            stoppedForOriginal: false,\n            chainedArbitrary,\n            chainedContext: dst.context,\n            clonedMrng,\n        };\n        return new NextValue(dst.value_, context);\n    }\n    isSafeContext(context) {\n        return (context != null &&\n            typeof context === 'object' &&\n            'originalBias' in context &&\n            'originalValue' in context &&\n            'originalContext' in context &&\n            'stoppedForOriginal' in context &&\n            'chainedArbitrary' in context &&\n            'chainedContext' in context &&\n            'clonedMrng' in context);\n    }\n}\nclass MapArbitrary extends NextArbitrary {\n    constructor(arb, mapper, unmapper) {\n        super();\n        this.arb = arb;\n        this.mapper = mapper;\n        this.unmapper = unmapper;\n        this.bindValueMapper = this.valueMapper.bind(this);\n    }\n    generate(mrng, biasFactor) {\n        const g = this.arb.generate(mrng, biasFactor);\n        return this.valueMapper(g);\n    }\n    canShrinkWithoutContext(value) {\n        if (this.unmapper !== undefined) {\n            try {\n                const unmapped = this.unmapper(value);\n                return this.arb.canShrinkWithoutContext(unmapped);\n            }\n            catch (_err) {\n                return false;\n            }\n        }\n        return false;\n    }\n    shrink(value, context) {\n        if (this.isSafeContext(context)) {\n            return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);\n        }\n        if (this.unmapper !== undefined) {\n            const unmapped = this.unmapper(value);\n            return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);\n        }\n        return Stream.nil();\n    }\n    mapperWithCloneIfNeeded(v) {\n        const sourceValue = v.value;\n        const mappedValue = this.mapper(sourceValue);\n        if (v.hasToBeCloned &&\n            ((typeof mappedValue === 'object' && mappedValue !== null) || typeof mappedValue === 'function') &&\n            Object.isExtensible(mappedValue)) {\n            Object.defineProperty(mappedValue, cloneMethod, { get: () => () => this.mapperWithCloneIfNeeded(v)[0] });\n        }\n        return [mappedValue, sourceValue];\n    }\n    valueMapper(v) {\n        const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);\n        const context = { originalValue: sourceValue, originalContext: v.context };\n        return new NextValue(mappedValue, context);\n    }\n    isSafeContext(context) {\n        return (context != null &&\n            typeof context === 'object' &&\n            'originalValue' in context &&\n            'originalContext' in context);\n    }\n}\nclass FilterArbitrary extends NextArbitrary {\n    constructor(arb, refinement) {\n        super();\n        this.arb = arb;\n        this.refinement = refinement;\n        this.bindRefinementOnValue = this.refinementOnValue.bind(this);\n    }\n    generate(mrng, biasFactor) {\n        while (true) {\n            const g = this.arb.generate(mrng, biasFactor);\n            if (this.refinementOnValue(g)) {\n                return g;\n            }\n        }\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value) && this.refinement(value);\n    }\n    shrink(value, context) {\n        return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);\n    }\n    refinementOnValue(v) {\n        return this.refinement(v.value);\n    }\n}\nclass NoShrinkArbitrary extends NextArbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, biasFactor) {\n        return this.arb.generate(mrng, biasFactor);\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value);\n    }\n    shrink(_value, _context) {\n        return Stream.nil();\n    }\n    noShrink() {\n        return this;\n    }\n}\nclass NoBiasArbitrary extends NextArbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, _biasFactor) {\n        return this.arb.generate(mrng, undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        return this.arb.shrink(value, context);\n    }\n    noBias() {\n        return this;\n    }\n}\nexport function assertIsNextArbitrary(instance) {\n    if (typeof instance !== 'object' ||\n        instance === null ||\n        !('generate' in instance) ||\n        !('shrink' in instance) ||\n        'shrinkableFor' in instance) {\n        throw new Error('Unexpected value received: not an instance of NextArbitrary');\n    }\n}\n", "var _a;\nimport { Stream } from '../../../stream/Stream.js';\nimport { ConverterFromNext } from './ConverterFromNext.js';\nimport { NextArbitrary } from './NextArbitrary.js';\nimport { NextValue } from './NextValue.js';\nconst identifier = '__ConverterToNext__';\nfunction fromShrinkableToNextValue(g) {\n    if (!g.hasToBeCloned) {\n        return new NextValue(g.value_, g);\n    }\n    return new NextValue(g.value_, g, () => g.value);\n}\nexport class ConverterToNext extends NextArbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n        this[_a] = true;\n    }\n    static isConverterToNext(arb) {\n        return identifier in arb;\n    }\n    static convertIfNeeded(arb) {\n        if (ConverterFromNext.isConverterFromNext(arb))\n            return arb.arb;\n        else\n            return new ConverterToNext(arb);\n    }\n    generate(mrng, biasFactor) {\n        const g = biasFactor !== undefined ? this.arb.withBias(biasFactor).generate(mrng) : this.arb.generate(mrng);\n        return fromShrinkableToNextValue(g);\n    }\n    canShrinkWithoutContext(_value) {\n        return false;\n    }\n    shrink(_value, context) {\n        if (this.isSafeContext(context)) {\n            return context.shrink().map(fromShrinkableToNextValue);\n        }\n        return Stream.nil();\n    }\n    isSafeContext(context) {\n        return (context != null && typeof context === 'object' && 'value' in context && 'shrink' in context);\n    }\n    filter(refinement) {\n        return ConverterToNext.convertIfNeeded(this.arb.filter(refinement));\n    }\n    map(mapper) {\n        return ConverterToNext.convertIfNeeded(this.arb.map(mapper));\n    }\n    chain(fmapper) {\n        return ConverterToNext.convertIfNeeded(this.arb.chain((t) => {\n            const fmapped = fmapper(t);\n            if (ConverterToNext.isConverterToNext(fmapped))\n                return fmapped.arb;\n            else\n                return new ConverterFromNext(fmapped);\n        }));\n    }\n    noShrink() {\n        return ConverterToNext.convertIfNeeded(this.arb.noShrink());\n    }\n    noBias() {\n        return ConverterToNext.convertIfNeeded(this.arb.noBias());\n    }\n}\n_a = identifier;\n", "var _a;\nimport { ArbitraryWithContextualShrink } from './ArbitraryWithContextualShrink.js';\nimport { ConverterToNext } from './ConverterToNext.js';\nimport { Shrinkable } from './Shrinkable.js';\nconst identifier = '__ConverterFromNext__';\nfunction fromNextValueToShrinkableFor(arb) {\n    return function fromNextValueToShrinkable(v) {\n        const value_ = v.value_;\n        const shrinker = () => arb.shrink(value_, v.context).map(fromNextValueToShrinkable);\n        if (!v.hasToBeCloned) {\n            return new Shrinkable(value_, shrinker);\n        }\n        return new Shrinkable(value_, shrinker, () => v.value);\n    };\n}\nexport class ConverterFromNext extends ArbitraryWithContextualShrink {\n    constructor(arb, legacyShrunkOnceContext, biasFactor = undefined) {\n        super();\n        this.arb = arb;\n        this.legacyShrunkOnceContext = legacyShrunkOnceContext;\n        this.biasFactor = biasFactor;\n        this[_a] = true;\n        this.toShrinkable = fromNextValueToShrinkableFor(arb);\n    }\n    static isConverterFromNext(arb) {\n        return identifier in arb;\n    }\n    static convertIfNeeded(arb) {\n        if (ConverterToNext.isConverterToNext(arb))\n            return arb.arb;\n        else\n            return new ConverterFromNext(arb);\n    }\n    generate(mrng) {\n        const g = this.arb.generate(mrng, this.biasFactor);\n        return this.toShrinkable(g);\n    }\n    contextualShrink(value, context) {\n        return this.arb.shrink(value, context).map((v) => [v.value_, v.context]);\n    }\n    shrunkOnceContext() {\n        return this.legacyShrunkOnceContext;\n    }\n    filter(refinement) {\n        return ConverterFromNext.convertIfNeeded(this.arb.filter(refinement));\n    }\n    map(mapper) {\n        return ConverterFromNext.convertIfNeeded(this.arb.map(mapper));\n    }\n    chain(fmapper) {\n        return ConverterFromNext.convertIfNeeded(this.arb.chain((t) => {\n            const fmapped = fmapper(t);\n            if (ConverterFromNext.isConverterFromNext(fmapped))\n                return fmapped.arb;\n            else\n                return new ConverterToNext(fmapped);\n        }));\n    }\n    noShrink() {\n        return ConverterFromNext.convertIfNeeded(this.arb.noShrink());\n    }\n    withBias(freq) {\n        return new ConverterFromNext(this.arb, this.legacyShrunkOnceContext, freq);\n    }\n    noBias() {\n        return ConverterFromNext.convertIfNeeded(this.arb.noBias());\n    }\n}\n_a = identifier;\n", "import { assertIsArbitrary } from './Arbitrary.js';\nimport { ConverterFromNext } from './ConverterFromNext.js';\nimport { ConverterToNext } from './ConverterToNext.js';\nimport { assertIsNextArbitrary } from './NextArbitrary.js';\nexport function convertFromNext(arb) {\n    if (ConverterToNext.isConverterToNext(arb)) {\n        return arb.arb;\n    }\n    assertIsNextArbitrary(arb);\n    return new ConverterFromNext(arb);\n}\nexport function convertFromNextWithShrunkOnce(arb, legacyShrunkOnceContext) {\n    if (ConverterToNext.isConverterToNext(arb)) {\n        if (!('contextualShrink' in arb.arb) ||\n            !('contextualShrinkableFor' in arb.arb) ||\n            !('shrunkOnceContext' in arb.arb) ||\n            !('shrink' in arb.arb) ||\n            !('shrinkableFor' in arb.arb)) {\n            throw new Error('Conversion rejected: Underlying arbitrary is not compatible with ArbitraryWithContextualShrink');\n        }\n        return arb.arb;\n    }\n    assertIsNextArbitrary(arb);\n    return new ConverterFromNext(arb, legacyShrunkOnceContext);\n}\nexport function convertToNext(arb) {\n    if (ConverterFromNext.isConverterFromNext(arb)) {\n        return arb.arb;\n    }\n    assertIsArbitrary(arb);\n    return new ConverterToNext(arb);\n}\n", "import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nexport class TupleArbitrary extends NextArbitrary {\n    constructor(arbs) {\n        super();\n        this.arbs = arbs;\n        for (let idx = 0; idx !== arbs.length; ++idx) {\n            const arb = arbs[idx];\n            if (arb == null || arb.generate == null)\n                throw new Error(`Invalid parameter encountered at index ${idx}: expecting an Arbitrary`);\n        }\n    }\n    static makeItCloneable(vs, values) {\n        return Object.defineProperty(vs, cloneMethod, {\n            value: () => {\n                const cloned = [];\n                for (let idx = 0; idx !== values.length; ++idx) {\n                    cloned.push(values[idx].value);\n                }\n                TupleArbitrary.makeItCloneable(cloned, values);\n                return cloned;\n            },\n        });\n    }\n    static wrapper(values) {\n        let cloneable = false;\n        const vs = [];\n        const ctxs = [];\n        for (let idx = 0; idx !== values.length; ++idx) {\n            const v = values[idx];\n            cloneable = cloneable || v.hasToBeCloned;\n            vs.push(v.value);\n            ctxs.push(v.context);\n        }\n        if (cloneable) {\n            TupleArbitrary.makeItCloneable(vs, values);\n        }\n        return new NextValue(vs, ctxs);\n    }\n    generate(mrng, biasFactor) {\n        return TupleArbitrary.wrapper(this.arbs.map((a) => a.generate(mrng, biasFactor)));\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || value.length !== this.arbs.length) {\n            return false;\n        }\n        for (let index = 0; index !== this.arbs.length; ++index) {\n            if (!this.arbs[index].canShrinkWithoutContext(value[index])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    shrink(value, context) {\n        let s = Stream.nil();\n        const safeContext = Array.isArray(context) ? context : [];\n        for (let idx = 0; idx !== this.arbs.length; ++idx) {\n            const shrinksForIndex = this.arbs[idx]\n                .shrink(value[idx], safeContext[idx])\n                .map((v) => {\n                const nextValues = value.map((v, idx) => new NextValue(cloneIfNeeded(v), safeContext[idx]));\n                return nextValues\n                    .slice(0, idx)\n                    .concat([v])\n                    .concat(nextValues.slice(idx + 1));\n            })\n                .map((values) => TupleArbitrary.wrapper(values));\n            s = s.join(shrinksForIndex);\n        }\n        return s;\n    }\n}\n", "import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { TupleArbitrary } from './_internals/TupleArbitrary.js';\nexport function genericTuple(arbs) {\n    const nextArbs = arbs.map((arb) => convertToNext(arb));\n    return convertFromNext(new TupleArbitrary(nextArbs));\n}\n", "export const runIdToFrequency = (runId) => 2 + Math.floor(Math.log(runId + 1) / Math.log(10));\n", "let globalParameters = {};\nexport function configureGlobal(parameters) {\n    globalParameters = parameters;\n}\nexport function readConfigureGlobal() {\n    return globalParameters;\n}\nexport function resetConfigureGlobal() {\n    globalParameters = {};\n}\n", "import { PreconditionFailure } from '../precondition/PreconditionFailure.js';\nimport { runIdToFrequency } from './IRawProperty.js';\nimport { readConfigureGlobal } from '../runner/configuration/GlobalParameters.js';\nimport { ConverterFromNext } from '../arbitrary/definition/ConverterFromNext.js';\nexport class AsyncProperty {\n    constructor(arb, predicate) {\n        this.arb = arb;\n        this.predicate = predicate;\n        this.isAsync = () => true;\n        const { asyncBeforeEach, asyncAfterEach, beforeEach, afterEach } = readConfigureGlobal() || {};\n        if (asyncBeforeEach !== undefined && beforeEach !== undefined) {\n            throw Error('Global \"asyncBeforeEach\" and \"beforeEach\" parameters can\\'t be set at the same time when running async properties');\n        }\n        if (asyncAfterEach !== undefined && afterEach !== undefined) {\n            throw Error('Global \"asyncAfterEach\" and \"afterEach\" parameters can\\'t be set at the same time when running async properties');\n        }\n        this.beforeEachHook = asyncBeforeEach || beforeEach || AsyncProperty.dummyHook;\n        this.afterEachHook = asyncAfterEach || afterEach || AsyncProperty.dummyHook;\n    }\n    generate(mrng, runId) {\n        if (ConverterFromNext.isConverterFromNext(this.arb)) {\n            return this.arb.toShrinkable(this.arb.arb.generate(mrng, runId != null ? runIdToFrequency(runId) : undefined));\n        }\n        return runId != null ? this.arb.withBias(runIdToFrequency(runId)).generate(mrng) : this.arb.generate(mrng);\n    }\n    async run(v) {\n        await this.beforeEachHook();\n        try {\n            const output = await this.predicate(v);\n            return output == null || output === true ? null : 'Property failed by returning false';\n        }\n        catch (err) {\n            if (PreconditionFailure.isFailure(err))\n                return err;\n            if (err instanceof Error && err.stack)\n                return `${err}\\n\\nStack trace: ${err.stack}`;\n            return `${err}`;\n        }\n        finally {\n            await this.afterEachHook();\n        }\n    }\n    beforeEach(hookFunction) {\n        const previousBeforeEachHook = this.beforeEachHook;\n        this.beforeEachHook = () => hookFunction(previousBeforeEachHook);\n        return this;\n    }\n    afterEach(hookFunction) {\n        const previousAfterEachHook = this.afterEachHook;\n        this.afterEachHook = () => hookFunction(previousAfterEachHook);\n        return this;\n    }\n}\nAsyncProperty.dummyHook = () => { };\n", "import { PreconditionFailure } from '../precondition/PreconditionFailure.js';\nimport { runIdToFrequency } from './IRawProperty.js';\nimport { readConfigureGlobal } from '../runner/configuration/GlobalParameters.js';\nimport { ConverterFromNext } from '../arbitrary/definition/ConverterFromNext.js';\nexport class Property {\n    constructor(arb, predicate) {\n        this.arb = arb;\n        this.predicate = predicate;\n        this.isAsync = () => false;\n        const { beforeEach = Property.dummyHook, afterEach = Property.dummyHook, asyncBeforeEach, asyncAfterEach, } = readConfigureGlobal() || {};\n        if (asyncBeforeEach !== undefined) {\n            throw Error('\"asyncBeforeEach\" can\\'t be set when running synchronous properties');\n        }\n        if (asyncAfterEach !== undefined) {\n            throw Error('\"asyncAfterEach\" can\\'t be set when running synchronous properties');\n        }\n        this.beforeEachHook = beforeEach;\n        this.afterEachHook = afterEach;\n    }\n    generate(mrng, runId) {\n        if (ConverterFromNext.isConverterFromNext(this.arb)) {\n            return this.arb.toShrinkable(this.arb.arb.generate(mrng, runId != null ? runIdToFrequency(runId) : undefined));\n        }\n        return runId != null ? this.arb.withBias(runIdToFrequency(runId)).generate(mrng) : this.arb.generate(mrng);\n    }\n    run(v) {\n        this.beforeEachHook();\n        try {\n            const output = this.predicate(v);\n            return output == null || output === true ? null : 'Property failed by returning false';\n        }\n        catch (err) {\n            if (PreconditionFailure.isFailure(err))\n                return err;\n            if (err instanceof Error && err.stack)\n                return `${err}\\n\\nStack trace: ${err.stack}`;\n            return `${err}`;\n        }\n        finally {\n            this.afterEachHook();\n        }\n    }\n    beforeEach(hookFunction) {\n        const previousBeforeEachHook = this.beforeEachHook;\n        this.beforeEachHook = () => hookFunction(previousBeforeEachHook);\n        return this;\n    }\n    afterEach(hookFunction) {\n        const previousAfterEachHook = this.afterEachHook;\n        this.afterEachHook = () => hookFunction(previousAfterEachHook);\n        return this;\n    }\n}\nProperty.dummyHook = () => { };\n", "import { genericTuple } from '../../arbitrary/genericTuple.js';\nimport { Property } from './Property.generic.js';\nfunction property(...args) {\n    if (args.length < 2)\n        throw new Error('property expects at least two parameters');\n    const arbs = args.slice(0, args.length - 1);\n    const p = args[args.length - 1];\n    return new Property(genericTuple(arbs), t => p(...t));\n}\nexport { property };\n", "import { generateN, skipN, unsafeGenerateN, unsafeSkipN } from './generator/RandomGenerator.js';\nimport { congruential, congruential32 } from './generator/LinearCongruential.js';\nimport mersenne from './generator/MersenneTwister.js';\nimport { xorshift128plus } from './generator/XorShift.js';\nimport { xoroshiro128plus } from './generator/XoroShiro.js';\nimport { uniformArrayIntDistribution } from './distribution/UniformArrayIntDistribution.js';\nimport { uniformBigIntDistribution } from './distribution/UniformBigIntDistribution.js';\nimport { uniformIntDistribution } from './distribution/UniformIntDistribution.js';\nimport { unsafeUniformArrayIntDistribution } from './distribution/UnsafeUniformArrayIntDistribution.js';\nimport { unsafeUniformBigIntDistribution } from './distribution/UnsafeUniformBigIntDistribution.js';\nimport { unsafeUniformIntDistribution } from './distribution/UnsafeUniformIntDistribution.js';\nvar __type = 'module';\nvar __version = '5.0.0';\nvar __commitHash = '744555855a01e1551ab1cf67a6ea973d14964661';\nexport { __type, __version, __commitHash, generateN, skipN, unsafeGenerateN, unsafeSkipN, congruential, congruential32, mersenne, xorshift128plus, xoroshiro128plus, uniformArrayIntDistribution, uniformBigIntDistribution, uniformIntDistribution, unsafeUniformArrayIntDistribution, unsafeUniformBigIntDistribution, unsafeUniformIntDistribution, };\n", "export function unsafeGenerateN(rng, num) {\n    var out = [];\n    for (var idx = 0; idx != num; ++idx) {\n        out.push(rng.unsafeNext());\n    }\n    return out;\n}\nexport function generateN(rng, num) {\n    var nextRng = rng.clone();\n    var out = unsafeGenerateN(nextRng, num);\n    return [out, nextRng];\n}\nexport function unsafeSkipN(rng, num) {\n    for (var idx = 0; idx != num; ++idx) {\n        rng.unsafeNext();\n    }\n}\nexport function skipN(rng, num) {\n    var nextRng = rng.clone();\n    unsafeSkipN(nextRng, num);\n    return nextRng;\n}\n", "var MULTIPLIER = 0x000343fd;\nvar INCREMENT = 0x00269ec3;\nvar MASK = 0xffffffff;\nvar MASK_2 = (1 << 31) - 1;\nvar computeNextSeed = function (seed) {\n    return (seed * MULTIPLIER + INCREMENT) & MASK;\n};\nvar computeValueFromNextSeed = function (nextseed) {\n    return (nextseed & MASK_2) >> 16;\n};\nvar LinearCongruential = (function () {\n    function LinearCongruential(seed) {\n        this.seed = seed;\n    }\n    LinearCongruential.prototype.min = function () {\n        return LinearCongruential.min;\n    };\n    LinearCongruential.prototype.max = function () {\n        return LinearCongruential.max;\n    };\n    LinearCongruential.prototype.clone = function () {\n        return new LinearCongruential(this.seed);\n    };\n    LinearCongruential.prototype.next = function () {\n        var nextRng = new LinearCongruential(this.seed);\n        var out = nextRng.unsafeNext();\n        return [out, nextRng];\n    };\n    LinearCongruential.prototype.unsafeNext = function () {\n        this.seed = computeNextSeed(this.seed);\n        return computeValueFromNextSeed(this.seed);\n    };\n    LinearCongruential.min = 0;\n    LinearCongruential.max = Math.pow(2, 15) - 1;\n    return LinearCongruential;\n}());\nvar LinearCongruential32 = (function () {\n    function LinearCongruential32(seed) {\n        this.seed = seed;\n    }\n    LinearCongruential32.prototype.min = function () {\n        return LinearCongruential32.min;\n    };\n    LinearCongruential32.prototype.max = function () {\n        return LinearCongruential32.max;\n    };\n    LinearCongruential32.prototype.clone = function () {\n        return new LinearCongruential32(this.seed);\n    };\n    LinearCongruential32.prototype.next = function () {\n        var nextRng = new LinearCongruential32(this.seed);\n        var out = nextRng.unsafeNext();\n        return [out, nextRng];\n    };\n    LinearCongruential32.prototype.unsafeNext = function () {\n        var s1 = computeNextSeed(this.seed);\n        var v1 = computeValueFromNextSeed(s1);\n        var s2 = computeNextSeed(s1);\n        var v2 = computeValueFromNextSeed(s2);\n        this.seed = computeNextSeed(s2);\n        var v3 = computeValueFromNextSeed(this.seed);\n        var vnext = v3 + ((v2 + (v1 << 15)) << 15);\n        return ((vnext + 0x80000000) | 0) + 0x80000000;\n    };\n    LinearCongruential32.min = 0;\n    LinearCongruential32.max = 0xffffffff;\n    return LinearCongruential32;\n}());\nexport var congruential = function (seed) {\n    return new LinearCongruential(seed);\n};\nexport var congruential32 = function (seed) {\n    return new LinearCongruential32(seed);\n};\n", "var MersenneTwister = (function () {\n    function MersenneTwister(states, index) {\n        this.states = states;\n        this.index = index;\n    }\n    MersenneTwister.twist = function (prev) {\n        var mt = prev.slice();\n        for (var idx = 0; idx !== MersenneTwister.N - MersenneTwister.M; ++idx) {\n            var y_1 = (mt[idx] & MersenneTwister.MASK_UPPER) + (mt[idx + 1] & MersenneTwister.MASK_LOWER);\n            mt[idx] = mt[idx + MersenneTwister.M] ^ (y_1 >>> 1) ^ (-(y_1 & 1) & MersenneTwister.A);\n        }\n        for (var idx = MersenneTwister.N - MersenneTwister.M; idx !== MersenneTwister.N - 1; ++idx) {\n            var y_2 = (mt[idx] & MersenneTwister.MASK_UPPER) + (mt[idx + 1] & MersenneTwister.MASK_LOWER);\n            mt[idx] = mt[idx + MersenneTwister.M - MersenneTwister.N] ^ (y_2 >>> 1) ^ (-(y_2 & 1) & MersenneTwister.A);\n        }\n        var y = (mt[MersenneTwister.N - 1] & MersenneTwister.MASK_UPPER) + (mt[0] & MersenneTwister.MASK_LOWER);\n        mt[MersenneTwister.N - 1] = mt[MersenneTwister.M - 1] ^ (y >>> 1) ^ (-(y & 1) & MersenneTwister.A);\n        return mt;\n    };\n    MersenneTwister.seeded = function (seed) {\n        var out = Array(MersenneTwister.N);\n        out[0] = seed;\n        for (var idx = 1; idx !== MersenneTwister.N; ++idx) {\n            var xored = out[idx - 1] ^ (out[idx - 1] >>> 30);\n            out[idx] = (Math.imul(MersenneTwister.F, xored) + idx) | 0;\n        }\n        return out;\n    };\n    MersenneTwister.from = function (seed) {\n        return new MersenneTwister(MersenneTwister.twist(MersenneTwister.seeded(seed)), 0);\n    };\n    MersenneTwister.prototype.min = function () {\n        return MersenneTwister.min;\n    };\n    MersenneTwister.prototype.max = function () {\n        return MersenneTwister.max;\n    };\n    MersenneTwister.prototype.clone = function () {\n        return new MersenneTwister(this.states, this.index);\n    };\n    MersenneTwister.prototype.next = function () {\n        var nextRng = new MersenneTwister(this.states, this.index);\n        var out = nextRng.unsafeNext();\n        return [out, nextRng];\n    };\n    MersenneTwister.prototype.unsafeNext = function () {\n        var y = this.states[this.index];\n        y ^= this.states[this.index] >>> MersenneTwister.U;\n        y ^= (y << MersenneTwister.S) & MersenneTwister.B;\n        y ^= (y << MersenneTwister.T) & MersenneTwister.C;\n        y ^= y >>> MersenneTwister.L;\n        if (++this.index >= MersenneTwister.N) {\n            this.states = MersenneTwister.twist(this.states);\n            this.index = 0;\n        }\n        return y >>> 0;\n    };\n    MersenneTwister.min = 0;\n    MersenneTwister.max = 0xffffffff;\n    MersenneTwister.N = 624;\n    MersenneTwister.M = 397;\n    MersenneTwister.R = 31;\n    MersenneTwister.A = 0x9908b0df;\n    MersenneTwister.F = 1812433253;\n    MersenneTwister.U = 11;\n    MersenneTwister.S = 7;\n    MersenneTwister.B = 0x9d2c5680;\n    MersenneTwister.T = 15;\n    MersenneTwister.C = 0xefc60000;\n    MersenneTwister.L = 18;\n    MersenneTwister.MASK_LOWER = Math.pow(2, MersenneTwister.R) - 1;\n    MersenneTwister.MASK_UPPER = Math.pow(2, MersenneTwister.R);\n    return MersenneTwister;\n}());\nexport default function (seed) {\n    return MersenneTwister.from(seed);\n}\n", "var XorShift128Plus = (function () {\n    function XorShift128Plus(s01, s00, s11, s10) {\n        this.s01 = s01;\n        this.s00 = s00;\n        this.s11 = s11;\n        this.s10 = s10;\n    }\n    XorShift128Plus.prototype.min = function () {\n        return -0x80000000;\n    };\n    XorShift128Plus.prototype.max = function () {\n        return 0x7fffffff;\n    };\n    XorShift128Plus.prototype.clone = function () {\n        return new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);\n    };\n    XorShift128Plus.prototype.next = function () {\n        var nextRng = new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);\n        var out = nextRng.unsafeNext();\n        return [out, nextRng];\n    };\n    XorShift128Plus.prototype.unsafeNext = function () {\n        var a0 = this.s00 ^ (this.s00 << 23);\n        var a1 = this.s01 ^ ((this.s01 << 23) | (this.s00 >>> 9));\n        var b0 = a0 ^ this.s10 ^ ((a0 >>> 18) | (a1 << 14)) ^ ((this.s10 >>> 5) | (this.s11 << 27));\n        var b1 = a1 ^ this.s11 ^ (a1 >>> 18) ^ (this.s11 >>> 5);\n        var out = (this.s00 + this.s10) | 0;\n        this.s01 = this.s11;\n        this.s00 = this.s10;\n        this.s11 = b1;\n        this.s10 = b0;\n        return out;\n    };\n    XorShift128Plus.prototype.jump = function () {\n        var nextRng = new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);\n        nextRng.unsafeJump();\n        return nextRng;\n    };\n    XorShift128Plus.prototype.unsafeJump = function () {\n        var ns01 = 0;\n        var ns00 = 0;\n        var ns11 = 0;\n        var ns10 = 0;\n        var jump = [0x635d2dff, 0x8a5cd789, 0x5c472f96, 0x121fd215];\n        for (var i = 0; i !== 4; ++i) {\n            for (var mask = 1; mask; mask <<= 1) {\n                if (jump[i] & mask) {\n                    ns01 ^= this.s01;\n                    ns00 ^= this.s00;\n                    ns11 ^= this.s11;\n                    ns10 ^= this.s10;\n                }\n                this.unsafeNext();\n            }\n        }\n        this.s01 = ns01;\n        this.s00 = ns00;\n        this.s11 = ns11;\n        this.s10 = ns10;\n    };\n    return XorShift128Plus;\n}());\nexport var xorshift128plus = function (seed) {\n    return new XorShift128Plus(-1, ~seed, seed | 0, 0);\n};\n", "var XoroShiro128Plus = (function () {\n    function XoroShiro128Plus(s01, s00, s11, s10) {\n        this.s01 = s01;\n        this.s00 = s00;\n        this.s11 = s11;\n        this.s10 = s10;\n    }\n    XoroShiro128Plus.prototype.min = function () {\n        return -0x80000000;\n    };\n    XoroShiro128Plus.prototype.max = function () {\n        return 0x7fffffff;\n    };\n    XoroShiro128Plus.prototype.clone = function () {\n        return new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);\n    };\n    XoroShiro128Plus.prototype.next = function () {\n        var nextRng = new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);\n        var out = nextRng.unsafeNext();\n        return [out, nextRng];\n    };\n    XoroShiro128Plus.prototype.unsafeNext = function () {\n        var out = (this.s00 + this.s10) | 0;\n        var a0 = this.s10 ^ this.s00;\n        var a1 = this.s11 ^ this.s01;\n        var s00 = this.s00;\n        var s01 = this.s01;\n        this.s00 = (s00 << 24) ^ (s01 >>> 8) ^ a0 ^ (a0 << 16);\n        this.s01 = (s01 << 24) ^ (s00 >>> 8) ^ a1 ^ ((a1 << 16) | (a0 >>> 16));\n        this.s10 = (a1 << 5) ^ (a0 >>> 27);\n        this.s11 = (a0 << 5) ^ (a1 >>> 27);\n        return out;\n    };\n    XoroShiro128Plus.prototype.jump = function () {\n        var nextRng = new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);\n        nextRng.unsafeJump();\n        return nextRng;\n    };\n    XoroShiro128Plus.prototype.unsafeJump = function () {\n        var ns01 = 0;\n        var ns00 = 0;\n        var ns11 = 0;\n        var ns10 = 0;\n        var jump = [0xd8f554a5, 0xdf900294, 0x4b3201fc, 0x170865df];\n        for (var i = 0; i !== 4; ++i) {\n            for (var mask = 1; mask; mask <<= 1) {\n                if (jump[i] & mask) {\n                    ns01 ^= this.s01;\n                    ns00 ^= this.s00;\n                    ns11 ^= this.s11;\n                    ns10 ^= this.s10;\n                }\n                this.unsafeNext();\n            }\n        }\n        this.s01 = ns01;\n        this.s00 = ns00;\n        this.s11 = ns11;\n        this.s10 = ns10;\n    };\n    return XoroShiro128Plus;\n}());\nexport var xoroshiro128plus = function (seed) {\n    return new XoroShiro128Plus(-1, ~seed, seed | 0, 0);\n};\n", "export function addArrayIntToNew(arrayIntA, arrayIntB) {\n    if (arrayIntA.sign !== arrayIntB.sign) {\n        return substractArrayIntToNew(arrayIntA, { sign: -arrayIntB.sign, data: arrayIntB.data });\n    }\n    var data = [];\n    var reminder = 0;\n    var dataA = arrayIntA.data;\n    var dataB = arrayIntB.data;\n    for (var indexA = dataA.length - 1, indexB = dataB.length - 1; indexA >= 0 || indexB >= 0; --indexA, --indexB) {\n        var vA = indexA >= 0 ? dataA[indexA] : 0;\n        var vB = indexB >= 0 ? dataB[indexB] : 0;\n        var current = vA + vB + reminder;\n        data.push(current >>> 0);\n        reminder = ~~(current / 0x100000000);\n    }\n    if (reminder !== 0) {\n        data.push(reminder);\n    }\n    return { sign: arrayIntA.sign, data: data.reverse() };\n}\nexport function addOneToPositiveArrayInt(arrayInt) {\n    arrayInt.sign = 1;\n    var data = arrayInt.data;\n    for (var index = data.length - 1; index >= 0; --index) {\n        if (data[index] === 0xffffffff) {\n            data[index] = 0;\n        }\n        else {\n            data[index] += 1;\n            return arrayInt;\n        }\n    }\n    data.unshift(1);\n    return arrayInt;\n}\nfunction isStrictlySmaller(dataA, dataB) {\n    var maxLength = Math.max(dataA.length, dataB.length);\n    for (var index = 0; index < maxLength; ++index) {\n        var indexA = index + dataA.length - maxLength;\n        var indexB = index + dataB.length - maxLength;\n        var vA = indexA >= 0 ? dataA[indexA] : 0;\n        var vB = indexB >= 0 ? dataB[indexB] : 0;\n        if (vA < vB)\n            return true;\n        if (vA > vB)\n            return false;\n    }\n    return false;\n}\nexport function substractArrayIntToNew(arrayIntA, arrayIntB) {\n    if (arrayIntA.sign !== arrayIntB.sign) {\n        return addArrayIntToNew(arrayIntA, { sign: -arrayIntB.sign, data: arrayIntB.data });\n    }\n    var dataA = arrayIntA.data;\n    var dataB = arrayIntB.data;\n    if (isStrictlySmaller(dataA, dataB)) {\n        var out = substractArrayIntToNew(arrayIntB, arrayIntA);\n        out.sign = -out.sign;\n        return out;\n    }\n    var data = [];\n    var reminder = 0;\n    for (var indexA = dataA.length - 1, indexB = dataB.length - 1; indexA >= 0 || indexB >= 0; --indexA, --indexB) {\n        var vA = indexA >= 0 ? dataA[indexA] : 0;\n        var vB = indexB >= 0 ? dataB[indexB] : 0;\n        var current = vA - vB - reminder;\n        data.push(current >>> 0);\n        reminder = current < 0 ? 1 : 0;\n    }\n    return { sign: arrayIntA.sign, data: data.reverse() };\n}\nexport function trimArrayIntInplace(arrayInt) {\n    var data = arrayInt.data;\n    var firstNonZero = 0;\n    for (; firstNonZero !== data.length && data[firstNonZero] === 0; ++firstNonZero) { }\n    if (firstNonZero === data.length) {\n        arrayInt.sign = 1;\n        arrayInt.data = [0];\n        return arrayInt;\n    }\n    data.splice(0, firstNonZero);\n    return arrayInt;\n}\nexport function fromNumberToArrayInt64(out, n) {\n    if (n < 0) {\n        var posN = -n;\n        out.sign = -1;\n        out.data[0] = ~~(posN / 0x100000000);\n        out.data[1] = posN >>> 0;\n    }\n    else {\n        out.sign = 1;\n        out.data[0] = ~~(n / 0x100000000);\n        out.data[1] = n >>> 0;\n    }\n    return out;\n}\nexport function substractArrayInt64(out, arrayIntA, arrayIntB) {\n    var lowA = arrayIntA.data[1];\n    var highA = arrayIntA.data[0];\n    var signA = arrayIntA.sign;\n    var lowB = arrayIntB.data[1];\n    var highB = arrayIntB.data[0];\n    var signB = arrayIntB.sign;\n    out.sign = 1;\n    if (signA === 1 && signB === -1) {\n        var low_1 = lowA + lowB;\n        var high = highA + highB + (low_1 > 0xffffffff ? 1 : 0);\n        out.data[0] = high >>> 0;\n        out.data[1] = low_1 >>> 0;\n        return out;\n    }\n    var lowFirst = lowA;\n    var highFirst = highA;\n    var lowSecond = lowB;\n    var highSecond = highB;\n    if (signA === -1) {\n        lowFirst = lowB;\n        highFirst = highB;\n        lowSecond = lowA;\n        highSecond = highA;\n    }\n    var reminderLow = 0;\n    var low = lowFirst - lowSecond;\n    if (low < 0) {\n        reminderLow = 1;\n        low = low >>> 0;\n    }\n    out.data[0] = highFirst - highSecond - reminderLow;\n    out.data[1] = low;\n    return out;\n}\n", "export function unsafeUniformIntDistributionInternal(rangeSize, rng) {\n    var MinRng = rng.min();\n    var NumValues = rng.max() - rng.min() + 1;\n    if (rangeSize <= NumValues) {\n        var nrng_1 = rng;\n        var MaxAllowed = NumValues - (NumValues % rangeSize);\n        while (true) {\n            var out = nrng_1.unsafeNext();\n            var deltaV = out - MinRng;\n            if (deltaV < MaxAllowed) {\n                return deltaV % rangeSize;\n            }\n        }\n    }\n    var FinalNumValues = NumValues * NumValues;\n    var NumIterations = 2;\n    while (FinalNumValues < rangeSize) {\n        FinalNumValues *= NumValues;\n        ++NumIterations;\n    }\n    var MaxAcceptedRandom = rangeSize * Math.floor((1 * FinalNumValues) / rangeSize);\n    var nrng = rng;\n    while (true) {\n        var value = 0;\n        for (var num = 0; num !== NumIterations; ++num) {\n            var out = nrng.unsafeNext();\n            value = NumValues * value + (out - MinRng);\n        }\n        if (value < MaxAcceptedRandom) {\n            var inDiff = value - rangeSize * Math.floor((1 * value) / rangeSize);\n            return inDiff;\n        }\n    }\n}\n", "import { unsafeUniformIntDistributionInternal } from './UnsafeUniformIntDistributionInternal.js';\nexport function unsafeUniformArrayIntDistributionInternal(out, rangeSize, rng) {\n    var rangeLength = rangeSize.length;\n    while (true) {\n        for (var index = 0; index !== rangeLength; ++index) {\n            var indexRangeSize = index === 0 ? rangeSize[0] + 1 : 0x100000000;\n            var g = unsafeUniformIntDistributionInternal(indexRangeSize, rng);\n            out[index] = g;\n        }\n        for (var index = 0; index !== rangeLength; ++index) {\n            var current = out[index];\n            var currentInRange = rangeSize[index];\n            if (current < currentInRange) {\n                return out;\n            }\n            else if (current > currentInRange) {\n                break;\n            }\n        }\n    }\n}\n", "import { addArrayIntToNew, addOneToPositiveArrayInt, substractArrayIntToNew, trimArrayIntInplace, } from './internals/ArrayInt.js';\nimport { unsafeUniformArrayIntDistributionInternal } from './internals/UnsafeUniformArrayIntDistributionInternal.js';\nexport function unsafeUniformArrayIntDistribution(from, to, rng) {\n    var rangeSize = trimArrayIntInplace(addOneToPositiveArrayInt(substractArrayIntToNew(to, from)));\n    var emptyArrayIntData = rangeSize.data.slice(0);\n    var g = unsafeUniformArrayIntDistributionInternal(emptyArrayIntData, rangeSize.data, rng);\n    return trimArrayIntInplace(addArrayIntToNew({ sign: 1, data: g }, from));\n}\n", "import { unsafeUniformArrayIntDistribution } from './UnsafeUniformArrayIntDistribution.js';\nfunction uniformArrayIntDistribution(from, to, rng) {\n    if (rng != null) {\n        var nextRng = rng.clone();\n        return [unsafeUniformArrayIntDistribution(from, to, nextRng), nextRng];\n    }\n    return function (rng) {\n        var nextRng = rng.clone();\n        return [unsafeUniformArrayIntDistribution(from, to, nextRng), nextRng];\n    };\n}\nexport { uniformArrayIntDistribution };\n", "export function unsafeUniformBigIntDistribution(from, to, rng) {\n    var diff = to - from + BigInt(1);\n    var MinRng = BigInt(rng.min());\n    var NumValues = BigInt(rng.max() - rng.min() + 1);\n    var FinalNumValues = NumValues;\n    var NumIterations = BigInt(1);\n    while (FinalNumValues < diff) {\n        FinalNumValues *= NumValues;\n        ++NumIterations;\n    }\n    var MaxAcceptedRandom = FinalNumValues - (FinalNumValues % diff);\n    while (true) {\n        var value = BigInt(0);\n        for (var num = BigInt(0); num !== NumIterations; ++num) {\n            var out = rng.unsafeNext();\n            value = NumValues * value + (BigInt(out) - MinRng);\n        }\n        if (value < MaxAcceptedRandom) {\n            var inDiff = value % diff;\n            return inDiff + from;\n        }\n    }\n}\n", "import { unsafeUniformBigIntDistribution } from './UnsafeUniformBigIntDistribution.js';\nfunction uniformBigIntDistribution(from, to, rng) {\n    if (rng != null) {\n        var nextRng = rng.clone();\n        return [unsafeUniformBigIntDistribution(from, to, nextRng), nextRng];\n    }\n    return function (rng) {\n        var nextRng = rng.clone();\n        return [unsafeUniformBigIntDistribution(from, to, nextRng), nextRng];\n    };\n}\nexport { uniformBigIntDistribution };\n", "import { unsafeUniformIntDistributionInternal } from './internals/UnsafeUniformIntDistributionInternal.js';\nimport { fromNumberToArrayInt64, substractArrayInt64 } from './internals/ArrayInt.js';\nimport { unsafeUniformArrayIntDistributionInternal } from './internals/UnsafeUniformArrayIntDistributionInternal.js';\nvar sharedA = { sign: 1, data: [0, 0] };\nvar sharedB = { sign: 1, data: [0, 0] };\nvar sharedC = { sign: 1, data: [0, 0] };\nvar sharedData = [0, 0];\nfunction uniformLargeIntInternal(from, to, rangeSize, rng) {\n    var rangeSizeArrayIntValue = rangeSize <= Number.MAX_SAFE_INTEGER\n        ? fromNumberToArrayInt64(sharedC, rangeSize)\n        : substractArrayInt64(sharedC, fromNumberToArrayInt64(sharedA, to), fromNumberToArrayInt64(sharedB, from));\n    if (rangeSizeArrayIntValue.data[1] === 0xffffffff) {\n        rangeSizeArrayIntValue.data[0] += 1;\n        rangeSizeArrayIntValue.data[1] = 0;\n    }\n    else {\n        rangeSizeArrayIntValue.data[1] += 1;\n    }\n    unsafeUniformArrayIntDistributionInternal(sharedData, rangeSizeArrayIntValue.data, rng);\n    return sharedData[0] * 0x100000000 + sharedData[1] + from;\n}\nexport function unsafeUniformIntDistribution(from, to, rng) {\n    var rangeSize = to - from;\n    if (rangeSize <= 0xffffffff) {\n        var g = unsafeUniformIntDistributionInternal(rangeSize + 1, rng);\n        return g + from;\n    }\n    return uniformLargeIntInternal(from, to, rangeSize, rng);\n}\n", "import { unsafeUniformIntDistribution } from './UnsafeUniformIntDistribution.js';\nfunction uniformIntDistribution(from, to, rng) {\n    if (rng != null) {\n        var nextRng = rng.clone();\n        return [unsafeUniformIntDistribution(from, to, nextRng), nextRng];\n    }\n    return function (rng) {\n        var nextRng = rng.clone();\n        return [unsafeUniformIntDistribution(from, to, nextRng), nextRng];\n    };\n}\nexport { uniformIntDistribution };\n", "import * as prand from './pure-rand-default.js';\nexport default prand;\nexport * from './pure-rand-default.js';\n", "export var VerbosityLevel;\n(function (VerbosityLevel) {\n    VerbosityLevel[VerbosityLevel[\"None\"] = 0] = \"None\";\n    VerbosityLevel[VerbosityLevel[\"Verbose\"] = 1] = \"Verbose\";\n    VerbosityLevel[VerbosityLevel[\"VeryVerbose\"] = 2] = \"VeryVerbose\";\n})(VerbosityLevel || (VerbosityLevel = {}));\n", "import prand from 'pure-rand';\nimport { VerbosityLevel } from './VerbosityLevel.js';\nexport class QualifiedParameters {\n    constructor(op) {\n        const p = op || {};\n        this.seed = QualifiedParameters.readSeed(p);\n        this.randomType = QualifiedParameters.readRandomType(p);\n        this.numRuns = QualifiedParameters.readNumRuns(p);\n        this.verbose = QualifiedParameters.readVerbose(p);\n        this.maxSkipsPerRun = QualifiedParameters.readOrDefault(p, 'maxSkipsPerRun', 100);\n        this.timeout = QualifiedParameters.readOrDefault(p, 'timeout', null);\n        this.skipAllAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'skipAllAfterTimeLimit', null);\n        this.interruptAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'interruptAfterTimeLimit', null);\n        this.markInterruptAsFailure = QualifiedParameters.readBoolean(p, 'markInterruptAsFailure');\n        this.skipEqualValues = QualifiedParameters.readBoolean(p, 'skipEqualValues');\n        this.ignoreEqualValues = QualifiedParameters.readBoolean(p, 'ignoreEqualValues');\n        this.logger = QualifiedParameters.readOrDefault(p, 'logger', (v) => {\n            console.log(v);\n        });\n        this.path = QualifiedParameters.readOrDefault(p, 'path', '');\n        this.unbiased = QualifiedParameters.readBoolean(p, 'unbiased');\n        this.examples = QualifiedParameters.readOrDefault(p, 'examples', []);\n        this.endOnFailure = QualifiedParameters.readBoolean(p, 'endOnFailure');\n        this.reporter = QualifiedParameters.readOrDefault(p, 'reporter', null);\n        this.asyncReporter = QualifiedParameters.readOrDefault(p, 'asyncReporter', null);\n    }\n    toParameters() {\n        const orUndefined = (value) => (value !== null ? value : undefined);\n        return {\n            seed: this.seed,\n            randomType: this.randomType,\n            numRuns: this.numRuns,\n            maxSkipsPerRun: this.maxSkipsPerRun,\n            timeout: orUndefined(this.timeout),\n            skipAllAfterTimeLimit: orUndefined(this.skipAllAfterTimeLimit),\n            interruptAfterTimeLimit: orUndefined(this.interruptAfterTimeLimit),\n            markInterruptAsFailure: this.markInterruptAsFailure,\n            skipEqualValues: this.skipEqualValues,\n            ignoreEqualValues: this.ignoreEqualValues,\n            path: this.path,\n            logger: this.logger,\n            unbiased: this.unbiased,\n            verbose: this.verbose,\n            examples: this.examples,\n            endOnFailure: this.endOnFailure,\n            reporter: orUndefined(this.reporter),\n            asyncReporter: orUndefined(this.asyncReporter),\n        };\n    }\n    static read(op) {\n        return new QualifiedParameters(op);\n    }\n}\nQualifiedParameters.readSeed = (p) => {\n    if (p.seed == null)\n        return Date.now() ^ (Math.random() * 0x100000000);\n    const seed32 = p.seed | 0;\n    if (p.seed === seed32)\n        return seed32;\n    const gap = p.seed - seed32;\n    return seed32 ^ (gap * 0x100000000);\n};\nQualifiedParameters.readRandomType = (p) => {\n    if (p.randomType == null)\n        return prand.xorshift128plus;\n    if (typeof p.randomType === 'string') {\n        switch (p.randomType) {\n            case 'mersenne':\n                return prand.mersenne;\n            case 'congruential':\n                return prand.congruential;\n            case 'congruential32':\n                return prand.congruential32;\n            case 'xorshift128plus':\n                return prand.xorshift128plus;\n            case 'xoroshiro128plus':\n                return prand.xoroshiro128plus;\n            default:\n                throw new Error(`Invalid random specified: '${p.randomType}'`);\n        }\n    }\n    return p.randomType;\n};\nQualifiedParameters.readNumRuns = (p) => {\n    const defaultValue = 100;\n    if (p.numRuns != null)\n        return p.numRuns;\n    if (p.num_runs != null)\n        return p.num_runs;\n    return defaultValue;\n};\nQualifiedParameters.readVerbose = (p) => {\n    if (p.verbose == null)\n        return VerbosityLevel.None;\n    if (typeof p.verbose === 'boolean') {\n        return p.verbose === true ? VerbosityLevel.Verbose : VerbosityLevel.None;\n    }\n    if (p.verbose <= VerbosityLevel.None) {\n        return VerbosityLevel.None;\n    }\n    if (p.verbose >= VerbosityLevel.VeryVerbose) {\n        return VerbosityLevel.VeryVerbose;\n    }\n    return p.verbose | 0;\n};\nQualifiedParameters.readBoolean = (p, key) => p[key] === true;\nQualifiedParameters.readOrDefault = (p, key, defaultValue) => {\n    const value = p[key];\n    return value != null ? value : defaultValue;\n};\n", "import { PreconditionFailure } from '../precondition/PreconditionFailure.js';\nexport class SkipAfterProperty {\n    constructor(property, getTime, timeLimit, interruptExecution) {\n        this.property = property;\n        this.getTime = getTime;\n        this.interruptExecution = interruptExecution;\n        this.isAsync = () => this.property.isAsync();\n        this.generate = (mrng, runId) => this.property.generate(mrng, runId);\n        this.run = (v) => {\n            if (this.getTime() >= this.skipAfterTime) {\n                const preconditionFailure = new PreconditionFailure(this.interruptExecution);\n                if (this.isAsync()) {\n                    return Promise.resolve(preconditionFailure);\n                }\n                else {\n                    return preconditionFailure;\n                }\n            }\n            return this.property.run(v);\n        };\n        this.skipAfterTime = this.getTime() + timeLimit;\n    }\n}\n", "const timeoutAfter = (timeMs) => {\n    let timeoutHandle = null;\n    const promise = new Promise((resolve) => {\n        timeoutHandle = setTimeout(() => {\n            resolve(`Property timeout: exceeded limit of ${timeMs} milliseconds`);\n        }, timeMs);\n    });\n    return {\n        clear: () => clearTimeout(timeoutHandle),\n        promise,\n    };\n};\nexport class TimeoutProperty {\n    constructor(property, timeMs) {\n        this.property = property;\n        this.timeMs = timeMs;\n        this.isAsync = () => true;\n    }\n    generate(mrng, runId) {\n        return this.property.generate(mrng, runId);\n    }\n    async run(v) {\n        const t = timeoutAfter(this.timeMs);\n        const propRun = Promise.race([this.property.run(v), t.promise]);\n        propRun.then(t.clear, t.clear);\n        return propRun;\n    }\n}\n", "export class UnbiasedProperty {\n    constructor(property) {\n        this.property = property;\n        this.isAsync = () => this.property.isAsync();\n        this.generate = (mrng, _runId) => this.property.generate(mrng);\n        this.run = (v) => this.property.run(v);\n    }\n}\n", "export const toStringMethod = Symbol('fast-check/toStringMethod');\nexport function hasToStringMethod(instance) {\n    return (instance !== null &&\n        (typeof instance === 'object' || typeof instance === 'function') &&\n        toStringMethod in instance &&\n        typeof instance[toStringMethod] === 'function');\n}\nexport const asyncToStringMethod = Symbol('fast-check/asyncToStringMethod');\nexport function hasAsyncToStringMethod(instance) {\n    return (instance !== null &&\n        (typeof instance === 'object' || typeof instance === 'function') &&\n        asyncToStringMethod in instance &&\n        typeof instance[asyncToStringMethod] === 'function');\n}\nconst findSymbolNameRegex = /^Symbol\\((.*)\\)$/;\nfunction getSymbolDescription(s) {\n    if (s.description !== undefined)\n        return s.description;\n    const m = findSymbolNameRegex.exec(String(s));\n    return m && m[1].length ? m[1] : null;\n}\nfunction stringifyNumber(numValue) {\n    switch (numValue) {\n        case 0:\n            return 1 / numValue === Number.NEGATIVE_INFINITY ? '-0' : '0';\n        case Number.NEGATIVE_INFINITY:\n            return 'Number.NEGATIVE_INFINITY';\n        case Number.POSITIVE_INFINITY:\n            return 'Number.POSITIVE_INFINITY';\n        default:\n            return numValue === numValue ? String(numValue) : 'Number.NaN';\n    }\n}\nfunction isSparseArray(arr) {\n    let previousNumberedIndex = -1;\n    for (const index in arr) {\n        const numberedIndex = Number(index);\n        if (numberedIndex !== previousNumberedIndex + 1)\n            return true;\n        previousNumberedIndex = numberedIndex;\n    }\n    return previousNumberedIndex + 1 !== arr.length;\n}\nexport function stringifyInternal(value, previousValues, getAsyncContent) {\n    const currentValues = previousValues.concat([value]);\n    if (typeof value === 'object') {\n        if (previousValues.indexOf(value) !== -1) {\n            return '[cyclic]';\n        }\n    }\n    if (hasAsyncToStringMethod(value)) {\n        const content = getAsyncContent(value);\n        if (content.state === 'fulfilled') {\n            return content.value;\n        }\n    }\n    if (hasToStringMethod(value)) {\n        try {\n            return value[toStringMethod]();\n        }\n        catch (err) {\n        }\n    }\n    switch (Object.prototype.toString.call(value)) {\n        case '[object Array]': {\n            const arr = value;\n            if (arr.length >= 50 && isSparseArray(arr)) {\n                const assignments = [];\n                for (const index in arr) {\n                    if (!Number.isNaN(Number(index)))\n                        assignments.push(`${index}:${stringifyInternal(arr[index], currentValues, getAsyncContent)}`);\n                }\n                return assignments.length !== 0\n                    ? `Object.assign(Array(${arr.length}),{${assignments.join(',')}})`\n                    : `Array(${arr.length})`;\n            }\n            const stringifiedArray = arr.map((v) => stringifyInternal(v, currentValues, getAsyncContent)).join(',');\n            return arr.length === 0 || arr.length - 1 in arr ? `[${stringifiedArray}]` : `[${stringifiedArray},]`;\n        }\n        case '[object BigInt]':\n            return `${value}n`;\n        case '[object Boolean]':\n            return typeof value === 'boolean' ? JSON.stringify(value) : `new Boolean(${JSON.stringify(value)})`;\n        case '[object Date]': {\n            const d = value;\n            return Number.isNaN(d.getTime()) ? `new Date(NaN)` : `new Date(${JSON.stringify(d.toISOString())})`;\n        }\n        case '[object Map]':\n            return `new Map(${stringifyInternal(Array.from(value), currentValues, getAsyncContent)})`;\n        case '[object Null]':\n            return `null`;\n        case '[object Number]':\n            return typeof value === 'number' ? stringifyNumber(value) : `new Number(${stringifyNumber(Number(value))})`;\n        case '[object Object]': {\n            try {\n                const toStringAccessor = value.toString;\n                if (typeof toStringAccessor === 'function' && toStringAccessor !== Object.prototype.toString) {\n                    return value.toString();\n                }\n            }\n            catch (err) {\n                return '[object Object]';\n            }\n            const mapper = (k) => `${k === '__proto__'\n                ? '[\"__proto__\"]'\n                : typeof k === 'symbol'\n                    ? `[${stringifyInternal(k, currentValues, getAsyncContent)}]`\n                    : JSON.stringify(k)}:${stringifyInternal(value[k], currentValues, getAsyncContent)}`;\n            const stringifiedProperties = [\n                ...Object.keys(value).map(mapper),\n                ...Object.getOwnPropertySymbols(value)\n                    .filter((s) => {\n                    const descriptor = Object.getOwnPropertyDescriptor(value, s);\n                    return descriptor && descriptor.enumerable;\n                })\n                    .map(mapper),\n            ];\n            const rawRepr = '{' + stringifiedProperties.join(',') + '}';\n            if (Object.getPrototypeOf(value) === null) {\n                return rawRepr === '{}' ? 'Object.create(null)' : `Object.assign(Object.create(null),${rawRepr})`;\n            }\n            return rawRepr;\n        }\n        case '[object Set]':\n            return `new Set(${stringifyInternal(Array.from(value), currentValues, getAsyncContent)})`;\n        case '[object String]':\n            return typeof value === 'string' ? JSON.stringify(value) : `new String(${JSON.stringify(value)})`;\n        case '[object Symbol]': {\n            const s = value;\n            if (Symbol.keyFor(s) !== undefined) {\n                return `Symbol.for(${JSON.stringify(Symbol.keyFor(s))})`;\n            }\n            const desc = getSymbolDescription(s);\n            if (desc === null) {\n                return 'Symbol()';\n            }\n            const knownSymbol = desc.startsWith('Symbol.') && Symbol[desc.substring(7)];\n            return s === knownSymbol ? desc : `Symbol(${JSON.stringify(desc)})`;\n        }\n        case '[object Promise]': {\n            const promiseContent = getAsyncContent(value);\n            switch (promiseContent.state) {\n                case 'fulfilled':\n                    return `Promise.resolve(${stringifyInternal(promiseContent.value, currentValues, getAsyncContent)})`;\n                case 'rejected':\n                    return `Promise.reject(${stringifyInternal(promiseContent.value, currentValues, getAsyncContent)})`;\n                case 'pending':\n                    return `new Promise(() => {/*pending*/})`;\n                case 'unknown':\n                default:\n                    return `new Promise(() => {/*unknown*/})`;\n            }\n        }\n        case '[object Error]':\n            if (value instanceof Error) {\n                return `new Error(${stringifyInternal(value.message, currentValues, getAsyncContent)})`;\n            }\n            break;\n        case '[object Undefined]':\n            return `undefined`;\n        case '[object Int8Array]':\n        case '[object Uint8Array]':\n        case '[object Uint8ClampedArray]':\n        case '[object Int16Array]':\n        case '[object Uint16Array]':\n        case '[object Int32Array]':\n        case '[object Uint32Array]':\n        case '[object Float32Array]':\n        case '[object Float64Array]':\n        case '[object BigInt64Array]':\n        case '[object BigUint64Array]': {\n            if (typeof Buffer !== 'undefined' && typeof Buffer.isBuffer === 'function' && Buffer.isBuffer(value)) {\n                return `Buffer.from(${stringifyInternal(Array.from(value.values()), currentValues, getAsyncContent)})`;\n            }\n            const valuePrototype = Object.getPrototypeOf(value);\n            const className = valuePrototype && valuePrototype.constructor && valuePrototype.constructor.name;\n            if (typeof className === 'string') {\n                const typedArray = value;\n                const valuesFromTypedArr = typedArray.values();\n                return `${className}.from(${stringifyInternal(Array.from(valuesFromTypedArr), currentValues, getAsyncContent)})`;\n            }\n            break;\n        }\n    }\n    try {\n        return value.toString();\n    }\n    catch (_a) {\n        return Object.prototype.toString.call(value);\n    }\n}\nexport function stringify(value) {\n    return stringifyInternal(value, [], () => ({ state: 'unknown', value: undefined }));\n}\nexport function possiblyAsyncStringify(value) {\n    const stillPendingMarker = Symbol();\n    const pendingPromisesForCache = [];\n    const cache = new Map();\n    function createDelay0() {\n        let handleId = null;\n        const cancel = () => {\n            if (handleId !== null) {\n                clearTimeout(handleId);\n            }\n        };\n        const delay = new Promise((resolve) => {\n            handleId = setTimeout(() => {\n                handleId = null;\n                resolve(stillPendingMarker);\n            }, 0);\n        });\n        return { delay, cancel };\n    }\n    const unknownState = { state: 'unknown', value: undefined };\n    const getAsyncContent = function getAsyncContent(data) {\n        const cacheKey = data;\n        if (cache.has(cacheKey)) {\n            return cache.get(cacheKey);\n        }\n        const delay0 = createDelay0();\n        const p = asyncToStringMethod in data\n            ? Promise.resolve().then(() => data[asyncToStringMethod]())\n            : data;\n        p.catch(() => { });\n        pendingPromisesForCache.push(Promise.race([p, delay0.delay]).then((successValue) => {\n            if (successValue === stillPendingMarker)\n                cache.set(cacheKey, { state: 'pending', value: undefined });\n            else\n                cache.set(cacheKey, { state: 'fulfilled', value: successValue });\n            delay0.cancel();\n        }, (errorValue) => {\n            cache.set(cacheKey, { state: 'rejected', value: errorValue });\n            delay0.cancel();\n        }));\n        cache.set(cacheKey, unknownState);\n        return unknownState;\n    };\n    function loop() {\n        const stringifiedValue = stringifyInternal(value, [], getAsyncContent);\n        if (pendingPromisesForCache.length === 0) {\n            return stringifiedValue;\n        }\n        return Promise.all(pendingPromisesForCache.splice(0)).then(loop);\n    }\n    return loop();\n}\nexport async function asyncStringify(value) {\n    return Promise.resolve(possiblyAsyncStringify(value));\n}\n", "import { stringify } from '../../utils/stringify.js';\nimport { PreconditionFailure } from '../precondition/PreconditionFailure.js';\nfunction fromSyncCached(cachedValue) {\n    return cachedValue === null ? new PreconditionFailure() : cachedValue;\n}\nfunction fromCached(...data) {\n    if (data[1])\n        return data[0].then(fromSyncCached);\n    return fromSyncCached(data[0]);\n}\nfunction fromCachedUnsafe(cachedValue, isAsync) {\n    return fromCached(cachedValue, isAsync);\n}\nexport class IgnoreEqualValuesProperty {\n    constructor(property, skipRuns) {\n        this.property = property;\n        this.skipRuns = skipRuns;\n        this.coveredCases = new Map();\n        this.isAsync = () => this.property.isAsync();\n        this.generate = (mrng, runId) => this.property.generate(mrng, runId);\n        this.run = (v) => {\n            const stringifiedValue = stringify(v);\n            if (this.coveredCases.has(stringifiedValue)) {\n                const lastOutput = this.coveredCases.get(stringifiedValue);\n                if (!this.skipRuns) {\n                    return lastOutput;\n                }\n                return fromCachedUnsafe(lastOutput, this.property.isAsync());\n            }\n            const out = this.property.run(v);\n            this.coveredCases.set(stringifiedValue, out);\n            return out;\n        };\n    }\n}\n", "import { SkipAfterProperty } from '../property/SkipAfterProperty.js';\nimport { TimeoutProperty } from '../property/TimeoutProperty.js';\nimport { UnbiasedProperty } from '../property/UnbiasedProperty.js';\nimport { IgnoreEqualValuesProperty } from '../property/IgnoreEqualValuesProperty.js';\nexport function decorateProperty(rawProperty, qParams) {\n    let prop = rawProperty;\n    if (rawProperty.isAsync() && qParams.timeout != null) {\n        prop = new TimeoutProperty(prop, qParams.timeout);\n    }\n    if (qParams.unbiased) {\n        prop = new UnbiasedProperty(prop);\n    }\n    if (qParams.skipAllAfterTimeLimit != null) {\n        prop = new SkipAfterProperty(prop, Date.now, qParams.skipAllAfterTimeLimit, false);\n    }\n    if (qParams.interruptAfterTimeLimit != null) {\n        prop = new SkipAfterProperty(prop, Date.now, qParams.interruptAfterTimeLimit, true);\n    }\n    if (qParams.skipEqualValues) {\n        prop = new IgnoreEqualValuesProperty(prop, true);\n    }\n    if (qParams.ignoreEqualValues) {\n        prop = new IgnoreEqualValuesProperty(prop, false);\n    }\n    return prop;\n}\n", "export var ExecutionStatus;\n(function (ExecutionStatus) {\n    ExecutionStatus[ExecutionStatus[\"Success\"] = 0] = \"Success\";\n    ExecutionStatus[ExecutionStatus[\"Skipped\"] = -1] = \"Skipped\";\n    ExecutionStatus[ExecutionStatus[\"Failure\"] = 1] = \"Failure\";\n})(ExecutionStatus || (ExecutionStatus = {}));\n", "import { VerbosityLevel } from '../configuration/VerbosityLevel.js';\nimport { ExecutionStatus } from './ExecutionStatus.js';\nexport class RunExecution {\n    constructor(verbosity, interruptedAsFailure) {\n        this.verbosity = verbosity;\n        this.interruptedAsFailure = interruptedAsFailure;\n        this.isSuccess = () => this.pathToFailure == null;\n        this.firstFailure = () => (this.pathToFailure ? +this.pathToFailure.split(':')[0] : -1);\n        this.numShrinks = () => (this.pathToFailure ? this.pathToFailure.split(':').length - 1 : 0);\n        this.rootExecutionTrees = [];\n        this.currentLevelExecutionTrees = this.rootExecutionTrees;\n        this.failure = null;\n        this.numSkips = 0;\n        this.numSuccesses = 0;\n        this.interrupted = false;\n    }\n    appendExecutionTree(status, value) {\n        const currentTree = { status, value, children: [] };\n        this.currentLevelExecutionTrees.push(currentTree);\n        return currentTree;\n    }\n    fail(value, id, message) {\n        if (this.verbosity >= VerbosityLevel.Verbose) {\n            const currentTree = this.appendExecutionTree(ExecutionStatus.Failure, value);\n            this.currentLevelExecutionTrees = currentTree.children;\n        }\n        if (this.pathToFailure == null)\n            this.pathToFailure = `${id}`;\n        else\n            this.pathToFailure += `:${id}`;\n        this.value = value;\n        this.failure = message;\n    }\n    skip(value) {\n        if (this.verbosity >= VerbosityLevel.VeryVerbose) {\n            this.appendExecutionTree(ExecutionStatus.Skipped, value);\n        }\n        if (this.pathToFailure == null) {\n            ++this.numSkips;\n        }\n    }\n    success(value) {\n        if (this.verbosity >= VerbosityLevel.VeryVerbose) {\n            this.appendExecutionTree(ExecutionStatus.Success, value);\n        }\n        if (this.pathToFailure == null) {\n            ++this.numSuccesses;\n        }\n    }\n    interrupt() {\n        this.interrupted = true;\n    }\n    extractFailures() {\n        if (this.isSuccess()) {\n            return [];\n        }\n        const failures = [];\n        let cursor = this.rootExecutionTrees;\n        while (cursor.length > 0 && cursor[cursor.length - 1].status === ExecutionStatus.Failure) {\n            const failureTree = cursor[cursor.length - 1];\n            failures.push(failureTree.value);\n            cursor = failureTree.children;\n        }\n        return failures;\n    }\n    toRunDetails(seed, basePath, maxSkips, qParams) {\n        if (!this.isSuccess()) {\n            return {\n                failed: true,\n                interrupted: this.interrupted,\n                numRuns: this.firstFailure() + 1 - this.numSkips,\n                numSkips: this.numSkips,\n                numShrinks: this.numShrinks(),\n                seed,\n                counterexample: this.value,\n                counterexamplePath: RunExecution.mergePaths(basePath, this.pathToFailure),\n                error: this.failure,\n                failures: this.extractFailures(),\n                executionSummary: this.rootExecutionTrees,\n                verbose: this.verbosity,\n                runConfiguration: qParams.toParameters(),\n            };\n        }\n        const failed = this.numSkips > maxSkips || (this.interrupted && this.interruptedAsFailure);\n        return {\n            failed,\n            interrupted: this.interrupted,\n            numRuns: this.numSuccesses,\n            numSkips: this.numSkips,\n            numShrinks: 0,\n            seed,\n            counterexample: null,\n            counterexamplePath: null,\n            error: null,\n            failures: [],\n            executionSummary: this.rootExecutionTrees,\n            verbose: this.verbosity,\n            runConfiguration: qParams.toParameters(),\n        };\n    }\n}\nRunExecution.mergePaths = (offsetPath, path) => {\n    if (offsetPath.length === 0)\n        return path;\n    const offsetItems = offsetPath.split(':');\n    const remainingItems = path.split(':');\n    const middle = +offsetItems[offsetItems.length - 1] + +remainingItems[0];\n    return [...offsetItems.slice(0, offsetItems.length - 1), `${middle}`, ...remainingItems.slice(1)].join(':');\n};\n", "import { RunExecution } from './reporter/RunExecution.js';\nexport class RunnerIterator {\n    constructor(sourceValues, verbose, interruptedAsFailure) {\n        this.sourceValues = sourceValues;\n        this.runExecution = new RunExecution(verbose, interruptedAsFailure);\n        this.currentIdx = -1;\n        this.nextValues = sourceValues;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        const nextValue = this.nextValues.next();\n        if (nextValue.done || this.runExecution.interrupted) {\n            return { done: true, value: undefined };\n        }\n        this.currentShrinkable = nextValue.value;\n        ++this.currentIdx;\n        return { done: false, value: nextValue.value.value_ };\n    }\n    handleResult(result) {\n        if (result != null && typeof result === 'string') {\n            this.runExecution.fail(this.currentShrinkable.value_, this.currentIdx, result);\n            this.currentIdx = -1;\n            this.nextValues = this.currentShrinkable.shrink();\n        }\n        else if (result != null) {\n            if (!result.interruptExecution) {\n                this.runExecution.skip(this.currentShrinkable.value_);\n                this.sourceValues.skippedOne();\n            }\n            else {\n                this.runExecution.interrupt();\n            }\n        }\n        else {\n            this.runExecution.success(this.currentShrinkable.value_);\n        }\n    }\n}\n", "export class SourceValuesIterator {\n    constructor(initialValues, maxInitialIterations, remainingSkips) {\n        this.initialValues = initialValues;\n        this.maxInitialIterations = maxInitialIterations;\n        this.remainingSkips = remainingSkips;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        if (--this.maxInitialIterations !== -1 && this.remainingSkips >= 0) {\n            const n = this.initialValues.next();\n            if (!n.done)\n                return { value: n.value(), done: false };\n        }\n        return { value: undefined, done: true };\n    }\n    skippedOne() {\n        --this.remainingSkips;\n        ++this.maxInitialIterations;\n    }\n}\n", "class ConvertedRandomGenerator {\n    constructor(rng) {\n        this.rng = rng;\n        if (typeof this.rng.jump === 'function') {\n            this.jump = function jump() {\n                const out = this.jump();\n                return new ConvertedRandomGenerator(out);\n            };\n            this.unsafeJump = function unsafeJump() {\n                const out = this.jump();\n                this.rng = out;\n            };\n        }\n    }\n    min() {\n        return this.rng.min();\n    }\n    max() {\n        return this.rng.max();\n    }\n    clone() {\n        return new ConvertedRandomGenerator(this.rng);\n    }\n    next() {\n        const out = this.rng.next();\n        return [out[0], new ConvertedRandomGenerator(out[1])];\n    }\n    unsafeNext() {\n        const out = this.rng.next();\n        this.rng = out[1];\n        return out[0];\n    }\n}\nexport function convertToRandomGenerator(rng) {\n    if ('clone' in rng && 'unsafeNext' in rng) {\n        return rng;\n    }\n    return new ConvertedRandomGenerator(rng);\n}\n", "import { unsafeUniformArrayIntDistribution, unsafeUniformBigIntDistribution, unsafeUniformIntDistribution, } from 'pure-rand';\nimport { convertToRandomGenerator } from './PureRandom.js';\nexport class Random {\n    constructor(sourceRng) {\n        this.internalRng = convertToRandomGenerator(sourceRng).clone();\n    }\n    clone() {\n        return new Random(this.internalRng);\n    }\n    next(bits) {\n        return unsafeUniformIntDistribution(0, (1 << bits) - 1, this.internalRng);\n    }\n    nextBoolean() {\n        return unsafeUniformIntDistribution(0, 1, this.internalRng) == 1;\n    }\n    nextInt(min, max) {\n        return unsafeUniformIntDistribution(min == null ? Random.MIN_INT : min, max == null ? Random.MAX_INT : max, this.internalRng);\n    }\n    nextBigInt(min, max) {\n        return unsafeUniformBigIntDistribution(min, max, this.internalRng);\n    }\n    nextArrayInt(min, max) {\n        return unsafeUniformArrayIntDistribution(min, max, this.internalRng);\n    }\n    nextDouble() {\n        const a = this.next(26);\n        const b = this.next(27);\n        return (a * Random.DBL_FACTOR + b) * Random.DBL_DIVISOR;\n    }\n}\nRandom.MIN_INT = 0x80000000 | 0;\nRandom.MAX_INT = 0x7fffffff | 0;\nRandom.DBL_FACTOR = Math.pow(2, 27);\nRandom.DBL_DIVISOR = Math.pow(2, -53);\n", "import { skipN } from 'pure-rand';\nimport { Random } from '../../random/generator/Random.js';\nimport { Shrinkable } from '../arbitrary/definition/Shrinkable.js';\nimport { convertToRandomGenerator } from '../../random/generator/PureRandom.js';\nfunction lazyGenerate(generator, rng, idx) {\n    return () => generator.generate(new Random(rng), idx);\n}\nexport function* toss(generator, seed, random, examples) {\n    yield* examples.map((e) => () => new Shrinkable(e));\n    let idx = 0;\n    let rng = convertToRandomGenerator(random(seed));\n    for (;;) {\n        rng = rng.jump ? rng.jump() : skipN(rng, 42);\n        yield lazyGenerate(generator, rng, idx++);\n    }\n}\n", "import { stream } from '../../../stream/Stream.js';\nexport function pathWalk(path, initialValues) {\n    let values = stream(initialValues);\n    const segments = path.split(':').map((text) => +text);\n    if (segments.length === 0)\n        return values;\n    if (!segments.every((v) => !Number.isNaN(v))) {\n        throw new Error(`Unable to replay, got invalid path=${path}`);\n    }\n    values = values.drop(segments[0]);\n    for (const s of segments.slice(1)) {\n        const valueToShrink = values.getNthOrLast(0);\n        if (valueToShrink == null) {\n            throw new Error(`Unable to replay, got wrong path=${path}`);\n        }\n        values = valueToShrink.shrink().drop(s);\n    }\n    return values;\n}\n", "import { stringify, possiblyAsyncStringify } from '../../../utils/stringify.js';\nimport { VerbosityLevel } from '../configuration/VerbosityLevel.js';\nimport { ExecutionStatus } from '../reporter/ExecutionStatus.js';\nfunction formatHints(hints) {\n    if (hints.length === 1) {\n        return `Hint: ${hints[0]}`;\n    }\n    return hints.map((h, idx) => `Hint (${idx + 1}): ${h}`).join('\\n');\n}\nfunction formatFailures(failures, stringifyOne) {\n    return `Encountered failures were:\\n- ${failures.map(stringifyOne).join('\\n- ')}`;\n}\nfunction formatExecutionSummary(executionTrees, stringifyOne) {\n    const summaryLines = [];\n    const remainingTreesAndDepth = [];\n    for (const tree of executionTrees.slice().reverse()) {\n        remainingTreesAndDepth.push({ depth: 1, tree });\n    }\n    while (remainingTreesAndDepth.length !== 0) {\n        const currentTreeAndDepth = remainingTreesAndDepth.pop();\n        const currentTree = currentTreeAndDepth.tree;\n        const currentDepth = currentTreeAndDepth.depth;\n        const statusIcon = currentTree.status === ExecutionStatus.Success\n            ? '\\x1b[32m\\u221A\\x1b[0m'\n            : currentTree.status === ExecutionStatus.Failure\n                ? '\\x1b[31m\\xD7\\x1b[0m'\n                : '\\x1b[33m!\\x1b[0m';\n        const leftPadding = Array(currentDepth).join('. ');\n        summaryLines.push(`${leftPadding}${statusIcon} ${stringifyOne(currentTree.value)}`);\n        for (const tree of currentTree.children.slice().reverse()) {\n            remainingTreesAndDepth.push({ depth: currentDepth + 1, tree });\n        }\n    }\n    return `Execution summary:\\n${summaryLines.join('\\n')}`;\n}\nfunction preFormatTooManySkipped(out, stringifyOne) {\n    const message = `Failed to run property, too many pre-condition failures encountered\\n{ seed: ${out.seed} }\\n\\nRan ${out.numRuns} time(s)\\nSkipped ${out.numSkips} time(s)`;\n    let details = null;\n    const hints = [\n        'Try to reduce the number of rejected values by combining map, flatMap and built-in arbitraries',\n        'Increase failure tolerance by setting maxSkipsPerRun to an higher value',\n    ];\n    if (out.verbose >= VerbosityLevel.VeryVerbose) {\n        details = formatExecutionSummary(out.executionSummary, stringifyOne);\n    }\n    else {\n        hints.push('Enable verbose mode at level VeryVerbose in order to check all generated values and their associated status');\n    }\n    return { message, details, hints };\n}\nfunction preFormatFailure(out, stringifyOne) {\n    const message = `Property failed after ${out.numRuns} tests\\n{ seed: ${out.seed}, path: \"${out.counterexamplePath}\", endOnFailure: true }\\nCounterexample: ${stringifyOne(out.counterexample)}\\nShrunk ${out.numShrinks} time(s)\\nGot error: ${out.error}`;\n    let details = null;\n    const hints = [];\n    if (out.verbose >= VerbosityLevel.VeryVerbose) {\n        details = formatExecutionSummary(out.executionSummary, stringifyOne);\n    }\n    else if (out.verbose === VerbosityLevel.Verbose) {\n        details = formatFailures(out.failures, stringifyOne);\n    }\n    else {\n        hints.push('Enable verbose mode in order to have the list of all failing values encountered during the run');\n    }\n    return { message, details, hints };\n}\nfunction preFormatEarlyInterrupted(out, stringifyOne) {\n    const message = `Property interrupted after ${out.numRuns} tests\\n{ seed: ${out.seed} }`;\n    let details = null;\n    const hints = [];\n    if (out.verbose >= VerbosityLevel.VeryVerbose) {\n        details = formatExecutionSummary(out.executionSummary, stringifyOne);\n    }\n    else {\n        hints.push('Enable verbose mode at level VeryVerbose in order to check all generated values and their associated status');\n    }\n    return { message, details, hints };\n}\nfunction defaultReportMessageInternal(out, stringifyOne) {\n    if (!out.failed)\n        return;\n    const { message, details, hints } = out.counterexamplePath === null\n        ? out.interrupted\n            ? preFormatEarlyInterrupted(out, stringifyOne)\n            : preFormatTooManySkipped(out, stringifyOne)\n        : preFormatFailure(out, stringifyOne);\n    let errorMessage = message;\n    if (details != null)\n        errorMessage += `\\n\\n${details}`;\n    if (hints.length > 0)\n        errorMessage += `\\n\\n${formatHints(hints)}`;\n    return errorMessage;\n}\nfunction defaultReportMessage(out) {\n    return defaultReportMessageInternal(out, stringify);\n}\nasync function asyncDefaultReportMessage(out) {\n    const pendingStringifieds = [];\n    function stringifyOne(value) {\n        const stringified = possiblyAsyncStringify(value);\n        if (typeof stringified === 'string') {\n            return stringified;\n        }\n        pendingStringifieds.push(Promise.all([value, stringified]));\n        return '\\u2026';\n    }\n    const firstTryMessage = defaultReportMessageInternal(out, stringifyOne);\n    if (pendingStringifieds.length === 0) {\n        return firstTryMessage;\n    }\n    const registeredValues = new Map(await Promise.all(pendingStringifieds));\n    function stringifySecond(value) {\n        const asyncStringifiedIfRegistered = registeredValues.get(value);\n        if (asyncStringifiedIfRegistered !== undefined) {\n            return asyncStringifiedIfRegistered;\n        }\n        return stringify(value);\n    }\n    return defaultReportMessageInternal(out, stringifySecond);\n}\nfunction throwIfFailed(out) {\n    if (!out.failed)\n        return;\n    throw new Error(defaultReportMessage(out));\n}\nasync function asyncThrowIfFailed(out) {\n    if (!out.failed)\n        return;\n    throw new Error(await asyncDefaultReportMessage(out));\n}\nexport function reportRunDetails(out) {\n    if (out.runConfiguration.asyncReporter)\n        return out.runConfiguration.asyncReporter(out);\n    else if (out.runConfiguration.reporter)\n        return out.runConfiguration.reporter(out);\n    else\n        return throwIfFailed(out);\n}\nexport async function asyncReportRunDetails(out) {\n    if (out.runConfiguration.asyncReporter)\n        return out.runConfiguration.asyncReporter(out);\n    else if (out.runConfiguration.reporter)\n        return out.runConfiguration.reporter(out);\n    else\n        return asyncThrowIfFailed(out);\n}\nexport { defaultReportMessage, asyncDefaultReportMessage };\n", "import { stream } from '../../stream/Stream.js';\nimport { Shrinkable } from '../arbitrary/definition/Shrinkable.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { decorateProperty } from './DecorateProperty.js';\nimport { RunnerIterator } from './RunnerIterator.js';\nimport { SourceValuesIterator } from './SourceValuesIterator.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nimport { asyncReportRunDetails, reportRunDetails } from './utils/RunDetailsFormatter.js';\nfunction runIt(property, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator(sourceValues, verbose, interruptedAsFailure);\n    for (const v of runner) {\n        const out = property.run(v);\n        runner.handleResult(out);\n    }\n    return runner.runExecution;\n}\nasync function asyncRunIt(property, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator(sourceValues, verbose, interruptedAsFailure);\n    for (const v of runner) {\n        const out = await property.run(v);\n        runner.handleResult(out);\n    }\n    return runner.runExecution;\n}\nfunction runnerPathWalker(valueProducers, path) {\n    const pathPoints = path.split(':');\n    const pathStream = stream(valueProducers)\n        .drop(pathPoints.length > 0 ? +pathPoints[0] : 0)\n        .map((producer) => producer());\n    const adaptedPath = ['0', ...pathPoints.slice(1)].join(':');\n    return stream(pathWalk(adaptedPath, pathStream)).map((v) => () => v);\n}\nfunction buildInitialValues(valueProducers, qParams) {\n    const rawValues = qParams.path.length === 0 ? stream(valueProducers) : runnerPathWalker(valueProducers, qParams.path);\n    if (!qParams.endOnFailure)\n        return rawValues;\n    return rawValues.map((shrinkableGen) => {\n        return () => {\n            const s = shrinkableGen();\n            return new Shrinkable(s.value_);\n        };\n    });\n}\nfunction check(rawProperty, params) {\n    if (rawProperty == null || rawProperty.generate == null)\n        throw new Error('Invalid property encountered, please use a valid property');\n    if (rawProperty.run == null)\n        throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n    const qParams = QualifiedParameters.read(Object.assign(Object.assign({}, readConfigureGlobal()), params));\n    if (qParams.reporter !== null && qParams.asyncReporter !== null)\n        throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n    if (qParams.asyncReporter !== null && !rawProperty.isAsync())\n        throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n    const property = decorateProperty(rawProperty, qParams);\n    const generator = toss(property, qParams.seed, qParams.randomType, qParams.examples);\n    const maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n    const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n    const initialValues = buildInitialValues(generator, qParams);\n    const sourceValues = new SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n    return property.isAsync()\n        ? asyncRunIt(property, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then((e) => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams))\n        : runIt(property, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\nfunction assert(property, params) {\n    const out = check(property, params);\n    if (property.isAsync())\n        return out.then(asyncReportRunDetails);\n    else\n        reportRunDetails(out);\n}\nexport { check, assert };\n", "export function integerLogLike(v) {\n    return Math.floor(Math.log(v) / Math.log(2));\n}\nexport function bigIntLogLike(v) {\n    if (v === BigInt(0))\n        return BigInt(0);\n    return BigInt(v.toString().length);\n}\nfunction biasNumericRange(min, max, logLike) {\n    if (min === max) {\n        return [{ min: min, max: max }];\n    }\n    if (min < 0 && max > 0) {\n        const logMin = logLike(-min);\n        const logMax = logLike(max);\n        return [\n            { min: -logMin, max: logMax },\n            { min: (max - logMax), max: max },\n            { min: min, max: min + logMin },\n        ];\n    }\n    const logGap = logLike((max - min));\n    const arbCloseToMin = { min: min, max: min + logGap };\n    const arbCloseToMax = { min: (max - logGap), max: max };\n    return min < 0\n        ? [arbCloseToMax, arbCloseToMin]\n        : [arbCloseToMin, arbCloseToMax];\n}\nexport { biasNumericRange };\n", "import { NextValue } from '../../../check/arbitrary/definition/NextValue.js';\nimport { stream } from '../../../stream/Stream.js';\nfunction halvePosInteger(n) {\n    return Math.floor(n / 2);\n}\nfunction halveNegInteger(n) {\n    return Math.ceil(n / 2);\n}\nexport function shrinkInteger(current, target, tryTargetAsap) {\n    const realGap = current - target;\n    function* shrinkDecr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halvePosInteger(realGap);\n        for (let toremove = gap; toremove > 0; toremove = halvePosInteger(toremove)) {\n            const next = toremove === realGap ? target : current - toremove;\n            yield new NextValue(next, previous);\n            previous = next;\n        }\n    }\n    function* shrinkIncr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halveNegInteger(realGap);\n        for (let toremove = gap; toremove < 0; toremove = halveNegInteger(toremove)) {\n            const next = toremove === realGap ? target : current - toremove;\n            yield new NextValue(next, previous);\n            previous = next;\n        }\n    }\n    return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}\n", "import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { integerLogLike, biasNumericRange } from './helpers/BiasNumericRange.js';\nimport { shrinkInteger } from './helpers/ShrinkInteger.js';\nexport class IntegerArbitrary extends NextArbitrary {\n    constructor(min, max) {\n        super();\n        this.min = min;\n        this.max = max;\n    }\n    generate(mrng, biasFactor) {\n        const range = this.computeGenerateRange(mrng, biasFactor);\n        return new NextValue(mrng.nextInt(range.min, range.max), undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return (typeof value === 'number' &&\n            Number.isInteger(value) &&\n            !Object.is(value, -0) &&\n            this.min <= value &&\n            value <= this.max);\n    }\n    shrink(current, context) {\n        if (!IntegerArbitrary.isValidContext(current, context)) {\n            const target = this.defaultTarget();\n            return shrinkInteger(current, target, true);\n        }\n        if (this.isLastChanceTry(current, context)) {\n            return Stream.of(new NextValue(context, undefined));\n        }\n        return shrinkInteger(current, context, false);\n    }\n    defaultTarget() {\n        if (this.min <= 0 && this.max >= 0) {\n            return 0;\n        }\n        return this.min < 0 ? this.max : this.min;\n    }\n    computeGenerateRange(mrng, biasFactor) {\n        if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n            return { min: this.min, max: this.max };\n        }\n        const ranges = biasNumericRange(this.min, this.max, integerLogLike);\n        if (ranges.length === 1) {\n            return ranges[0];\n        }\n        const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n        return id < 0 ? ranges[0] : ranges[id + 1];\n    }\n    isLastChanceTry(current, context) {\n        if (current > 0)\n            return current === context + 1 && current > this.min;\n        if (current < 0)\n            return current === context - 1 && current < this.max;\n        return false;\n    }\n    static isValidContext(current, context) {\n        if (context === undefined) {\n            return false;\n        }\n        if (typeof context !== 'number') {\n            throw new Error(`Invalid context type passed to IntegerArbitrary (#1)`);\n        }\n        if (context !== 0 && Math.sign(current) !== Math.sign(context)) {\n            throw new Error(`Invalid context value passed to IntegerArbitrary (#2)`);\n        }\n        return true;\n    }\n}\n", "import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction buildCompleteIntegerConstraints(constraints) {\n    const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n    const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n    return { min, max };\n}\nfunction extractIntegerConstraints(args) {\n    if (args[0] === undefined) {\n        return {};\n    }\n    if (args[1] === undefined) {\n        const sargs = args;\n        if (typeof sargs[0] === 'number')\n            return { max: sargs[0] };\n        return sargs[0];\n    }\n    const sargs = args;\n    return { min: sargs[0], max: sargs[1] };\n}\nfunction integer(...args) {\n    const constraints = buildCompleteIntegerConstraints(extractIntegerConstraints(args));\n    if (constraints.min > constraints.max) {\n        throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n    }\n    const arb = new IntegerArbitrary(constraints.min, constraints.max);\n    return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\nexport { integer };\n", "class LazyIterableIterator {\n    constructor(producer) {\n        this.producer = producer;\n    }\n    [Symbol.iterator]() {\n        if (this.it === undefined) {\n            this.it = this.producer();\n        }\n        return this.it;\n    }\n    next() {\n        if (this.it === undefined) {\n            this.it = this.producer();\n        }\n        return this.it.next();\n    }\n}\nexport function makeLazy(producer) {\n    return new LazyIterableIterator(producer);\n}\n", "function subArrayContains(tab, upperBound, includeValue) {\n    for (let idx = 0; idx < upperBound; ++idx) {\n        if (includeValue(tab[idx]))\n            return true;\n    }\n    return false;\n}\nfunction swap(tab, idx1, idx2) {\n    const temp = tab[idx1];\n    tab[idx1] = tab[idx2];\n    tab[idx2] = temp;\n}\nexport function buildCompareFilter(compare) {\n    return (tab) => {\n        let finalLength = tab.length;\n        for (let idx = tab.length - 1; idx !== -1; --idx) {\n            if (subArrayContains(tab, idx, (t) => compare(t.value_, tab[idx].value_))) {\n                --finalLength;\n                swap(tab, idx, finalLength);\n            }\n        }\n        return tab.slice(0, finalLength);\n    };\n}\n", "import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { integer } from '../integer.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { buildCompareFilter } from './helpers/BuildCompareFilter.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nexport class ArrayArbitrary extends NextArbitrary {\n    constructor(arb, minLength, maxLength, isEqual) {\n        super();\n        this.arb = arb;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        this.isEqual = isEqual;\n        this.lengthArb = convertToNext(integer(minLength, maxLength));\n        this.preFilter = this.isEqual !== undefined ? buildCompareFilter(this.isEqual) : (tab) => tab;\n    }\n    static makeItCloneable(vs, shrinkables) {\n        vs[cloneMethod] = () => {\n            const cloned = [];\n            for (let idx = 0; idx !== shrinkables.length; ++idx) {\n                cloned.push(shrinkables[idx].value);\n            }\n            this.makeItCloneable(cloned, shrinkables);\n            return cloned;\n        };\n        return vs;\n    }\n    static canAppendItem(items, newItem, isEqual) {\n        for (let idx = 0; idx !== items.length; ++idx) {\n            if (isEqual(items[idx].value_, newItem.value_)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    generateNItemsNoDuplicates(N, mrng, biasFactorItems) {\n        let numSkippedInRow = 0;\n        const items = [];\n        while (items.length < N && numSkippedInRow < this.maxLength) {\n            const current = this.arb.generate(mrng, biasFactorItems);\n            if (this.isEqual === undefined || ArrayArbitrary.canAppendItem(items, current, this.isEqual)) {\n                numSkippedInRow = 0;\n                items.push(current);\n            }\n            else {\n                numSkippedInRow += 1;\n            }\n        }\n        return items;\n    }\n    generateNItems(N, mrng, biasFactorItems) {\n        const items = [];\n        for (let index = 0; index !== N; ++index) {\n            const current = this.arb.generate(mrng, biasFactorItems);\n            items.push(current);\n        }\n        return items;\n    }\n    wrapper(itemsRaw, shrunkOnce, itemsRawLengthContext) {\n        const items = shrunkOnce ? this.preFilter(itemsRaw) : itemsRaw;\n        let cloneable = false;\n        const vs = [];\n        const itemsContexts = [];\n        for (let idx = 0; idx !== items.length; ++idx) {\n            const s = items[idx];\n            cloneable = cloneable || s.hasToBeCloned;\n            vs.push(s.value);\n            itemsContexts.push(s.context);\n        }\n        if (cloneable) {\n            ArrayArbitrary.makeItCloneable(vs, items);\n        }\n        const context = {\n            shrunkOnce,\n            lengthContext: itemsRaw.length === items.length && itemsRawLengthContext !== undefined\n                ? itemsRawLengthContext\n                : undefined,\n            itemsContexts,\n        };\n        return new NextValue(vs, context);\n    }\n    generate(mrng, biasFactor) {\n        const biasMeta = this.applyBias(mrng, biasFactor);\n        const targetSize = biasMeta.size;\n        const items = this.isEqual !== undefined\n            ? this.generateNItemsNoDuplicates(targetSize, mrng, biasMeta.biasFactorItems)\n            : this.generateNItems(targetSize, mrng, biasMeta.biasFactorItems);\n        return this.wrapper(items, false, undefined);\n    }\n    applyBias(mrng, biasFactor) {\n        if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n            return { size: this.lengthArb.generate(mrng, undefined).value };\n        }\n        if (mrng.nextInt(1, biasFactor) !== 1 || this.minLength === this.maxLength) {\n            return { size: this.lengthArb.generate(mrng, undefined).value, biasFactorItems: biasFactor };\n        }\n        const maxBiasedLength = this.minLength + Math.floor(Math.log(this.maxLength - this.minLength) / Math.log(2));\n        const targetSizeValue = convertToNext(integer(this.minLength, maxBiasedLength)).generate(mrng, undefined);\n        return { size: targetSizeValue.value, biasFactorItems: biasFactor };\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || this.minLength > value.length || value.length > this.maxLength) {\n            return false;\n        }\n        for (let index = 0; index !== value.length; ++index) {\n            if (!(index in value)) {\n                return false;\n            }\n            if (!this.arb.canShrinkWithoutContext(value[index])) {\n                return false;\n            }\n        }\n        const filtered = this.preFilter(value.map((item) => new NextValue(item, undefined)));\n        return filtered.length === value.length;\n    }\n    shrinkImpl(value, context) {\n        if (value.length === 0) {\n            return Stream.nil();\n        }\n        const safeContext = context !== undefined\n            ? context\n            : { shrunkOnce: false, lengthContext: undefined, itemsContexts: [] };\n        return (this.lengthArb\n            .shrink(value.length, safeContext.lengthContext)\n            .drop(safeContext.shrunkOnce && safeContext.lengthContext === undefined && value.length > this.minLength + 1 ? 1 : 0)\n            .map((lengthValue) => {\n            const sliceStart = value.length - lengthValue.value;\n            return [\n                value\n                    .slice(sliceStart)\n                    .map((v, index) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[index + sliceStart])),\n                lengthValue.context,\n            ];\n        })\n            .join(this.arb.shrink(value[0], safeContext.itemsContexts[0]).map((v) => {\n            return [\n                [v].concat(value.slice(1).map((v, index) => new NextValue(cloneIfNeeded(v), safeContext.itemsContexts[index + 1]))),\n                undefined,\n            ];\n        }))\n            .join(value.length > this.minLength\n            ? makeLazy(() => this.shrinkImpl(value.slice(1), {\n                shrunkOnce: false,\n                lengthContext: undefined,\n                itemsContexts: safeContext.itemsContexts.slice(1),\n            })\n                .filter((v) => this.minLength <= v[0].length + 1)\n                .map((v) => {\n                return [\n                    [new NextValue(cloneIfNeeded(value[0]), safeContext.itemsContexts[0])].concat(v[0]),\n                    undefined,\n                ];\n            }))\n            : Stream.nil()));\n    }\n    shrink(value, context) {\n        return this.shrinkImpl(value, context).map((contextualValue) => this.wrapper(contextualValue[0], true, contextualValue[1]));\n    }\n}\n", "export function maxLengthFromMinLength(minLength) {\n    return 2 * minLength + 10;\n}\n", "import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\nfunction array(arb, ...args) {\n    const nextArb = convertToNext(arb);\n    if (args[0] === undefined)\n        return convertFromNext(new ArrayArbitrary(nextArb, 0, maxLengthFromMinLength(0)));\n    if (typeof args[0] === 'object') {\n        const minLength = args[0].minLength || 0;\n        const specifiedMaxLength = args[0].maxLength;\n        const maxLength = specifiedMaxLength !== undefined ? specifiedMaxLength : maxLengthFromMinLength(minLength);\n        return convertFromNext(new ArrayArbitrary(nextArb, minLength, maxLength));\n    }\n    if (args[1] !== undefined)\n        return convertFromNext(new ArrayArbitrary(nextArb, args[0], args[1]));\n    return convertFromNext(new ArrayArbitrary(nextArb, 0, args[0]));\n}\nexport { array };\n", "import { stream } from '../../../stream/Stream.js';\nimport { NextValue } from '../../../check/arbitrary/definition/NextValue.js';\nfunction halveBigInt(n) {\n    return n / BigInt(2);\n}\nexport function shrinkBigInt(current, target, tryTargetAsap) {\n    const realGap = current - target;\n    function* shrinkDecr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n        for (let toremove = gap; toremove > 0; toremove = halveBigInt(toremove)) {\n            const next = current - toremove;\n            yield new NextValue(next, previous);\n            previous = next;\n        }\n    }\n    function* shrinkIncr() {\n        let previous = tryTargetAsap ? undefined : target;\n        const gap = tryTargetAsap ? realGap : halveBigInt(realGap);\n        for (let toremove = gap; toremove < 0; toremove = halveBigInt(toremove)) {\n            const next = current - toremove;\n            yield new NextValue(next, previous);\n            previous = next;\n        }\n    }\n    return realGap > 0 ? stream(shrinkDecr()) : stream(shrinkIncr());\n}\n", "import { Stream } from '../../stream/Stream.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { biasNumericRange, bigIntLogLike } from './helpers/BiasNumericRange.js';\nimport { shrinkBigInt } from './helpers/ShrinkBigInt.js';\nexport class BigIntArbitrary extends NextArbitrary {\n    constructor(min, max) {\n        super();\n        this.min = min;\n        this.max = max;\n    }\n    generate(mrng, biasFactor) {\n        const range = this.computeGenerateRange(mrng, biasFactor);\n        return new NextValue(mrng.nextBigInt(range.min, range.max), undefined);\n    }\n    computeGenerateRange(mrng, biasFactor) {\n        if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n            return { min: this.min, max: this.max };\n        }\n        const ranges = biasNumericRange(this.min, this.max, bigIntLogLike);\n        if (ranges.length === 1) {\n            return ranges[0];\n        }\n        const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n        return id < 0 ? ranges[0] : ranges[id + 1];\n    }\n    canShrinkWithoutContext(value) {\n        return typeof value === 'bigint' && this.min <= value && value <= this.max;\n    }\n    shrink(current, context) {\n        if (!BigIntArbitrary.isValidContext(current, context)) {\n            const target = this.defaultTarget();\n            return shrinkBigInt(current, target, true);\n        }\n        if (this.isLastChanceTry(current, context)) {\n            return Stream.of(new NextValue(context, undefined));\n        }\n        return shrinkBigInt(current, context, false);\n    }\n    defaultTarget() {\n        if (this.min <= 0 && this.max >= 0) {\n            return BigInt(0);\n        }\n        return this.min < 0 ? this.max : this.min;\n    }\n    isLastChanceTry(current, context) {\n        if (current > 0)\n            return current === context + BigInt(1) && current > this.min;\n        if (current < 0)\n            return current === context - BigInt(1) && current < this.max;\n        return false;\n    }\n    static isValidContext(current, context) {\n        if (context === undefined) {\n            return false;\n        }\n        if (typeof context !== 'bigint') {\n            throw new Error(`Invalid context type passed to BigIntArbitrary (#1)`);\n        }\n        const differentSigns = (current > 0 && context < 0) || (current < 0 && context > 0);\n        if (context !== BigInt(0) && differentSigns) {\n            throw new Error(`Invalid context value passed to BigIntArbitrary (#2)`);\n        }\n        return true;\n    }\n}\n", "import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { BigIntArbitrary } from './_internals/BigIntArbitrary.js';\nfunction buildCompleteBigIntConstraints(constraints) {\n    const DefaultPow = 256;\n    const DefaultMin = BigInt(-1) << BigInt(DefaultPow - 1);\n    const DefaultMax = (BigInt(1) << BigInt(DefaultPow - 1)) - BigInt(1);\n    const min = constraints.min;\n    const max = constraints.max;\n    return {\n        min: min !== undefined ? min : DefaultMin - (max !== undefined && max < BigInt(0) ? max * max : BigInt(0)),\n        max: max !== undefined ? max : DefaultMax + (min !== undefined && min > BigInt(0) ? min * min : BigInt(0)),\n    };\n}\nfunction extractBigIntConstraints(args) {\n    if (args[0] === undefined) {\n        return {};\n    }\n    if (args[1] === undefined) {\n        const constraints = args[0];\n        return constraints;\n    }\n    return { min: args[0], max: args[1] };\n}\nfunction bigInt(...args) {\n    const constraints = buildCompleteBigIntConstraints(extractBigIntConstraints(args));\n    if (constraints.min > constraints.max) {\n        throw new Error('fc.bigInt expects max to be greater than or equal to min');\n    }\n    const arb = new BigIntArbitrary(constraints.min, constraints.max);\n    return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\nexport { bigInt };\n", "import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { integer } from './integer.js';\nfunction booleanMapper(v) {\n    return v === 1;\n}\nfunction booleanUnmapper(v) {\n    if (typeof v !== 'boolean')\n        throw new Error('Unsupported input type');\n    return v === true ? 1 : 0;\n}\nfunction boolean() {\n    return convertFromNext(convertToNext(integer({ min: 0, max: 1 }))\n        .map(booleanMapper, booleanUnmapper)\n        .noBias());\n}\nexport { boolean };\n", "import { Stream } from '../../stream/Stream.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod, hasCloneMethod } from '../../check/symbols.js';\nexport class ConstantArbitrary extends NextArbitrary {\n    constructor(values) {\n        super();\n        this.values = values;\n    }\n    generate(mrng, _biasFactor) {\n        const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);\n        const value = this.values[idx];\n        if (!hasCloneMethod(value)) {\n            return new NextValue(value, idx);\n        }\n        return new NextValue(value, idx, () => value[cloneMethod]());\n    }\n    canShrinkWithoutContext(value) {\n        for (let idx = 0; idx !== this.values.length; ++idx) {\n            if (Object.is(this.values[idx], value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    shrink(value, context) {\n        if (context === 0 || Object.is(value, this.values[0])) {\n            return Stream.nil();\n        }\n        return Stream.of(new NextValue(this.values[0], 0));\n    }\n}\n", "export const indexToCharStringMapper = String.fromCodePoint;\nexport function indexToCharStringUnmapper(c) {\n    if (typeof c !== 'string') {\n        throw new Error('Cannot unmap non-string');\n    }\n    if (c.length === 0 || c.length > 2) {\n        throw new Error('Cannot unmap string with more or less than one character');\n    }\n    const c1 = c.charCodeAt(0);\n    if (c.length === 1) {\n        return c1;\n    }\n    const c2 = c.charCodeAt(1);\n    if (c1 < 0xd800 || c1 > 0xdbff || c2 < 0xdc00 || c2 > 0xdfff) {\n        throw new Error('Cannot unmap invalid surrogate pairs');\n    }\n    return c.codePointAt(0);\n}\n", "import { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { integer } from '../../integer.js';\nimport { indexToCharStringMapper, indexToCharStringUnmapper } from '../mappers/IndexToCharString.js';\nexport function buildCharacterArbitrary(min, max, mapToCode, unmapFromCode) {\n    return convertFromNext(convertToNext(integer(min, max)).map((n) => indexToCharStringMapper(mapToCode(n)), (c) => unmapFromCode(indexToCharStringUnmapper(c))));\n}\n", "export function indexToPrintableIndexMapper(v) {\n    if (v < 95)\n        return v + 0x20;\n    if (v <= 0x7e)\n        return v - 95;\n    return v;\n}\nexport function indexToPrintableIndexUnmapper(v) {\n    if (v >= 0x20 && v <= 0x7e)\n        return v - 0x20;\n    if (v >= 0 && v <= 0x1f)\n        return v + 95;\n    return v;\n}\n", "import { buildCharacterArbitrary } from './_internals/builders/CharacterArbitraryBuilder.js';\nfunction identity(v) {\n    return v;\n}\nexport function char() {\n    return buildCharacterArbitrary(0x20, 0x7e, identity, identity);\n}\n", "import { buildCharacterArbitrary } from './_internals/builders/CharacterArbitraryBuilder.js';\nimport { indexToPrintableIndexMapper, indexToPrintableIndexUnmapper } from './_internals/mappers/IndexToPrintableIndex.js';\nconst gapSize = 0xdfff + 1 - 0xd800;\nfunction unicodeMapper(v) {\n    if (v < 0xd800)\n        return indexToPrintableIndexMapper(v);\n    return v + gapSize;\n}\nfunction unicodeUnmapper(v) {\n    if (v < 0xd800)\n        return indexToPrintableIndexUnmapper(v);\n    if (v <= 0xdfff)\n        return -1;\n    return v - gapSize;\n}\nexport function fullUnicode() {\n    return buildCharacterArbitrary(0x0000, 0x10ffff - gapSize, unicodeMapper, unicodeUnmapper);\n}\n", "import { buildCharacterArbitrary } from './_internals/builders/CharacterArbitraryBuilder.js';\nimport { indexToPrintableIndexMapper, indexToPrintableIndexUnmapper } from './_internals/mappers/IndexToPrintableIndex.js';\nconst gapSize = 0xdfff + 1 - 0xd800;\nfunction unicodeMapper(v) {\n    if (v < 0xd800)\n        return indexToPrintableIndexMapper(v);\n    return v + gapSize;\n}\nfunction unicodeUnmapper(v) {\n    if (v < 0xd800)\n        return indexToPrintableIndexUnmapper(v);\n    if (v <= 0xdfff)\n        return -1;\n    return v - gapSize;\n}\nexport function unicode() {\n    return buildCharacterArbitrary(0x0000, 0xffff - gapSize, unicodeMapper, unicodeUnmapper);\n}\n", "import { convertFromNext } from '../check/arbitrary/definition/Converters.js';\nimport { ConstantArbitrary } from './_internals/ConstantArbitrary.js';\nexport function constant(value) {\n    return convertFromNext(new ConstantArbitrary([value]));\n}\n", "import { cloneMethod } from '../check/symbols.js';\nimport { constant } from './constant.js';\nclass ContextImplem {\n    constructor() {\n        this.receivedLogs = [];\n    }\n    log(data) {\n        this.receivedLogs.push(data);\n    }\n    size() {\n        return this.receivedLogs.length;\n    }\n    toString() {\n        return JSON.stringify({ logs: this.receivedLogs });\n    }\n    [cloneMethod]() {\n        return new ContextImplem();\n    }\n}\nexport function context() {\n    return constant(new ContextImplem());\n}\n", "export function timeToDateMapper(time) {\n    return new Date(time);\n}\nexport function timeToDateUnmapper(value) {\n    if (!(value instanceof Date) || value.constructor !== Date) {\n        throw new Error('Not a valid value for date unmapper');\n    }\n    return value.getTime();\n}\n", "import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { integer } from './integer.js';\nimport { timeToDateMapper, timeToDateUnmapper } from './_internals/mappers/TimeToDate.js';\nexport function date(constraints) {\n    const intMin = constraints && constraints.min !== undefined ? constraints.min.getTime() : -8640000000000000;\n    const intMax = constraints && constraints.max !== undefined ? constraints.max.getTime() : 8640000000000000;\n    if (Number.isNaN(intMin))\n        throw new Error('fc.date min must be valid instance of Date');\n    if (Number.isNaN(intMax))\n        throw new Error('fc.date max must be valid instance of Date');\n    if (intMin > intMax)\n        throw new Error('fc.date max must be greater or equal to min');\n    return convertFromNext(convertToNext(integer(intMin, intMax)).map(timeToDateMapper, timeToDateUnmapper));\n}\n", "import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { maxLengthFromMinLength } from './_internals/helpers/MaxLengthFromMinLength.js';\nfunction buildCompleteSetConstraints(constraints) {\n    const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n    const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : maxLengthFromMinLength(minLength);\n    const compare = constraints.compare !== undefined ? constraints.compare : (a, b) => a === b;\n    return { minLength, maxLength, compare };\n}\nfunction extractSetConstraints(args) {\n    if (args[0] === undefined) {\n        return {};\n    }\n    if (args[1] === undefined) {\n        const sargs = args;\n        if (typeof sargs[0] === 'number')\n            return { maxLength: sargs[0] };\n        if (typeof sargs[0] === 'function')\n            return { compare: sargs[0] };\n        return sargs[0];\n    }\n    if (args[2] === undefined) {\n        const sargs = args;\n        if (typeof sargs[1] === 'number')\n            return { minLength: sargs[0], maxLength: sargs[1] };\n        return { maxLength: sargs[0], compare: sargs[1] };\n    }\n    const sargs = args;\n    return { minLength: sargs[0], maxLength: sargs[1], compare: sargs[2] };\n}\nfunction set(arb, ...args) {\n    const constraints = buildCompleteSetConstraints(extractSetConstraints(args));\n    const minLength = constraints.minLength;\n    const maxLength = constraints.maxLength;\n    const compare = constraints.compare;\n    const nextArb = convertToNext(arb);\n    const arrayArb = convertFromNext(new ArrayArbitrary(nextArb, minLength, maxLength, compare));\n    if (minLength === 0)\n        return arrayArb;\n    return arrayArb.filter((tab) => tab.length >= minLength);\n}\nexport { set };\n", "import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { TupleArbitrary } from './_internals/TupleArbitrary.js';\nexport function tuple(...arbs) {\n    const nextArbs = arbs.map((arb) => convertToNext(arb));\n    return convertFromNext(new TupleArbitrary(nextArbs));\n}\n", "export function keyValuePairsToObjectMapper(items) {\n    const obj = {};\n    for (const keyValue of items) {\n        obj[keyValue[0]] = keyValue[1];\n    }\n    return obj;\n}\nfunction buildInvalidPropertyNameFilter(obj) {\n    return function invalidPropertyNameFilter(key) {\n        const descriptor = Object.getOwnPropertyDescriptor(obj, key);\n        return (descriptor === undefined ||\n            !descriptor.configurable ||\n            !descriptor.enumerable ||\n            !descriptor.writable ||\n            descriptor.get !== undefined ||\n            descriptor.set !== undefined);\n    };\n}\nexport function keyValuePairsToObjectUnmapper(value) {\n    if (typeof value !== 'object' || value === null) {\n        throw new Error('Incompatible instance received: should be a non-null object');\n    }\n    if (!('constructor' in value) || value.constructor !== Object) {\n        throw new Error('Incompatible instance received: should be of exact type Object');\n    }\n    if (Object.getOwnPropertySymbols(value).length > 0) {\n        throw new Error('Incompatible instance received: should contain symbols');\n    }\n    if (Object.getOwnPropertyNames(value).find(buildInvalidPropertyNameFilter(value)) !== undefined) {\n        throw new Error('Incompatible instance received: should contain only c/e/w properties without get/set');\n    }\n    return Object.entries(value);\n}\n", "const depthContextCache = new Map();\nexport function getDepthContextFor(contextMeta) {\n    if (contextMeta === undefined) {\n        return { depth: 0 };\n    }\n    if (typeof contextMeta !== 'string') {\n        return contextMeta;\n    }\n    const cachedContext = depthContextCache.get(contextMeta);\n    if (cachedContext !== undefined) {\n        return cachedContext;\n    }\n    const context = { depth: 0 };\n    depthContextCache.set(contextMeta, context);\n    return context;\n}\n", "import { Stream } from '../../stream/Stream.js';\nimport { convertFromNext, convertToNext } from '../../check/arbitrary/definition/Converters.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { getDepthContextFor } from './helpers/DepthContext.js';\nexport class FrequencyArbitrary extends NextArbitrary {\n    constructor(warbs, constraints, context) {\n        super();\n        this.warbs = warbs;\n        this.constraints = constraints;\n        this.context = context;\n        let currentWeight = 0;\n        this.cumulatedWeights = [];\n        for (let idx = 0; idx !== warbs.length; ++idx) {\n            currentWeight += warbs[idx].weight;\n            this.cumulatedWeights.push(currentWeight);\n        }\n        this.totalWeight = currentWeight;\n    }\n    static fromOld(warbs, constraints, label) {\n        return convertFromNext(FrequencyArbitrary.from(warbs.map((w) => (Object.assign(Object.assign({}, w), { arbitrary: convertToNext(w.arbitrary) }))), constraints, label));\n    }\n    static from(warbs, constraints, label) {\n        if (warbs.length === 0) {\n            throw new Error(`${label} expects at least one weigthed arbitrary`);\n        }\n        let totalWeight = 0;\n        for (let idx = 0; idx !== warbs.length; ++idx) {\n            const currentArbitrary = warbs[idx].arbitrary;\n            if (currentArbitrary === undefined) {\n                throw new Error(`${label} expects arbitraries to be specified`);\n            }\n            const currentWeight = warbs[idx].weight;\n            totalWeight += currentWeight;\n            if (!Number.isInteger(currentWeight)) {\n                throw new Error(`${label} expects weights to be integer values`);\n            }\n            if (currentWeight < 0) {\n                throw new Error(`${label} expects weights to be superior or equal to 0`);\n            }\n        }\n        if (totalWeight <= 0) {\n            throw new Error(`${label} expects the sum of weights to be strictly superior to 0`);\n        }\n        return new FrequencyArbitrary(warbs, constraints, getDepthContextFor(constraints.depthIdentifier));\n    }\n    generate(mrng, biasFactor) {\n        if (this.mustGenerateFirst()) {\n            return this.safeGenerateForIndex(mrng, 0, biasFactor);\n        }\n        const selected = mrng.nextInt(this.computeNegDepthBenefit(), this.totalWeight - 1);\n        for (let idx = 0; idx !== this.cumulatedWeights.length; ++idx) {\n            if (selected < this.cumulatedWeights[idx]) {\n                return this.safeGenerateForIndex(mrng, idx, biasFactor);\n            }\n        }\n        throw new Error(`Unable to generate from fc.frequency`);\n    }\n    canShrinkWithoutContext(value) {\n        return this.canShrinkWithoutContextIndex(value) !== -1;\n    }\n    shrink(value, context) {\n        if (context !== undefined) {\n            const safeContext = context;\n            const selectedIndex = safeContext.selectedIndex;\n            const originalBias = safeContext.originalBias;\n            const originalArbitrary = this.warbs[selectedIndex].arbitrary;\n            const originalShrinks = originalArbitrary\n                .shrink(value, safeContext.originalContext)\n                .map((v) => this.mapIntoNextValue(selectedIndex, v, null, originalBias));\n            if (safeContext.clonedMrngForFallbackFirst !== null) {\n                if (safeContext.cachedGeneratedForFirst === undefined) {\n                    safeContext.cachedGeneratedForFirst = this.safeGenerateForIndex(safeContext.clonedMrngForFallbackFirst, 0, originalBias);\n                }\n                const valueFromFirst = safeContext.cachedGeneratedForFirst;\n                return Stream.of(valueFromFirst).join(originalShrinks);\n            }\n            return originalShrinks;\n        }\n        const potentialSelectedIndex = this.canShrinkWithoutContextIndex(value);\n        if (potentialSelectedIndex === -1) {\n            return Stream.nil();\n        }\n        return this.defaultShrinkForFirst(potentialSelectedIndex).join(this.warbs[potentialSelectedIndex].arbitrary\n            .shrink(value, undefined)\n            .map((v) => this.mapIntoNextValue(potentialSelectedIndex, v, null, undefined)));\n    }\n    defaultShrinkForFirst(selectedIndex) {\n        ++this.context.depth;\n        try {\n            if (!this.mustFallbackToFirstInShrink(selectedIndex) || this.warbs[0].fallbackValue === undefined) {\n                return Stream.nil();\n            }\n        }\n        finally {\n            --this.context.depth;\n        }\n        const rawShrinkValue = new NextValue(this.warbs[0].fallbackValue.default, undefined);\n        return Stream.of(this.mapIntoNextValue(0, rawShrinkValue, null, undefined));\n    }\n    canShrinkWithoutContextIndex(value) {\n        if (this.mustGenerateFirst()) {\n            return this.warbs[0].arbitrary.canShrinkWithoutContext(value) ? 0 : -1;\n        }\n        try {\n            ++this.context.depth;\n            for (let idx = 0; idx !== this.warbs.length; ++idx) {\n                const warb = this.warbs[idx];\n                if (warb.weight !== 0 && warb.arbitrary.canShrinkWithoutContext(value)) {\n                    return idx;\n                }\n            }\n            return -1;\n        }\n        finally {\n            --this.context.depth;\n        }\n    }\n    mapIntoNextValue(idx, value, clonedMrngForFallbackFirst, biasFactor) {\n        const context = {\n            selectedIndex: idx,\n            originalBias: biasFactor,\n            originalContext: value.context,\n            clonedMrngForFallbackFirst,\n        };\n        return new NextValue(value.value, context);\n    }\n    safeGenerateForIndex(mrng, idx, biasFactor) {\n        ++this.context.depth;\n        try {\n            const value = this.warbs[idx].arbitrary.generate(mrng, biasFactor);\n            const clonedMrngForFallbackFirst = this.mustFallbackToFirstInShrink(idx) ? mrng.clone() : null;\n            return this.mapIntoNextValue(idx, value, clonedMrngForFallbackFirst, biasFactor);\n        }\n        finally {\n            --this.context.depth;\n        }\n    }\n    mustGenerateFirst() {\n        return this.constraints.maxDepth !== undefined && this.constraints.maxDepth <= this.context.depth;\n    }\n    mustFallbackToFirstInShrink(idx) {\n        return idx !== 0 && !!this.constraints.withCrossShrink && this.warbs[0].weight !== 0;\n    }\n    computeNegDepthBenefit() {\n        const depthFactor = this.constraints.depthFactor;\n        if (depthFactor === undefined || depthFactor <= 0) {\n            return 0;\n        }\n        const depthBenefit = Math.floor(Math.pow(1 + depthFactor, this.context.depth)) - 1;\n        return -Math.min(this.warbs[0].weight * depthBenefit, Number.MAX_SAFE_INTEGER) || 0;\n    }\n}\n", "import { FrequencyArbitrary } from './_internals/FrequencyArbitrary.js';\nfunction isFrequencyContraints(param) {\n    return param != null && typeof param === 'object' && !('arbitrary' in param);\n}\nfunction frequency(...args) {\n    const label = 'fc.frequency';\n    const constraints = args[0];\n    if (isFrequencyContraints(constraints)) {\n        return FrequencyArbitrary.fromOld(args.slice(1), constraints, label);\n    }\n    return FrequencyArbitrary.fromOld(args, {}, label);\n}\nexport { frequency };\n", "import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction nat(arg) {\n    const max = typeof arg === 'number' ? arg : arg && arg.max !== undefined ? arg.max : 0x7fffffff;\n    if (max < 0) {\n        throw new Error('fc.nat value should be greater than or equal to 0');\n    }\n    const arb = new IntegerArbitrary(0, max);\n    return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\nexport { nat };\n", "import { fullUnicode } from '../../../arbitrary/fullUnicode.js';\nimport { frequency } from '../../../arbitrary/frequency.js';\nimport { mapToConstant } from '../../../arbitrary/mapToConstant.js';\nconst lowerCaseMapper = { num: 26, build: (v) => String.fromCharCode(v + 0x61) };\nconst upperCaseMapper = { num: 26, build: (v) => String.fromCharCode(v + 0x41) };\nconst numericMapper = { num: 10, build: (v) => String.fromCharCode(v + 0x30) };\nconst percentCharArb = fullUnicode().map((c) => {\n    const encoded = encodeURIComponent(c);\n    return c !== encoded ? encoded : `%${c.charCodeAt(0).toString(16)}`;\n});\nexport const buildLowerAlphaArb = (others) => mapToConstant(lowerCaseMapper, { num: others.length, build: (v) => others[v] });\nexport const buildLowerAlphaNumericArb = (others) => mapToConstant(lowerCaseMapper, numericMapper, { num: others.length, build: (v) => others[v] });\nexport const buildAlphaNumericArb = (others) => mapToConstant(lowerCaseMapper, upperCaseMapper, numericMapper, { num: others.length, build: (v) => others[v] });\nexport const buildAlphaNumericPercentArb = (others) => frequency({\n    weight: 10,\n    arbitrary: buildAlphaNumericArb(others),\n}, {\n    weight: 1,\n    arbitrary: percentCharArb,\n});\n", "export function extractStringConstraints(options) {\n    return options[0] !== undefined\n        ? typeof options[0] === 'number'\n            ? typeof options[1] === 'number'\n                ? { minLength: options[0], maxLength: options[1] }\n                : { maxLength: options[0] }\n            : options[0]\n        : {};\n}\n", "export const Zero64 = { sign: 1, data: [0, 0] };\nexport const Unit64 = { sign: 1, data: [0, 1] };\nexport function isZero64(a) {\n    return a.data[0] === 0 && a.data[1] === 0;\n}\nexport function isStrictlyNegative64(a) {\n    return a.sign === -1 && !isZero64(a);\n}\nexport function isStrictlyPositive64(a) {\n    return a.sign === 1 && !isZero64(a);\n}\nexport function isEqual64(a, b) {\n    if (a.data[0] === b.data[0] && a.data[1] === b.data[1]) {\n        return a.sign === b.sign || (a.data[0] === 0 && a.data[1] === 0);\n    }\n    return false;\n}\nfunction isStrictlySmaller64Internal(a, b) {\n    return a[0] < b[0] || (a[0] === b[0] && a[1] < b[1]);\n}\nexport function isStrictlySmaller64(a, b) {\n    if (a.sign === b.sign) {\n        return a.sign === 1\n            ? isStrictlySmaller64Internal(a.data, b.data)\n            : isStrictlySmaller64Internal(b.data, a.data);\n    }\n    return a.sign === -1 && (!isZero64(a) || !isZero64(b));\n}\nexport function clone64(a) {\n    return { sign: a.sign, data: [a.data[0], a.data[1]] };\n}\nfunction substract64DataInternal(a, b) {\n    let reminderLow = 0;\n    let low = a[1] - b[1];\n    if (low < 0) {\n        reminderLow = 1;\n        low = low >>> 0;\n    }\n    return [a[0] - b[0] - reminderLow, low];\n}\nfunction substract64Internal(a, b) {\n    if (a.sign === 1 && b.sign === -1) {\n        const low = a.data[1] + b.data[1];\n        const high = a.data[0] + b.data[0] + (low > 0xffffffff ? 1 : 0);\n        return { sign: 1, data: [high >>> 0, low >>> 0] };\n    }\n    return {\n        sign: 1,\n        data: a.sign === 1 ? substract64DataInternal(a.data, b.data) : substract64DataInternal(b.data, a.data),\n    };\n}\nexport function substract64(arrayIntA, arrayIntB) {\n    if (isStrictlySmaller64(arrayIntA, arrayIntB)) {\n        const out = substract64Internal(arrayIntB, arrayIntA);\n        out.sign = -1;\n        return out;\n    }\n    return substract64Internal(arrayIntA, arrayIntB);\n}\nexport function negative64(arrayIntA) {\n    return {\n        sign: -arrayIntA.sign,\n        data: [arrayIntA.data[0], arrayIntA.data[1]],\n    };\n}\nexport function add64(arrayIntA, arrayIntB) {\n    if (isZero64(arrayIntB)) {\n        if (isZero64(arrayIntA)) {\n            return clone64(Zero64);\n        }\n        return clone64(arrayIntA);\n    }\n    return substract64(arrayIntA, negative64(arrayIntB));\n}\nexport function halve64(a) {\n    return {\n        sign: a.sign,\n        data: [Math.floor(a.data[0] / 2), (a.data[0] % 2 === 1 ? 0x80000000 : 0) + Math.floor(a.data[1] / 2)],\n    };\n}\nexport function logLike64(a) {\n    return {\n        sign: a.sign,\n        data: [0, Math.floor(Math.log(a.data[0] * 0x100000000 + a.data[1]) / Math.log(2))],\n    };\n}\n", "import { stream, Stream } from '../../../stream/Stream.js';\nimport { convertFromNextWithShrunkOnce } from '../definition/Converters.js';\nimport { NextArbitrary } from '../definition/NextArbitrary.js';\nimport { NextValue } from '../definition/NextValue.js';\nimport { add64, halve64, isEqual64, isStrictlyNegative64, isStrictlyPositive64, isStrictlySmaller64, isZero64, logLike64, substract64, Unit64, Zero64, } from './ArrayInt64.js';\nclass ArrayInt64Arbitrary extends NextArbitrary {\n    constructor(min, max) {\n        super();\n        this.min = min;\n        this.max = max;\n        this.biasedRanges = null;\n    }\n    generate(mrng, biasFactor) {\n        const range = this.computeGenerateRange(mrng, biasFactor);\n        const uncheckedValue = mrng.nextArrayInt(range.min, range.max);\n        if (uncheckedValue.data.length === 1) {\n            uncheckedValue.data.unshift(0);\n        }\n        return new NextValue(uncheckedValue, undefined);\n    }\n    computeGenerateRange(mrng, biasFactor) {\n        if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n            return { min: this.min, max: this.max };\n        }\n        const ranges = this.retrieveBiasedRanges();\n        if (ranges.length === 1) {\n            return ranges[0];\n        }\n        const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n        return id < 0 ? ranges[0] : ranges[id + 1];\n    }\n    canShrinkWithoutContext(value) {\n        const unsafeValue = value;\n        return (typeof value === 'object' &&\n            value !== null &&\n            (unsafeValue.sign === -1 || unsafeValue.sign === 1) &&\n            Array.isArray(unsafeValue.data) &&\n            unsafeValue.data.length === 2 &&\n            ((isStrictlySmaller64(this.min, unsafeValue) && isStrictlySmaller64(unsafeValue, this.max)) ||\n                isEqual64(this.min, unsafeValue) ||\n                isEqual64(this.max, unsafeValue)));\n    }\n    shrinkArrayInt64(value, target, tryTargetAsap) {\n        const realGap = substract64(value, target);\n        function* shrinkGen() {\n            let previous = tryTargetAsap ? undefined : target;\n            const gap = tryTargetAsap ? realGap : halve64(realGap);\n            for (let toremove = gap; !isZero64(toremove); toremove = halve64(toremove)) {\n                const next = substract64(value, toremove);\n                yield new NextValue(next, previous);\n                previous = next;\n            }\n        }\n        return stream(shrinkGen());\n    }\n    shrink(current, context) {\n        if (!ArrayInt64Arbitrary.isValidContext(current, context)) {\n            const target = this.defaultTarget();\n            return this.shrinkArrayInt64(current, target, true);\n        }\n        if (this.isLastChanceTry(current, context)) {\n            return Stream.of(new NextValue(context, undefined));\n        }\n        return this.shrinkArrayInt64(current, context, false);\n    }\n    defaultTarget() {\n        if (!isStrictlyPositive64(this.min) && !isStrictlyNegative64(this.max)) {\n            return Zero64;\n        }\n        return isStrictlyNegative64(this.min) ? this.max : this.min;\n    }\n    isLastChanceTry(current, context) {\n        if (isZero64(current)) {\n            return false;\n        }\n        if (current.sign === 1) {\n            return isEqual64(current, add64(context, Unit64)) && isStrictlyPositive64(substract64(current, this.min));\n        }\n        else {\n            return isEqual64(current, substract64(context, Unit64)) && isStrictlyNegative64(substract64(current, this.max));\n        }\n    }\n    static isValidContext(_current, context) {\n        if (context === undefined) {\n            return false;\n        }\n        if (typeof context !== 'object' || context === null || !('sign' in context) || !('data' in context)) {\n            throw new Error(`Invalid context type passed to ArrayInt64Arbitrary (#1)`);\n        }\n        return true;\n    }\n    retrieveBiasedRanges() {\n        if (this.biasedRanges != null) {\n            return this.biasedRanges;\n        }\n        if (isEqual64(this.min, this.max)) {\n            this.biasedRanges = [{ min: this.min, max: this.max }];\n            return this.biasedRanges;\n        }\n        const minStrictlySmallerZero = isStrictlyNegative64(this.min);\n        const maxStrictlyGreaterZero = isStrictlyPositive64(this.max);\n        if (minStrictlySmallerZero && maxStrictlyGreaterZero) {\n            const logMin = logLike64(this.min);\n            const logMax = logLike64(this.max);\n            this.biasedRanges = [\n                { min: logMin, max: logMax },\n                { min: substract64(this.max, logMax), max: this.max },\n                { min: this.min, max: substract64(this.min, logMin) },\n            ];\n        }\n        else {\n            const logGap = logLike64(substract64(this.max, this.min));\n            const arbCloseToMin = { min: this.min, max: add64(this.min, logGap) };\n            const arbCloseToMax = { min: substract64(this.max, logGap), max: this.max };\n            this.biasedRanges = minStrictlySmallerZero\n                ? [arbCloseToMax, arbCloseToMin]\n                : [arbCloseToMin, arbCloseToMax];\n        }\n        return this.biasedRanges;\n    }\n}\nexport function arrayInt64(min, max) {\n    const arb = new ArrayInt64Arbitrary(min, max);\n    return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\n", "import { add64, clone64, isEqual64, isStrictlyPositive64, isStrictlySmaller64, substract64, Unit64, } from './helpers/ArrayInt64.js';\nimport { arrayInt64 } from './helpers/ArrayInt64Arbitrary.js';\nconst INDEX_POSITIVE_INFINITY = { sign: 1, data: [2146435072, 0] };\nconst INDEX_NEGATIVE_INFINITY = { sign: -1, data: [2146435072, 1] };\nexport function decomposeDouble(d) {\n    const maxSignificand = 2 - Number.EPSILON;\n    for (let exponent = -1022; exponent !== 1024; ++exponent) {\n        const powExponent = 2 ** exponent;\n        const maxForExponent = maxSignificand * powExponent;\n        if (Math.abs(d) <= maxForExponent) {\n            return { exponent, significand: d / powExponent };\n        }\n    }\n    return { exponent: Number.NaN, significand: Number.NaN };\n}\nfunction positiveNumberToInt64(n) {\n    return [~~(n / 0x100000000), n >>> 0];\n}\nfunction indexInDoubleFromDecomp(exponent, significand) {\n    if (exponent === -1022) {\n        const rescaledSignificand = significand * 2 ** 52;\n        return positiveNumberToInt64(rescaledSignificand);\n    }\n    const rescaledSignificand = (significand - 1) * 2 ** 52;\n    const exponentOnlyHigh = (exponent + 1023) * 2 ** 20;\n    const index = positiveNumberToInt64(rescaledSignificand);\n    index[0] += exponentOnlyHigh;\n    return index;\n}\nexport function doubleToIndex(d) {\n    if (d === Number.POSITIVE_INFINITY) {\n        return clone64(INDEX_POSITIVE_INFINITY);\n    }\n    if (d === Number.NEGATIVE_INFINITY) {\n        return clone64(INDEX_NEGATIVE_INFINITY);\n    }\n    const decomp = decomposeDouble(d);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (d > 0 || (d === 0 && 1 / d === Number.POSITIVE_INFINITY)) {\n        return { sign: 1, data: indexInDoubleFromDecomp(exponent, significand) };\n    }\n    else {\n        const indexOpposite = indexInDoubleFromDecomp(exponent, -significand);\n        if (indexOpposite[1] === 0xffffffff) {\n            indexOpposite[0] += 1;\n            indexOpposite[1] = 0;\n        }\n        else {\n            indexOpposite[1] += 1;\n        }\n        return { sign: -1, data: indexOpposite };\n    }\n}\nexport function indexToDouble(index) {\n    if (index.sign === -1) {\n        const indexOpposite = { sign: 1, data: [index.data[0], index.data[1]] };\n        if (indexOpposite.data[1] === 0) {\n            indexOpposite.data[0] -= 1;\n            indexOpposite.data[1] = 0xffffffff;\n        }\n        else {\n            indexOpposite.data[1] -= 1;\n        }\n        return -indexToDouble(indexOpposite);\n    }\n    if (isEqual64(index, INDEX_POSITIVE_INFINITY)) {\n        return Number.POSITIVE_INFINITY;\n    }\n    if (index.data[0] < 0x200000) {\n        return (index.data[0] * 0x100000000 + index.data[1]) * 2 ** -1074;\n    }\n    const postIndexHigh = index.data[0] - 0x200000;\n    const exponent = -1021 + (postIndexHigh >> 20);\n    const significand = 1 + ((postIndexHigh & 0xfffff) * 2 ** 32 + index.data[1]) * Number.EPSILON;\n    return significand * 2 ** exponent;\n}\nfunction safeDoubleToIndex(d, constraintsLabel) {\n    if (Number.isNaN(d)) {\n        throw new Error('fc.doubleNext constraints.' + constraintsLabel + ' must be a 32-bit float');\n    }\n    return doubleToIndex(d);\n}\nexport function doubleNext(constraints = {}) {\n    const { noDefaultInfinity = false, noNaN = false, min = noDefaultInfinity ? -Number.MAX_VALUE : Number.NEGATIVE_INFINITY, max = noDefaultInfinity ? Number.MAX_VALUE : Number.POSITIVE_INFINITY, } = constraints;\n    const minIndex = safeDoubleToIndex(min, 'min');\n    const maxIndex = safeDoubleToIndex(max, 'max');\n    if (isStrictlySmaller64(maxIndex, minIndex)) {\n        throw new Error('fc.doubleNext constraints.min must be smaller or equal to constraints.max');\n    }\n    if (noNaN) {\n        return arrayInt64(minIndex, maxIndex).map(indexToDouble);\n    }\n    const positiveMaxIdx = isStrictlyPositive64(maxIndex);\n    const minIndexWithNaN = positiveMaxIdx ? minIndex : substract64(minIndex, Unit64);\n    const maxIndexWithNaN = positiveMaxIdx ? add64(maxIndex, Unit64) : maxIndex;\n    return arrayInt64(minIndexWithNaN, maxIndexWithNaN).map((index) => {\n        if (isStrictlySmaller64(maxIndex, index) || isStrictlySmaller64(index, minIndex))\n            return Number.NaN;\n        else\n            return indexToDouble(index);\n    });\n}\n", "import { integer } from '../../arbitrary/integer.js';\nexport const MIN_VALUE_32 = 2 ** -126 * 2 ** -23;\nexport const MAX_VALUE_32 = 2 ** 127 * (1 + (2 ** 23 - 1) / 2 ** 23);\nexport const EPSILON_32 = 2 ** -23;\nconst INDEX_POSITIVE_INFINITY = 2139095040;\nconst INDEX_NEGATIVE_INFINITY = -2139095041;\nexport function decomposeFloat(f) {\n    const maxSignificand = 1 + (2 ** 23 - 1) / 2 ** 23;\n    for (let exponent = -126; exponent !== 128; ++exponent) {\n        const powExponent = 2 ** exponent;\n        const maxForExponent = maxSignificand * powExponent;\n        if (Math.abs(f) <= maxForExponent) {\n            return { exponent, significand: f / powExponent };\n        }\n    }\n    return { exponent: Number.NaN, significand: Number.NaN };\n}\nfunction indexInFloatFromDecomp(exponent, significand) {\n    if (exponent === -126) {\n        return significand * 0x800000;\n    }\n    return (exponent + 127) * 0x800000 + (significand - 1) * 0x800000;\n}\nexport function floatToIndex(f) {\n    if (f === Number.POSITIVE_INFINITY) {\n        return INDEX_POSITIVE_INFINITY;\n    }\n    if (f === Number.NEGATIVE_INFINITY) {\n        return INDEX_NEGATIVE_INFINITY;\n    }\n    const decomp = decomposeFloat(f);\n    const exponent = decomp.exponent;\n    const significand = decomp.significand;\n    if (Number.isNaN(exponent) || Number.isNaN(significand) || !Number.isInteger(significand * 0x800000)) {\n        return Number.NaN;\n    }\n    if (f > 0 || (f === 0 && 1 / f === Number.POSITIVE_INFINITY)) {\n        return indexInFloatFromDecomp(exponent, significand);\n    }\n    else {\n        return -indexInFloatFromDecomp(exponent, -significand) - 1;\n    }\n}\nexport function indexToFloat(index) {\n    if (index < 0) {\n        return -indexToFloat(-index - 1);\n    }\n    if (index === INDEX_POSITIVE_INFINITY) {\n        return Number.POSITIVE_INFINITY;\n    }\n    if (index < 0x1000000) {\n        return index * 2 ** -149;\n    }\n    const postIndex = index - 0x1000000;\n    const exponent = -125 + (postIndex >> 23);\n    const significand = 1 + (postIndex & 0x7fffff) / 0x800000;\n    return significand * 2 ** exponent;\n}\nfunction safeFloatToIndex(f, constraintsLabel) {\n    const conversionTrick = 'you can convert any double to a 32-bit float by using `new Float32Array([myDouble])[0]`';\n    const errorMessage = 'fc.floatNext constraints.' + constraintsLabel + ' must be a 32-bit float - ' + conversionTrick;\n    if (Number.isNaN(f) || (Number.isFinite(f) && (f < -MAX_VALUE_32 || f > MAX_VALUE_32))) {\n        throw new Error(errorMessage);\n    }\n    const index = floatToIndex(f);\n    if (!Number.isInteger(index)) {\n        throw new Error(errorMessage);\n    }\n    return index;\n}\nexport function floatNext(constraints = {}) {\n    const { noDefaultInfinity = false, noNaN = false, min = noDefaultInfinity ? -MAX_VALUE_32 : Number.NEGATIVE_INFINITY, max = noDefaultInfinity ? MAX_VALUE_32 : Number.POSITIVE_INFINITY, } = constraints;\n    const minIndex = safeFloatToIndex(min, 'min');\n    const maxIndex = safeFloatToIndex(max, 'max');\n    if (minIndex > maxIndex) {\n        throw new Error('fc.floatNext constraints.min must be smaller or equal to constraints.max');\n    }\n    if (noNaN) {\n        return integer({ min: minIndex, max: maxIndex }).map(indexToFloat);\n    }\n    const minIndexWithNaN = maxIndex > 0 ? minIndex : minIndex - 1;\n    const maxIndexWithNaN = maxIndex > 0 ? maxIndex + 1 : maxIndex;\n    return integer({ min: minIndexWithNaN, max: maxIndexWithNaN }).map((index) => {\n        if (index > maxIndex || index < minIndex)\n            return Number.NaN;\n        else\n            return indexToFloat(index);\n    });\n}\n", "import { doubleNext } from './DoubleNextArbitrary.js';\nimport { floatNext } from './FloatNextArbitrary.js';\nimport { integer } from '../../arbitrary/integer.js';\nimport { tuple } from '../../arbitrary/tuple.js';\nfunction next(n) {\n    return integer(0, (1 << n) - 1);\n}\nconst floatInternal = () => {\n    return next(24).map((v) => v / (1 << 24));\n};\nfunction float(...args) {\n    if (typeof args[0] === 'object') {\n        if (args[0].next) {\n            return floatNext(args[0]);\n        }\n        const min = args[0].min !== undefined ? args[0].min : 0;\n        const max = args[0].max !== undefined ? args[0].max : 1;\n        return (floatInternal()\n            .map((v) => min + v * (max - min))\n            .filter((g) => g !== max || g === min));\n    }\n    else {\n        const a = args[0];\n        const b = args[1];\n        if (a === undefined)\n            return floatInternal();\n        if (b === undefined)\n            return (floatInternal()\n                .map((v) => v * a)\n                .filter((g) => g !== a || g === 0));\n        return (floatInternal()\n            .map((v) => a + v * (b - a))\n            .filter((g) => g !== b || g === a));\n    }\n}\nconst doubleFactor = Math.pow(2, 27);\nconst doubleDivisor = Math.pow(2, -53);\nconst doubleInternal = () => {\n    return tuple(next(26), next(27)).map((v) => (v[0] * doubleFactor + v[1]) * doubleDivisor);\n};\nfunction double(...args) {\n    if (typeof args[0] === 'object') {\n        if (args[0].next) {\n            return doubleNext(args[0]);\n        }\n        const min = args[0].min !== undefined ? args[0].min : 0;\n        const max = args[0].max !== undefined ? args[0].max : 1;\n        return (doubleInternal()\n            .map((v) => min + v * (max - min))\n            .filter((g) => g !== max || g === min));\n    }\n    else {\n        const a = args[0];\n        const b = args[1];\n        if (a === undefined)\n            return doubleInternal();\n        if (b === undefined)\n            return (doubleInternal()\n                .map((v) => v * a)\n                .filter((g) => g !== a || g === 0));\n        return (doubleInternal()\n            .map((v) => a + v * (b - a))\n            .filter((g) => g !== b || g === a));\n    }\n}\nexport { float, double };\n", "export function escapeForTemplateString(originalText) {\n    return originalText.replace(/([$`\\\\])/g, '\\\\$1').replace(/\\r/g, '\\\\r');\n}\nexport function escapeForMultilineComments(originalText) {\n    return originalText.replace(/\\*\\//g, '*\\\\/');\n}\n", "import { convertFromNextWithShrunkOnce } from '../check/arbitrary/definition/Converters.js';\nimport { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nexport function maxSafeInteger() {\n    const arb = new IntegerArbitrary(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\n    return convertFromNextWithShrunkOnce(arb, arb.defaultTarget());\n}\n", "import { FrequencyArbitrary } from './_internals/FrequencyArbitrary.js';\nfunction isOneOfContraints(param) {\n    return param != null && typeof param === 'object' && !('generate' in param);\n}\nfunction oneof(...args) {\n    const constraints = args[0];\n    if (isOneOfContraints(constraints)) {\n        const weightedArbs = args.slice(1).map((arbitrary) => ({ arbitrary, weight: 1 }));\n        return FrequencyArbitrary.fromOld(weightedArbs, constraints, 'fc.oneof');\n    }\n    const weightedArbs = args.map((arbitrary) => ({ arbitrary, weight: 1 }));\n    return FrequencyArbitrary.fromOld(weightedArbs, {}, 'fc.oneof');\n}\nexport { oneof };\n", "export function codePointsToStringMapper(tab) {\n    return tab.join('');\n}\nexport function codePointsToStringUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Cannot unmap the passed value');\n    }\n    return [...value];\n}\n", "let contextRemainingDepth = 10;\nexport function memo(builder) {\n    const previous = {};\n    return ((maxDepth) => {\n        const n = maxDepth !== undefined ? maxDepth : contextRemainingDepth;\n        if (!Object.prototype.hasOwnProperty.call(previous, n)) {\n            const prev = contextRemainingDepth;\n            contextRemainingDepth = n - 1;\n            previous[n] = builder(n);\n            contextRemainingDepth = prev;\n        }\n        return previous[n];\n    });\n}\n", "import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { array } from './array.js';\nimport { char } from './char.js';\nimport { extractStringConstraints, } from './_internals/helpers/StringConstraintsExtractor.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nfunction string(...args) {\n    const constraints = extractStringConstraints(args);\n    return convertFromNext(convertToNext(array(char(), constraints)).map(codePointsToStringMapper, codePointsToStringUnmapper));\n}\nexport { string };\n", "import { float } from '../check/arbitrary/FloatingPointArbitrary.js';\nimport { array } from './array.js';\nexport function float32Array(constraints = {}) {\n    return array(float(Object.assign(Object.assign({}, constraints), { next: true })), constraints).map((data) => Float32Array.from(data));\n}\n", "import { double } from '../check/arbitrary/FloatingPointArbitrary.js';\nimport { array } from './array.js';\nexport function float64Array(constraints = {}) {\n    return array(double(Object.assign(Object.assign({}, constraints), { next: true })), constraints).map((data) => Float64Array.from(data));\n}\n", "var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { array } from '../../array.js';\nexport function typedIntArrayArbitraryArbitraryBuilder(constraints, defaultMin, defaultMax, TypedArrayClass, arbitraryBuilder) {\n    const generatorName = TypedArrayClass.name;\n    const { min = defaultMin, max = defaultMax } = constraints, arrayConstraints = __rest(constraints, [\"min\", \"max\"]);\n    if (min > max) {\n        throw new Error(`Invalid range passed to ${generatorName}: min must be lower than or equal to max`);\n    }\n    if (min < defaultMin) {\n        throw new Error(`Invalid min value passed to ${generatorName}: min must be greater than or equal to ${defaultMin}`);\n    }\n    if (max > defaultMax) {\n        throw new Error(`Invalid max value passed to ${generatorName}: max must be lower than or equal to ${defaultMax}`);\n    }\n    return array(arbitraryBuilder({ min, max }), arrayConstraints).map((data) => TypedArrayClass.from(data));\n}\n", "import { integer } from './integer.js';\nimport { typedIntArrayArbitraryArbitraryBuilder, } from './_internals/builders/TypedIntArrayArbitraryBuilder.js';\nexport function int16Array(constraints = {}) {\n    return typedIntArrayArbitraryArbitraryBuilder(constraints, -32768, 32767, Int16Array, integer);\n}\n", "import { integer } from './integer.js';\nimport { typedIntArrayArbitraryArbitraryBuilder, } from './_internals/builders/TypedIntArrayArbitraryBuilder.js';\nexport function int32Array(constraints = {}) {\n    return typedIntArrayArbitraryArbitraryBuilder(constraints, -0x80000000, 0x7fffffff, Int32Array, integer);\n}\n", "import { integer } from './integer.js';\nimport { typedIntArrayArbitraryArbitraryBuilder, } from './_internals/builders/TypedIntArrayArbitraryBuilder.js';\nexport function int8Array(constraints = {}) {\n    return typedIntArrayArbitraryArbitraryBuilder(constraints, -128, 127, Int8Array, integer);\n}\n", "import { integer } from './integer.js';\nimport { typedIntArrayArbitraryArbitraryBuilder, } from './_internals/builders/TypedIntArrayArbitraryBuilder.js';\nexport function uint16Array(constraints = {}) {\n    return typedIntArrayArbitraryArbitraryBuilder(constraints, 0, 65535, Uint16Array, integer);\n}\n", "import { integer } from './integer.js';\nimport { typedIntArrayArbitraryArbitraryBuilder, } from './_internals/builders/TypedIntArrayArbitraryBuilder.js';\nexport function uint32Array(constraints = {}) {\n    return typedIntArrayArbitraryArbitraryBuilder(constraints, 0, 0xffffffff, Uint32Array, integer);\n}\n", "import { integer } from './integer.js';\nimport { typedIntArrayArbitraryArbitraryBuilder, } from './_internals/builders/TypedIntArrayArbitraryBuilder.js';\nexport function uint8Array(constraints = {}) {\n    return typedIntArrayArbitraryArbitraryBuilder(constraints, 0, 255, Uint8Array, integer);\n}\n", "import { integer } from './integer.js';\nimport { typedIntArrayArbitraryArbitraryBuilder, } from './_internals/builders/TypedIntArrayArbitraryBuilder.js';\nexport function uint8ClampedArray(constraints = {}) {\n    return typedIntArrayArbitraryArbitraryBuilder(constraints, 0, 255, Uint8ClampedArray, integer);\n}\n", "import { nat } from '../../arbitrary/nat.js';\nimport { set } from '../../arbitrary/set.js';\nimport { tuple } from '../../arbitrary/tuple.js';\nimport { maxLengthFromMinLength } from '../../arbitrary/_internals/helpers/MaxLengthFromMinLength.js';\nfunction extractMaxIndex(indexesAndValues) {\n    let maxIndex = -1;\n    for (let index = 0; index !== indexesAndValues.length; ++index) {\n        maxIndex = Math.max(maxIndex, indexesAndValues[index][0]);\n    }\n    return maxIndex;\n}\nfunction arrayFromItems(length, indexesAndValues) {\n    const array = Array(length);\n    for (let index = 0; index !== indexesAndValues.length; ++index) {\n        const it = indexesAndValues[index];\n        if (it[0] < length)\n            array[it[0]] = it[1];\n    }\n    return array;\n}\nexport function sparseArray(arb, constraints = {}) {\n    const { minNumElements = 0, maxNumElements = maxLengthFromMinLength(minNumElements), maxLength = Math.min(maxLengthFromMinLength(maxNumElements), 4294967295), noTrailingHole, } = constraints;\n    if (minNumElements > maxLength) {\n        throw new Error(`The minimal number of non-hole elements cannot be higher than the maximal length of the array`);\n    }\n    if (minNumElements > maxNumElements) {\n        throw new Error(`The minimal number of non-hole elements cannot be higher than the maximal number of non-holes`);\n    }\n    const resultedMaxNumElements = Math.min(maxNumElements, maxLength);\n    if (noTrailingHole) {\n        const maxIndexAuthorized = Math.max(maxLength - 1, 0);\n        return set(tuple(nat(maxIndexAuthorized), arb), {\n            minLength: minNumElements,\n            maxLength: resultedMaxNumElements,\n            compare: (itemA, itemB) => itemA[0] === itemB[0],\n        }).map((items) => {\n            const lastIndex = extractMaxIndex(items);\n            return arrayFromItems(lastIndex + 1, items);\n        });\n    }\n    return set(tuple(nat(maxLength), arb), {\n        minLength: minNumElements + 1,\n        maxLength: resultedMaxNumElements + 1,\n        compare: (itemA, itemB) => itemA[0] === itemB[0],\n    }).map((items) => {\n        const length = extractMaxIndex(items);\n        return arrayFromItems(length, items);\n    });\n}\n", "import { stringify } from '../../utils/stringify.js';\nimport { array } from '../../arbitrary/array.js';\nimport { boolean } from '../../arbitrary/boolean.js';\nimport { constant } from '../../arbitrary/constant.js';\nimport { dictionary } from '../../arbitrary/dictionary.js';\nimport { double } from './FloatingPointArbitrary.js';\nimport { frequency } from '../../arbitrary/frequency.js';\nimport { maxSafeInteger } from '../../arbitrary/maxSafeInteger.js';\nimport { memo } from '../../arbitrary/memo.js';\nimport { oneof } from '../../arbitrary/oneof.js';\nimport { set } from '../../arbitrary/set.js';\nimport { string } from '../../arbitrary/string.js';\nimport { unicodeString } from '../../arbitrary/unicodeString.js';\nimport { tuple } from '../../arbitrary/tuple.js';\nimport { bigInt } from '../../arbitrary/bigInt.js';\nimport { date } from '../../arbitrary/date.js';\nimport { float32Array } from '../../arbitrary/float32Array.js';\nimport { float64Array } from '../../arbitrary/float64Array.js';\nimport { int16Array } from '../../arbitrary/int16Array.js';\nimport { int32Array } from '../../arbitrary/int32Array.js';\nimport { int8Array } from '../../arbitrary/int8Array.js';\nimport { uint16Array } from '../../arbitrary/uint16Array.js';\nimport { uint32Array } from '../../arbitrary/uint32Array.js';\nimport { uint8Array } from '../../arbitrary/uint8Array.js';\nimport { uint8ClampedArray } from '../../arbitrary/uint8ClampedArray.js';\nimport { sparseArray } from './SparseArrayArbitrary.js';\nimport { keyValuePairsToObjectMapper } from '../../arbitrary/_internals/mappers/KeyValuePairsToObject.js';\nexport function boxArbitrary(arb) {\n    return arb.map((v) => {\n        switch (typeof v) {\n            case 'boolean':\n                return new Boolean(v);\n            case 'number':\n                return new Number(v);\n            case 'string':\n                return new String(v);\n            default:\n                return v;\n        }\n    });\n}\nclass QualifiedObjectConstraints {\n    constructor(key, values, maxDepth, maxKeys, withSet, withMap, withObjectString, withNullPrototype, withBigInt, withDate, withTypedArray, withSparseArray) {\n        this.key = key;\n        this.values = values;\n        this.maxDepth = maxDepth;\n        this.maxKeys = maxKeys;\n        this.withSet = withSet;\n        this.withMap = withMap;\n        this.withObjectString = withObjectString;\n        this.withNullPrototype = withNullPrototype;\n        this.withBigInt = withBigInt;\n        this.withDate = withDate;\n        this.withTypedArray = withTypedArray;\n        this.withSparseArray = withSparseArray;\n    }\n    static defaultValues() {\n        return [\n            boolean(),\n            maxSafeInteger(),\n            double({ next: true }),\n            string(),\n            oneof(string(), constant(null), constant(undefined)),\n        ];\n    }\n    static boxArbitraries(arbs) {\n        return arbs.map((arb) => boxArbitrary(arb));\n    }\n    static boxArbitrariesIfNeeded(arbs, boxEnabled) {\n        return boxEnabled ? QualifiedObjectConstraints.boxArbitraries(arbs).concat(arbs) : arbs;\n    }\n    static from(settings = {}) {\n        function orDefault(optionalValue, defaultValue) {\n            return optionalValue !== undefined ? optionalValue : defaultValue;\n        }\n        return new QualifiedObjectConstraints(orDefault(settings.key, string()), QualifiedObjectConstraints.boxArbitrariesIfNeeded(orDefault(settings.values, QualifiedObjectConstraints.defaultValues()), orDefault(settings.withBoxedValues, false)), orDefault(settings.maxDepth, 2), orDefault(settings.maxKeys, 5), orDefault(settings.withSet, false), orDefault(settings.withMap, false), orDefault(settings.withObjectString, false), orDefault(settings.withNullPrototype, false), orDefault(settings.withBigInt, false), orDefault(settings.withDate, false), orDefault(settings.withTypedArray, false), orDefault(settings.withSparseArray, false));\n    }\n}\nconst anythingInternal = (constraints) => {\n    const arbKeys = constraints.withObjectString\n        ? memo((n) => frequency({ arbitrary: constraints.key, weight: 10 }, { arbitrary: anythingArb(n).map((o) => stringify(o)), weight: 1 }))\n        : memo(() => constraints.key);\n    const arbitrariesForBase = constraints.values;\n    const maxDepth = constraints.maxDepth;\n    const maxKeys = constraints.maxKeys;\n    const entriesOf = (keyArb, valueArb) => set(tuple(keyArb, valueArb), { maxLength: maxKeys, compare: (t1, t2) => t1[0] === t2[0] });\n    const mapOf = (ka, va) => entriesOf(ka, va).map((v) => new Map(v));\n    const dictOf = (ka, va) => entriesOf(ka, va).map((v) => keyValuePairsToObjectMapper(v));\n    const baseArb = oneof(...arbitrariesForBase);\n    const arrayBaseArb = oneof(...arbitrariesForBase.map((arb) => array(arb, { maxLength: maxKeys })));\n    const objectBaseArb = (n) => oneof(...arbitrariesForBase.map((arb) => dictOf(arbKeys(n), arb)));\n    const setBaseArb = () => oneof(...arbitrariesForBase.map((arb) => set(arb, { maxLength: maxKeys }).map((v) => new Set(v))));\n    const mapBaseArb = (n) => oneof(...arbitrariesForBase.map((arb) => mapOf(arbKeys(n), arb)));\n    const arrayArb = memo((n) => oneof(arrayBaseArb, array(anythingArb(n), { maxLength: maxKeys })));\n    const setArb = memo((n) => oneof(setBaseArb(), set(anythingArb(n), { maxLength: maxKeys }).map((v) => new Set(v))));\n    const mapArb = memo((n) => oneof(mapBaseArb(n), oneof(mapOf(arbKeys(n), anythingArb(n)), mapOf(anythingArb(n), anythingArb(n)))));\n    const objectArb = memo((n) => oneof(objectBaseArb(n), dictOf(arbKeys(n), anythingArb(n))));\n    const anythingArb = memo((n) => {\n        if (n <= 0)\n            return oneof(baseArb);\n        return oneof(baseArb, arrayArb(), objectArb(), ...(constraints.withMap ? [mapArb()] : []), ...(constraints.withSet ? [setArb()] : []), ...(constraints.withObjectString ? [anythingArb().map((o) => stringify(o))] : []), ...(constraints.withNullPrototype ? [objectArb().map((o) => Object.assign(Object.create(null), o))] : []), ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []), ...(constraints.withTypedArray\n            ? [\n                oneof(int8Array(), uint8Array(), uint8ClampedArray(), int16Array(), uint16Array(), int32Array(), uint32Array(), float32Array(), float64Array()),\n            ]\n            : []), ...(constraints.withSparseArray ? [sparseArray(anythingArb())] : []));\n    });\n    return anythingArb(maxDepth);\n};\nconst objectInternal = (constraints) => {\n    return dictionary(constraints.key, anythingInternal(constraints));\n};\nfunction anything(constraints) {\n    return anythingInternal(QualifiedObjectConstraints.from(constraints));\n}\nfunction object(constraints) {\n    return objectInternal(QualifiedObjectConstraints.from(constraints));\n}\nfunction jsonSettings(stringArbitrary, constraints) {\n    const key = stringArbitrary;\n    const values = [\n        boolean(),\n        maxSafeInteger(),\n        double({ next: true, noDefaultInfinity: true, noNaN: true }),\n        stringArbitrary,\n        constant(null),\n    ];\n    return constraints != null\n        ? typeof constraints === 'number'\n            ? { key, values, maxDepth: constraints }\n            : { key, values, maxDepth: constraints.maxDepth }\n        : { key, values };\n}\nfunction jsonObject(constraints) {\n    return anything(jsonSettings(string(), constraints));\n}\nfunction unicodeJsonObject(constraints) {\n    return anything(jsonSettings(unicodeString(), constraints));\n}\nfunction json(constraints) {\n    const arb = constraints != null ? jsonObject(constraints) : jsonObject();\n    return arb.map(JSON.stringify);\n}\nfunction unicodeJson(constraints) {\n    const arb = constraints != null ? unicodeJsonObject(constraints) : unicodeJsonObject();\n    return arb.map(JSON.stringify);\n}\nexport { anything, object, jsonObject, unicodeJsonObject, json, unicodeJson };\n", "import { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { option } from '../../option.js';\nimport { tuple } from '../../tuple.js';\nimport { extractEnumerableKeys } from '../helpers/EnumerableKeysExtractor.js';\nimport { buildValuesAndSeparateKeysToObjectMapper, buildValuesAndSeparateKeysToObjectUnmapper, } from '../mappers/ValuesAndSeparateKeysToObject.js';\nconst noKeyValue = Symbol('no-key');\nexport function buildPartialRecordArbitrary(recordModel, requiredKeys) {\n    const keys = extractEnumerableKeys(recordModel);\n    const arbs = [];\n    for (let index = 0; index !== keys.length; ++index) {\n        const k = keys[index];\n        const requiredArbitrary = recordModel[k];\n        if (requiredKeys === undefined || requiredKeys.indexOf(k) !== -1)\n            arbs.push(requiredArbitrary);\n        else\n            arbs.push(option(requiredArbitrary, { nil: noKeyValue }));\n    }\n    return convertFromNext(convertToNext(tuple(...arbs)).map(buildValuesAndSeparateKeysToObjectMapper(keys, noKeyValue), buildValuesAndSeparateKeysToObjectUnmapper(keys, noKeyValue)));\n}\n", "import { cloneMethod } from '../../symbols.js';\nexport class CommandsIterable {\n    constructor(commands, metadataForReplay) {\n        this.commands = commands;\n        this.metadataForReplay = metadataForReplay;\n    }\n    [Symbol.iterator]() {\n        return this.commands[Symbol.iterator]();\n    }\n    [cloneMethod]() {\n        return new CommandsIterable(this.commands.map((c) => c.clone()), this.metadataForReplay);\n    }\n    toString() {\n        const serializedCommands = this.commands\n            .filter((c) => c.hasRan)\n            .map((c) => c.toString())\n            .join(',');\n        const metadata = this.metadataForReplay();\n        return metadata.length !== 0 ? `${serializedCommands} /*${metadata}*/` : serializedCommands;\n    }\n}\n", "import { escapeForTemplateString } from '../../../check/arbitrary/helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { stringify } from '../../../utils/stringify.js';\nexport class SchedulerImplem {\n    constructor(act, taskSelector) {\n        this.act = act;\n        this.taskSelector = taskSelector;\n        this.lastTaskId = 0;\n        this.sourceTaskSelector = taskSelector.clone();\n        this.scheduledTasks = [];\n        this.triggeredTasks = [];\n    }\n    static buildLog(reportItem) {\n        return `[task\\${${reportItem.taskId}}] ${reportItem.label.length !== 0 ? `${reportItem.schedulingType}::${reportItem.label}` : reportItem.schedulingType} ${reportItem.status}${reportItem.outputValue !== undefined ? ` with value ${escapeForTemplateString(reportItem.outputValue)}` : ''}`;\n    }\n    log(schedulingType, taskId, label, metadata, status, data) {\n        this.triggeredTasks.push({\n            status,\n            schedulingType,\n            taskId,\n            label,\n            metadata,\n            outputValue: data !== undefined ? stringify(data) : undefined,\n        });\n    }\n    scheduleInternal(schedulingType, label, task, metadata, thenTaskToBeAwaited) {\n        let trigger = null;\n        const taskId = ++this.lastTaskId;\n        const scheduledPromise = new Promise((resolve, reject) => {\n            trigger = () => {\n                (thenTaskToBeAwaited ? task.then(() => thenTaskToBeAwaited()) : task).then((data) => {\n                    this.log(schedulingType, taskId, label, metadata, 'resolved', data);\n                    return resolve(data);\n                }, (err) => {\n                    this.log(schedulingType, taskId, label, metadata, 'rejected', err);\n                    return reject(err);\n                });\n            };\n        });\n        this.scheduledTasks.push({\n            original: task,\n            scheduled: scheduledPromise,\n            trigger: trigger,\n            schedulingType,\n            taskId,\n            label,\n            metadata,\n        });\n        return scheduledPromise;\n    }\n    schedule(task, label, metadata) {\n        return this.scheduleInternal('promise', label || '', task, metadata);\n    }\n    scheduleFunction(asyncFunction) {\n        return (...args) => this.scheduleInternal('function', `${asyncFunction.name}(${args.map(stringify).join(',')})`, asyncFunction(...args), undefined);\n    }\n    scheduleSequence(sequenceBuilders) {\n        const status = { done: false, faulty: false };\n        const dummyResolvedPromise = { then: (f) => f() };\n        let resolveSequenceTask = () => { };\n        const sequenceTask = new Promise((resolve) => (resolveSequenceTask = resolve));\n        sequenceBuilders\n            .reduce((previouslyScheduled, item) => {\n            const [builder, label, metadata] = typeof item === 'function' ? [item, item.name, undefined] : [item.builder, item.label, item.metadata];\n            return previouslyScheduled.then(() => {\n                const scheduled = this.scheduleInternal('sequence', label, dummyResolvedPromise, metadata, () => builder());\n                scheduled.catch(() => {\n                    status.faulty = true;\n                    resolveSequenceTask();\n                });\n                return scheduled;\n            });\n        }, dummyResolvedPromise)\n            .then(() => {\n            status.done = true;\n            resolveSequenceTask();\n        }, () => {\n        });\n        return Object.assign(status, {\n            task: Promise.resolve(sequenceTask).then(() => {\n                return { done: status.done, faulty: status.faulty };\n            }),\n        });\n    }\n    count() {\n        return this.scheduledTasks.length;\n    }\n    async internalWaitOne() {\n        if (this.scheduledTasks.length === 0) {\n            throw new Error('No task scheduled');\n        }\n        const taskIndex = this.taskSelector.nextTaskIndex(this.scheduledTasks);\n        const [scheduledTask] = this.scheduledTasks.splice(taskIndex, 1);\n        scheduledTask.trigger();\n        try {\n            await scheduledTask.scheduled;\n        }\n        catch (_err) {\n        }\n    }\n    async waitOne() {\n        await this.act(async () => await this.internalWaitOne());\n    }\n    async waitAll() {\n        while (this.scheduledTasks.length > 0) {\n            await this.waitOne();\n        }\n    }\n    report() {\n        return [\n            ...this.triggeredTasks,\n            ...this.scheduledTasks.map((t) => ({\n                status: 'pending',\n                schedulingType: t.schedulingType,\n                taskId: t.taskId,\n                label: t.label,\n                metadata: t.metadata,\n            })),\n        ];\n    }\n    toString() {\n        return ('schedulerFor()`\\n' +\n            this.report()\n                .map(SchedulerImplem.buildLog)\n                .map((log) => `-> ${log}`)\n                .join('\\n') +\n            '`');\n    }\n    [cloneMethod]() {\n        return new SchedulerImplem(this.act, this.sourceTaskSelector);\n    }\n}\n"],
  "mappings": "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",
  "names": ["StyledElement", "stream", "test", "test", "counter", "skip", "assert", "start", "equal", "func", "stream", "comment", "id", "factory", "indent", "falsy", "fail", "test", "test", "members", "token", "lexer", "eof", "parse", "next", "token", "token", "elements", "context", "value", "context", "FilterArbitrary", "MapArbitrary", "ChainArbitrary", "NoShrinkArbitrary", "NoBiasArbitrary", "context", "context", "_a", "identifier", "context", "context", "v", "idx", "LinearCongruential", "LinearCongruential32", "MersenneTwister", "XorShift128Plus", "XoroShiro128Plus", "rng", "nextRng", "rng", "nextRng", "rng", "nextRng", "VerbosityLevel", "property", "property", "property", "_a", "getAsyncContent", "property", "ExecutionStatus", "failed", "property", "next", "context", "sargs", "context", "v", "array", "next", "context", "context", "gapSize", "sargs", "context", "context", "next", "context", "rescaledSignificand", "INDEX_POSITIVE_INFINITY", "INDEX_NEGATIVE_INFINITY", "weightedArbs", "string", "array", "array", "array", "array", "array", "string", "array", "string", "json", "commands", "json"]
}
